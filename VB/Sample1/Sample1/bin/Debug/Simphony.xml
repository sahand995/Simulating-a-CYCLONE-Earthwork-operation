<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simphony</name>
    </assembly>
    <members>
        <member name="T:Simphony.BindableObjectBase">
            <summary>
            An abstract base class that provides an implementation of the
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </summary>
        </member>
        <member name="E:Simphony.BindableObjectBase.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.BindableObjectBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Simphony.BindableObjectBase.PropertyChanged"/> event.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="M:Simphony.BindableObjectBase.RaisePropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Simphony.BindableObjectBase.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property used to notify listeners. This value is optional and can be
            provided automatically when invoked from compilers that support the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
        </member>
        <member name="M:Simphony.BindableObjectBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if a property already matches a desired value. Sets the property and notifies
            listeners only if necessary.
            </summary>
            <typeparam name="T">
            The type of the property.
            </typeparam>
            <param name="storage">
            Reference to a property with both a getter and a setter.
            </param>
            <param name="value">
            The desired value for the property.
            </param>
            <param name="propertyName">
            The name of the property used to notify listeners. This value is optional and can be
            provided automatically when invoked from compilers that support the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <returns>
            True if the value of the property was changed; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.BindableObjectBase.SetProperty``1(``0@,``0,System.Action,System.String)">
            <summary>
            Checks if a property already matches a desired value. Sets the property and notifies
            listeners only if necessary.
            </summary>
            <typeparam name="T">
            The type of the property.
            </typeparam>
            <param name="storage">
            Reference to a property with both a getter and a setter.
            </param>
            <param name="value">
            The desired value for the property.
            </param>
            <param name="onChanged">
            An <see cref="T:System.Action"/> that is called after the property value has been changed.
            </param>
            <param name="propertyName">
            The name of the property used to notify listeners. This value is optional and can be
            provided automatically when invoked from compilers that support the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <returns>
            True if the value of the property was changed; otherwise, false.
            </returns>
        </member>
        <member name="T:Simphony.Simulation.CalendarEntity">
            <summary>
            Custom entity for calendar events.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CalendarEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.CalendarEntity"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CalendarEntity.#ctor(Simphony.Simulation.Entity[])">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.CalendarEntity"/> class.
            </summary>
            <param name="entities">
            The entities to be controlled by the new calendar entity.
            </param>
        </member>
        <member name="P:Simphony.Simulation.CalendarEntity.Calendar">
            <summary>
            Gets the calendar the entity is associated with.
            </summary>
            <value>
            The calendar the entity is associated with.
            </value>
        </member>
        <member name="P:Simphony.Simulation.CalendarEntity.Entities">
            <summary>
            Gets a list containing entities being controlled by this calendar entity.
            </summary>
            <value>
            A list containing entities being controlled by this calendar entity.
            </value>
            <remarks>
            Developers can store in this list the entities they wish to suspend/resume in
            response to calendar events.
            </remarks>
        </member>
        <member name="P:Simphony.Simulation.CalendarEntity.IsWorking">
            <summary>
            Gets a value indicating whether the current simulation time is in a work period
            of the associated calendar.
            </summary>
            <value>
            True if the current simulation time is in a work period of the associated calendar;
            otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Simulation.CalendarEntity.TimeRemaining">
            <summary>
            Gets the amount of time remaining in the work/non-work period.
            </summary>
            <value>
            The amount of time remaining in the work/non-work period or 24 hours, whichever is smaller.
            </value>
        </member>
        <member name="P:Simphony.Simulation.CalendarEntity.Engine">
            <summary>
            Gets or sets the discrete event simulation engine.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CalendarEntity.Handler">
            <summary>
            Gets or sets the event handler specified by the user.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.PayType">
            <summary>
            An enumeration defining the different pay types.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.PayType.RT">
            <summary>
            Regular time.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.PayType.OT15">
            <summary>
            Time and a half.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.PayType.OT20">
            <summary>
            Double time.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.SelectImportCalendars">
            <summary>
            Form for selecting import calendars.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.SelectImportCalendars.#ctor(Simphony.Simulation.CalendarList)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.SelectImportCalendars"/> class.
            </summary>
            <param name="calendars">
            The import calendars.
            </param>
        </member>
        <member name="P:Simphony.Simulation.SelectImportCalendars.Calendars">
            <summary>
            Gets the calendars.
            </summary>
            <value>
            The calendars.
            </value>
        </member>
        <member name="F:Simphony.Simulation.SelectImportCalendars.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.SelectImportCalendars.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Simulation.SelectImportCalendars.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.GeneralEntity">
            <summary>
            Entity definition for the general template.
            </summary>
            <summary>
            Entity definition for the general template.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.GeneralEntity.Floats">
            <summary>
            Gets a dictionary containing the floating point attributes keyed by index.
            </summary>
            <value>
            A dictionary containing the floating point attributes keyed by index.
            </value>
        </member>
        <member name="P:Simphony.Simulation.GeneralEntity.Ints">
            <summary>
            Gets a dictionary containing the integral attributes keyed by index.
            </summary>
            <value>
            A dictionary containing the integral attributes keyed by index.
            </value>
        </member>
        <member name="P:Simphony.Simulation.GeneralEntity.Objects">
            <summary>
            Gets a dictionary containing the object attributes keyed by index.
            </summary>
            <value>
            A dictionary containing the object attributes keyed by index.
            </value>
        </member>
        <member name="P:Simphony.Simulation.GeneralEntity.Strings">
            <summary>
            Gets a dictionary containing the string attributes keyed by index.
            </summary>
            <value>
            A dictionary containing the string attributes keyed by index.
            </value>
        </member>
        <member name="M:Simphony.Simulation.GeneralEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.GeneralEntity"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.GeneralEntity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.GeneralEntity"/> class.
            </summary>
            <param name="name">
            The name to give the entity.
            </param>
        </member>
        <member name="P:Simphony.Simulation.GeneralEntity.LM">
            <summary>
            Gets or sets the matrix associated with the entity.
            </summary>
            <value>
            The matrix associated with the entity.
            </value>
        </member>
        <member name="P:Simphony.Simulation.GeneralEntity.LN">
            <summary>
            Gets a dictionary containing the integral attributes keyed by index.
            </summary>
            <value>
            A dictionary containing the integral attributes keyed by index.
            </value>
        </member>
        <member name="P:Simphony.Simulation.GeneralEntity.LO">
            <summary>
            Gets a dictionary containing the object attributes keyed by index.
            </summary>
            <value>
            A dictionary containing the object attributes keyed by index.
            </value>
        </member>
        <member name="P:Simphony.Simulation.GeneralEntity.LS">
            <summary>
            Gets a dictionary containing the string attributes keyed by index.
            </summary>
            <value>
            A dictionary containing the string attributes keyed by index.
            </value>
        </member>
        <member name="P:Simphony.Simulation.GeneralEntity.LV">
            <summary>
            Gets or sets the vector associated with the entity.
            </summary>
            <value>
            The vector associated with the entity.
            </value>
        </member>
        <member name="P:Simphony.Simulation.GeneralEntity.LX">
            <summary>
            Gets a dictionary containing the floating point attributes keyed by index.
            </summary>
            <value>
            A dictionary containing the floating point attributes keyed by index.
            </value>
        </member>
        <member name="M:Simphony.Simulation.GeneralEntity.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.WaitingFile">
            <summary>
            Represents a waiting file in a discrete event model.
            </summary>
            <summary>
            Represents a waiting file in a discrete event model.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WaitingFile.FinalizeRun(Simphony.Simulation.IDiscreteEventEngine,System.Int32)">
            <summary>
            Finalizes the waiting file after simulation of a run.
            </summary>
            <param name="engine">
            The simulation engine.
            </param>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
        </member>
        <member name="M:Simphony.Simulation.WaitingFile.InitializeRun(Simphony.Simulation.IDiscreteEventEngine,System.Int32)">
            <summary>
            Initializes the waiting file prior to simulation of a run.
            </summary>
            <param name="engine">
            The simulation engine.
            </param>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
        </member>
        <member name="M:Simphony.Simulation.WaitingFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WaitingFile"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WaitingFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WaitingFile"/> class.
            </summary>
            <param name="name">
            The name of the waiting file.
            </param>
        </member>
        <member name="M:Simphony.Simulation.WaitingFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WaitingFile"/> class.
            </summary>
            <param name="name">
            The name of the waiting file.
            </param>
            <param name="isBlocking">
            A value indicating whether or not the new waiting file will be a
            blocking waiting file.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the supplied name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the supplied name is an empty string.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.WaitingFile.Count">
            <summary>
            Gets the number of resource requests currently in the file.
            </summary>
            <value>
            The number of resource requests currently in the file.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WaitingFile.FileLength">
            <summary>
            Gets an intrinsic statistic describing the length of the waiting file.
            </summary>
            <value>
            An intrinsic statistic describing the length of the waiting file.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WaitingFile.IsBlocking">
            <summary>
            Gets or sets a value indicating whether or not the waiting file is a
            blocking waiting file.
            </summary>
            <value>
            True if the waiting file is a blocking waiting file (i.e. if requirements
            of the entity at the head of the file cannot be fulfilled, other waiting
            entities are not checked); false otherwise.
            </value>
            <remarks>
            The default value for this property is false.
            </remarks>
        </member>
        <member name="P:Simphony.Simulation.WaitingFile.Name">
            <summary>
            Gets or sets the name of the waiting file.
            </summary>
            <value>
            The name of the waiting file.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WaitingFile.WaitingTime">
            <summary>
            Gets a statistic describing the amount of time taken to fulfill a resource request.
            </summary>
            <value>
            A statistic describing the amount of time taken to fulfill a resource request.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WaitingFile.Item(System.Int32)">
            <summary>
            Gets the entity at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the entity to get.
            </param>
            <returns>
            The entity at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is not a valid index in the queue.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.WaitingFile.Contains(Simphony.Simulation.Entity)">
            <summary>
            Determines whether an Entity is in the WaitingFile.
            </summary>
            <param name="entity">
            The entity to search for.
            </param>
            <returns>
            True if the entity is is found in the WaitingFile; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.WaitingFile.FinalizeRun(System.Int32,System.Double)">
            <summary>
            Finalizes the waiting file after simulation of a run.
            </summary>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
            <param name="time">
            The final simulation time.
            </param>
        </member>
        <member name="M:Simphony.Simulation.WaitingFile.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WaitingFile.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WaitingFile.InitializeRun(System.Int32)">
            <summary>
            Initializes the waiting file prior to simulation of a run.
            </summary>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
        </member>
        <member name="M:Simphony.Simulation.WaitingFile.Add(System.Double,Simphony.Simulation.Entity,System.Double)">
            <summary>
            Adds an entity to the file.
            </summary>
            <param name="priority">
            The priority of the entity.
            </param>
            <param name="entity">
            The entity to add.
            </param>
            <param name="time">
            The current simulation time.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.WaitingFile.RemoveAt(System.Int32,System.Double)">
            <summary>
            Removes the entity at the specified index from the file.
            </summary>
            <param name="index">
            The zero-based index of the entity to remove.
            </param>
            <param name="time">
            The current simulation time.
            </param>
            <returns>
            The entity that was removed from the file.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is not a valid index in the list.
            </exception>
        </member>
        <member name="T:Simphony.Simulation.Resource">
            <summary>
            Represents a resource in a discrete event model.
            </summary>
            <summary>
            Represents a resource in a discrete event model.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.Resource.FinalizeRun(Simphony.Simulation.IDiscreteEventEngine,System.Int32)">
            <summary>
            Finalizes the resource after simulation of a run.
            </summary>
            <param name="engine">
            The simulation engine.
            </param>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
        </member>
        <member name="M:Simphony.Simulation.Resource.InitializeRun(Simphony.Simulation.IDiscreteEventEngine,System.Int32)">
            <summary>
            Initializes the resource prior to simulation of a run.
            </summary>
            <param name="engine">
            The simulation engine.
            </param>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
        </member>
        <member name="M:Simphony.Simulation.Resource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.Resource"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.Resource.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.Resource"/> class.
            </summary>
            <param name="servers">
            The initial number of servers available.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of servers is negative.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Resource.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.Resource"/> class.
            </summary>
            <param name="name">
            The name of the resource.
            </param>
            <param name="servers">
            The initial number of servers available.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of servers is negative.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.Resource.Available">
            <summary>
            Gets the number of servers currently available.
            </summary>
            <value>
            The number of servers currently available.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Resource.InUse">
            <summary>
            Gets the number of servers currently in use.
            </summary>
            <value>
            The number of servers currently in use.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Resource.Name">
            <summary>
            Gets or sets the name of the resource.
            </summary>
            <value>
            The name of the resource.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Resource.Owners">
            <summary>
            Gets a sequence containing all the entities that currently own servers.
            </summary>
            <value>
            A sequence containing all the entities that currently own servers.
            </value>
            <remarks>
            Each entity will appear in the sequence only once; regardless of the number of servers it owns.
            use the <see>ServersOwnedByEntity</see> method to find the number of servers an entity owns.
            </remarks>
        </member>
        <member name="P:Simphony.Simulation.Resource.Servers">
            <summary>
            Gets or sets the total number of servers.
            </summary>
            <value>
            The total number of servers.
            </value>
            <remarks>
            <para>Setting this property will have no affect on the utilization statistic of the resource.  If the number
            of servers needs to be modified during simulation, it is recommended that the AlterServers method of the
            simulation engine be called instead. </para>
            <para>Setting this property will not affect the number of servers in use.  If this property is set to a value
            less than the current number of servers in use, then the number of servers available will temporarily be
            negative until the appropriate number of servers is released.</para>
            </remarks>
        </member>
        <member name="P:Simphony.Simulation.Resource.ServersPreempted">
            <summary>
            Gets the number of servers that have been preempted.
            </summary>
            <value>
            The number of servers that have been preempted.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Resource.Utilization">
            <summary>
            Gets an intrinsic statistic describing the utilization of the resource.
            </summary>
            <value>
            An intrinsic statistic describing the utilization of the resource.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Resource.WaitingFiles">
            <summary>
            Gets a list of waiting files to poll when servers become available.
            </summary>
            <value>
            A list of waiting files to poll when servers become available.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Resource.Reservations">
            <summary>
            Gets a list containing the server reservations sorted in ascending order by priority.
            </summary>
            <value>
            A list containing the server reservations sorted in ascending order by priority.
            </value>
        </member>
        <member name="M:Simphony.Simulation.Resource.FinalizeRun(System.Int32,System.Double)">
            <summary>
            Finalizes the resource after simulation of a run.
            </summary>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
            <param name="time">
            The final simulation time.
            </param>
        </member>
        <member name="M:Simphony.Simulation.Resource.InitializeRun(System.Int32)">
            <summary>
            Initializes the resource prior to simulation of a run.
            </summary>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
        </member>
        <member name="M:Simphony.Simulation.Resource.ServersOwnedByEntity(Simphony.Simulation.Entity)">
            <summary>
            Gets the number of servers held by an entity.
            </summary>
            <param name="entity">
            The entity whose held servers will be counted.
            </param>
            <returns>
            The number of servers held by the entity.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Resource.CollectStatistics(System.Double)">
            <summary>
            Called when the resource changes state, so that statistics may be updated.
            </summary>
            <param name="time">
            The current simulation time.
            </param>
        </member>
        <member name="M:Simphony.Simulation.Resource.Release(Simphony.Simulation.IDiscreteEventEngine,Simphony.Simulation.Entity,System.Int32)">
            <summary>
            Releases the specified number of servers.
            </summary>
            <param name="engine">
            The simulation engine.
            </param>
            <param name="entity">
            The entity releasing the servers.
            </param>
            <param name="quantity">
            The number of servers to release.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified engine or the specified entity is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified quantity is not between zero and the number of servers the entity
            has reserved.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Resource.Reserve(Simphony.Simulation.Entity,System.Double,System.Int32,System.Double)">
            <summary>
            Reserves the specified number of servers.
            </summary>
            <param name="entity">
            The entity making the reservation.
            </param>
            <param name="priority">
            The priority of the reservation.
            </param>
            <param name="quantity">
            The number of servers to reserve.
            </param>
            <param name="time">
            The current simulation time.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified quantity is not between zero and the number of servers currently available.
            </exception>
        </member>
        <member name="T:Simphony.Simulation.Statistic">
            <summary>
            Abstract base class for statistics that support multiple runs.
            </summary>
            <summary>
            Abstract base class for statistics that support multiple runs.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.Statistic.FinalizeRun(Simphony.Simulation.IDiscreteEventEngine,System.Int32)">
            <summary>
            Finalizes the statistic after simulation of a run.
            </summary>
            <param name="engine">
            The simulation engine.
            </param>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
        </member>
        <member name="M:Simphony.Simulation.Statistic.InitializeRun(Simphony.Simulation.IDiscreteEventEngine,System.Int32)">
            <summary>
            Initializes the statistic prior to simulation of a run.
            </summary>
            <param name="engine">
            The simulation engine.
            </param>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if <see cref="M:Simphony.Simulation.Statistic.FinalizeRun(System.Int32,System.Double)"/> was not called for the previous run.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Statistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.Statistic"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.Statistic.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.Statistic"/> class.
            </summary>
            <param name="isIntrinsic">
            True if the statistic is intrinsic; otherwise false.
            </param>
        </member>
        <member name="M:Simphony.Simulation.Statistic.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.Statistic"/> class.
            </summary>
            <param name="name">
            The name of the statistic.
            </param>
        </member>
        <member name="M:Simphony.Simulation.Statistic.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.Statistic"/> class.
            </summary>
            <param name="name">
            The name of the statistic.
            </param>
            <param name="isIntrinsic">
            True if the statistic is intrinsic; otherwise false.
            </param>
        </member>
        <member name="E:Simphony.Simulation.Statistic.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.Statistic.RunCount">
            <summary>
            Gets the number of runs processed by the statistic.
            </summary>
            <value>
            The number of runs processed by the statistic.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Statistic.RunIndex">
            <summary>
            Gets or sets the run to display statistics for.
            </summary>
            <value>
            The run to display statistics for.
            </value>
        </member>
        <member name="M:Simphony.Simulation.Statistic.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.Statistic.FinalizeRun(System.Int32,System.Double)">
            <summary>
            Finalizes the statistic after simulation of a run.
            </summary>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
            <param name="time">
            The final simulation time.
            </param>
        </member>
        <member name="M:Simphony.Simulation.Statistic.InitializeRun(System.Int32)">
            <summary>
            Initializes the statistic prior to simulation of a run.
            </summary>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if <see cref="M:Simphony.Simulation.Statistic.FinalizeRun(System.Int32,System.Double)"/> was not called for the previous run.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Statistic.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Simphony.Simulation.Statistic.PropertyChanged"/> event.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="M:Simphony.Simulation.Statistic.OnRunIndexPropertyChanged">
            <summary>
            Raised when the run index property changes.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.Statistic.RaisePropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Simphony.Simulation.Statistic.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property used to notify listeners. This value is optional and can be
            provided automatically when invoked from compilers that support the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
        </member>
        <member name="T:Simphony.Simulation.BasicCombinedEngine">
            <summary>
            Implements a basic combined continuous and discrete event simulation engine that provides
            support for only a single scenario.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicCombinedEngine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicCombinedEngine"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.BasicCombinedEngine.AbsoluteError">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicCombinedEngine.IsSimulating">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicCombinedEngine.RelativeError">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicCombinedEngine.TimeNow">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicCombinedEngine.AddWatch(Simphony.Simulation.IWatch)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicCombinedEngine.FinalizeRun(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicCombinedEngine.Halt">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicCombinedEngine.InitializeEngine">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicCombinedEngine.InitializeRun(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicCombinedEngine.RemoveWatch(Simphony.Simulation.IWatch)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicCombinedEngine.Simulate(System.Collections.Generic.IEnumerable{Simphony.Simulation.IStateVariable},System.Action{System.Double,System.Double[],System.Double[]},System.Double,System.Double)">
            <summary>
            Starts simulation at the current simulation time and continues simulating until there are
            no scheduled events, a specified halt time is reached, or the simulation is halted.
            </summary>
            <param name="variables">
            A list of state variables.
            </param>
            <param name="f">
            A user-supplied method of the form f(t, y, y') used to evaluate the derivatives.
            </param>
            <param name="haltTime">
            The time at which simulation should stop; or double.PositiveInfinity if simulation should
            not be constrained by simulation time.
            </param>
            <param name="timeStep">
            The maximum permissible time step.
            </param>
            <returns>
            The reason simulation terminated.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified list of state variables is non-null and non-empty and the user-supplied method is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified time step is not strictly positive.
            </exception>
            <exception cref="T:Simphony.Simulation.RunNotInitializedException">
            Thrown if the run hasn't been initialized.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicCombinedEngine.WatchEntity.#ctor(Simphony.Simulation.IContinuousEngine,Simphony.Simulation.IDiscreteEventEngine,Simphony.Simulation.IWatch)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicCombinedEngine.WatchEntity"/> class.
            </summary>
            <param name="continuousEngine">
            The continuous simulation engine associated with the entity.
            </param>
            <param name="discreteEventEngine">
            The discrete event simulation engine associated with the entity.
            </param>
            <param name="watch">
            The watch being wrapped by the entity.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the either of the specified simulation engines is a null reference or if the
            specified watch is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.BasicCombinedEngine.WatchEntity.Direction">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicCombinedEngine.WatchEntity.Index">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicCombinedEngine.WatchEntity.Threshold">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicCombinedEngine.WatchEntity.Tolerance">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicCombinedEngine.WatchEntity.Watch">
            <summary>
            Gets the watch being wrapped by the entity.
            </summary>
            <value>
            The watch being wrapped by the entity.
            </value>
        </member>
        <member name="M:Simphony.Simulation.BasicCombinedEngine.WatchEntity.Notify">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.BasicContinuousEngine">
            <summary>
            Implements a basic continuous simulation engine that provides support for only a single
            scenario.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.BasicContinuousEngine.AbsoluteError">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicContinuousEngine.IsSimulating">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicContinuousEngine.RelativeError">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicContinuousEngine.TimeNow">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicContinuousEngine.AddWatch(Simphony.Simulation.IWatch)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicContinuousEngine.FinalizeRun(System.Int32)">
            <summary>
            Finalizes the engine after simulation of the specified run.
            </summary>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
            <exception cref="T:Simphony.Simulation.RunAlreadyFinalizedException">
            Thrown if the run has already been finalized.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicContinuousEngine.InitializeRun(System.Int32)">
            <summary>
            Initializes the engine in preparation for the specified run.
            </summary>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
            <exception cref="T:Simphony.Simulation.RunAlreadyInitializedException">
            Thrown if the run has already been initialized.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicContinuousEngine.RemoveWatch(Simphony.Simulation.IWatch)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicContinuousEngine.Simulate(System.Double[],System.Action{System.Double,System.Double[],System.Double[]},System.Double)">
            <summary>
            Simulates for a specified amount of time.
            </summary>
            <param name="y">
            An array of state variables.
            </param>
            <param name="f">
            A user-supplied method of the form f(t, y, y') used to evaluate the derivatives.
            </param>
            <param name="haltTime">
            The time at which simulation should stop.
            </param>
            <returns>
            The time at which simulation stopped.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of state variables or the user-supplied method is a null
            reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified array of state variables is empty, the specified halt time is is
            infinite, or if the specified halt time is not strictly greater than the current
            simulation time.
            </exception>
            <exception cref="T:Simphony.Simulation.RunNotInitializedException">
            Thrown if the run hasn't been initialized.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicContinuousEngine.Simulate(System.Collections.Generic.IEnumerable{Simphony.Simulation.IStateVariable},System.Action{System.Double,System.Double[],System.Double[]},System.Double)">
            <summary>
            Simulates for a specified amount of time.
            </summary>
            <param name="variables">
            A list of state variables.
            </param>
            <param name="f">
            A user-supplied method of the form f(t, y, y') used to evaluate the derivatives.
            </param>
            <param name="haltTime">
            The time at which simulation should stop.
            </param>
            <returns>
            The time at which simulation stopped.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified list of state variables or the user-supplied method is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified list of state variables is empty, the specified halt time is is
            infinite, or if the specified halt time is not strictly greater than the current
            simulation time.
            </exception>
            <exception cref="T:Simphony.Simulation.RunNotInitializedException">
            Thrown if the run hasn't been initialized.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicContinuousEngine.HasCrossed(Simphony.Simulation.IWatch,System.Double[],System.Double[])">
            <summary>
            Determines whether or not the threshold value has been passed.
            </summary>
            <param name="watch">
            The watch.
            </param>
            <param name="yprev">
            The previous values of the state variables.
            </param>
            <param name="y">
            The current values of the state variables.
            </param>
            <returns>
            True if the threshold value has been passed; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.BasicContinuousEngine.HasCrossedTooFar(Simphony.Simulation.IWatch,System.Double[],System.Double[])">
            <summary>
            Determines whether or not the threshold value has been passed beyond the allowed tolerance.
            </summary>
            <param name="watch">
            The watch.
            </param>
            <param name="yprev">
            The previous values of the state variables.
            </param>
            <param name="y">
            The current values of the state variables.
            </param>
            <returns>
            True if the threshold value has been passed beyond the allowed tolerance; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.BasicContinuousEngine.F(System.Double,System.Double[],System.Double[])">
            <summary>
            The method used to evaluate derivatives for continuous simulation.
            </summary>
            <param name="t">
            The simulation time.
            </param>
            <param name="y">
            The current values of the state variables at time t.
            </param>
            <param name="yp">
            When the method exits, the values of the derivatives of the state variables at time t.
            </param>
        </member>
        <member name="T:Simphony.Simulation.BasicSimulationEngine">
            <summary>
            Abstract base class for a simulation engine that supports a single run.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicSimulationEngine.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Simphony.Simulation.BasicSimulationEngine"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.BasicSimulationEngine.DateNow">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicSimulationEngine.IsSimulating">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicSimulationEngine.PercentComplete">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicSimulationEngine.StartDate">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicSimulationEngine.TimeNow">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicSimulationEngine.TimeUnit">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicSimulationEngine.CollectStatistic(Simphony.Simulation.CostStatistic,System.Nullable{System.Decimal})">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicSimulationEngine.CollectStatistic(Simphony.Simulation.DateStatistic,System.Nullable{System.DateTime})">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicSimulationEngine.CollectStatistic(Simphony.Simulation.DecimalStatistic,System.Nullable{System.Decimal})">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicSimulationEngine.CollectStatistic(Simphony.Simulation.DurationStatistic,System.Nullable{System.TimeSpan})">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicSimulationEngine.CollectStatistic(Simphony.Simulation.NumericStatistic,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicSimulationEngine.CollectStatistic(Simphony.Simulation.NumericStatistic,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicSimulationEngine.CollectStatistic``1(Simphony.Simulation.EnumeratedStatistic{``0},``0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicSimulationEngine.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicSimulationEngine.InitializeEngine">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicSimulationEngine.Dispose(System.Boolean)">
            <inheritdoc cref="M:Simphony.DisposableObjectBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:Simphony.Simulation.IContinuousEngine">
            <summary>
            Interface implemented by continuous simulation engines.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.IContinuousEngine.AbsoluteError">
            <summary>
            Gets or sets the absolute local truncation error allowed in Runge-Kutta integration.
            </summary>
            <value>
            The absolute local truncation error allowed in Runge-Kutta integration.
            </value>
        </member>
        <member name="P:Simphony.Simulation.IContinuousEngine.RelativeError">
            <summary>
            Gets or sets the relative local truncation error allowed in Runge-Kutta integration.
            </summary>
            <value>
            The relative local truncation error allowed in Runge-Kutta integration.
            </value>
        </member>
        <member name="M:Simphony.Simulation.IContinuousEngine.AddWatch(Simphony.Simulation.IWatch)">
            <summary>
            Adds a watch of a state variable.
            </summary>
            <param name="watch">
            The watch.
            </param>
            <returns>
            True if the watch is successfully added; false if it is already present.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified watch is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IContinuousEngine.RemoveWatch(Simphony.Simulation.IWatch)">
            <summary>
            Removes a watch of a state variable.
            </summary>
            <param name="watch">
            The watch.
            </param>
            <returns>
            True if the watch is successfully removed; false if it is not present.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified watch is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.Simulation.IStateVariable">
            <summary>
            Interface implemented by a class that represents a state variable.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.IStateVariable.Index">
            <summary>
            Gets or sets the index of the state variable.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.IStateVariable.Value">
            <summary>
            Gets or sets the value of the state variable.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.IWatch">
            <summary>
            Interface implemented by a class that waits for a state variable to cross a threshold.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.IWatch.Direction">
            <summary>
            Gets the crossing direction.
            </summary>
            <value>
            The crossing direction.
            </value>
        </member>
        <member name="P:Simphony.Simulation.IWatch.Index">
            <summary>
            Gets the index of the state variable the watch is watching.
            </summary>
            <value>
            The index of the state variable the watch is watching.
            </value>
        </member>
        <member name="P:Simphony.Simulation.IWatch.Threshold">
            <summary>
            Gets the value to watch for.
            </summary>
            <value>
            The value to watch for.
            </value>
        </member>
        <member name="P:Simphony.Simulation.IWatch.Tolerance">
            <summary>
            Gets the tolerance within which the crossing is to be detected.
            </summary>
            <value>
            The tolerance within which the crossing is to be detected.
            </value>
        </member>
        <member name="M:Simphony.Simulation.IWatch.Notify">
            <summary>
            Notifies the watch that a state event has been detected.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.StateVariable">
            <summary>
            A simple implementation of the <see cref="T:Simphony.Simulation.IStateVariable"/> interface.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.StateVariable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.StateVariable"/> class with an initial value
            of zero.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.StateVariable.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.StateVariable"/> class with a specified
            initial value.
            </summary>
            <param name="initialValue">
            The initial value of the state variable.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified initial value is infinite or NaN.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.StateVariable.Index">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.StateVariable.Value">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.Watch">
            <summary>
            An implementation of the <see cref="T:Simphony.Simulation.IWatch"/> interface.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.Watch.#ctor(System.Int32,Simphony.Simulation.WatchDirection,System.Double,System.Double,System.Action{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.Watch"/> class.
            </summary>
            <param name="index">
            The index of the state variable to watch.
            </param>
            <param name="direction">
            The crossing direction.
            </param>
            <param name="threshold">
            The value to watch for.
            </param>
            <param name="tolerance">
            The tolerance within which the crossing is to be detected.
            </param>
            <param name="notify">
            The method to call when a state event is detected.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified method is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is negative.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Watch.#ctor(Simphony.Simulation.IStateVariable,Simphony.Simulation.WatchDirection,System.Double,System.Double,System.Action{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.Watch"/> class.
            </summary>
            <param name="stateVariable">
            The state variable to watch.
            </param>
            <param name="direction">
            The crossing direction.
            </param>
            <param name="threshold">
            The value to watch for.
            </param>
            <param name="tolerance">
            The tolerance within which the crossing is to be detected.
            </param>
            <param name="notify">
            The method to call when a state event is detected.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified state variable or the specified method is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.Watch.Direction">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.Watch.Index">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.Watch.Threshold">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.Watch.Tolerance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.Watch.Notify">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.WatchDirection">
            <summary>
            Specifies the possible directions in which a watch element can be triggered.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.WatchDirection.Positive">
            <summary>
            The watch element will be triggered when the value of the state variable rises
            from below the threshold to above the threshold.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.WatchDirection.Negative">
            <summary>
            The watch element will be triggered when the value of the state variable falls
            from above the threshold to below the threshold.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.WatchDirection.Both">
            <summary>
            The watch element will be triggered when the value of the state variable crosses
            the threshold in either direction.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.BasicDecimalStatistic">
            <summary>
            A decimal-based statistic that supports a single run.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.BasicDecimalStatistic.BinomialCoefficients">
            <summary>
            Binomial coefficients used for calculation of central moments.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicDecimalStatistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicDecimalStatistic"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicDecimalStatistic.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicDecimalStatistic"/> class.
            </summary>
            <param name="isIntrinsic">
            True if the statistic is intrinsic; otherwise false.
            </param>
        </member>
        <member name="P:Simphony.Simulation.BasicDecimalStatistic.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicDecimalStatistic.Current">
            <summary>
            Gets the most recent observation.
            </summary>
            <value>
            The most recent observation. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDecimalStatistic.Kurtosis">
            <summary>
            Gets the kurtosis of the observations.
            </summary>
            <value>
            The kurtosis of the observations. If there are no observations or if the variance of the
            observations is zero, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDecimalStatistic.LastTime">
            <summary>
            Gets the simulation time at which the most recent observation was collected.
            </summary>
            <value>
            The simulation time at which the most recent observation was collected; or NaN if no
            observations have been collected.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDecimalStatistic.Maximum">
            <summary>
            Gets the largest observed value.
            </summary>
            <value>
            The largest observed value. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDecimalStatistic.Mean">
            <summary>
            Gets the mean of the observations.
            </summary>
            <value>
            The mean of the observations. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDecimalStatistic.Minimum">
            <summary>
            Gets the smallest observed value.
            </summary>
            <value>
            The smallest observed value. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDecimalStatistic.Observations">
            <summary>
            Gets a list containing the observations.
            </summary>
            <returns>
            A list containing the observations.
            </returns>
        </member>
        <member name="P:Simphony.Simulation.BasicDecimalStatistic.Skewness">
            <summary>
            Gets the skewness of the observations.
            </summary>
            <value>
            The skewness of the observations. If there are no observations or if the variance of the
            observations is zero, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDecimalStatistic.StandardDeviation">
            <summary>
            Gets the standard deviation of the observations.
            </summary>
            <value>
            The standard deviation of the observations. If there are no observations, the return
            value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDecimalStatistic.Sum">
            <summary>
            Gets the sum of the observations.
            </summary>
            <value>
            The sum of the observations. If there are no observations, the return value is
            null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDecimalStatistic.Times">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicDecimalStatistic.Variance">
            <summary>
            Gets the variance of the observations.
            </summary>
            <value>
            The variance of the observations. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="M:Simphony.Simulation.BasicDecimalStatistic.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDecimalStatistic.Collect(System.Double,System.Nullable{System.Decimal})">
            <summary>
            Collects an observation.
            </summary>
            <param name="time">
            The time of the observation.
            </param>
            <param name="value">
            The observation to collect.
            </param>
        </member>
        <member name="M:Simphony.Simulation.BasicDecimalStatistic.CentralMoment(System.Int32)">
            <summary>
            Calculates the k-th sample central moment.
            </summary>
            <param name="k">
            An integer in the range 1 to 4.
            </param>
            <returns>
            The k-th sample central moment. If there are no observations, the return value is null.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if k is not within the range 1 to 4.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicDecimalStatistic.WeightedCollect(System.Double,System.Nullable{System.Decimal})">
            <summary>
            Collects a weighted observation.
            </summary>
            <param name="weight">
            The weight of the observation.
            </param>
            <param name="value">
            The observation to collect.
            </param>
        </member>
        <member name="T:Simphony.Simulation.BasicDurationStatistic">
            <summary>
            A duration statistic that supports a single run.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicDurationStatistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicDurationStatistic"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.BasicDurationStatistic.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicDurationStatistic.Current">
            <summary>
            Gets the most recent observation.
            </summary>
            <value>
            The most recent observation. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDurationStatistic.Maximum">
            <summary>
            Gets the largest observed value.
            </summary>
            <value>
            The largest observed value. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDurationStatistic.Mean">
            <summary>
            Gets the mean of the observations.
            </summary>
            <value>
            The mean of the observations. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDurationStatistic.Minimum">
            <summary>
            Gets the smallest observed value.
            </summary>
            <value>
            The smallest observed value. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDurationStatistic.Observations">
            <summary>
            Gets a list containing the observations.
            </summary>
            <returns>
            A list containing the observations.
            </returns>
        </member>
        <member name="P:Simphony.Simulation.BasicDurationStatistic.StandardDeviation">
            <summary>
            Gets the standard deviation of the observations.
            </summary>
            <value>
            The standard deviation of the observations. If there are no observations, the return
            value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDurationStatistic.Times">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicDurationStatistic.Variance">
            <summary>
            Gets the variance of the observations.
            </summary>
            <value>
            The variance of the observations. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="M:Simphony.Simulation.BasicDurationStatistic.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDurationStatistic.Collect(System.Double,System.Nullable{System.TimeSpan})">
            <summary>
            Collects an observation.
            </summary>
            <param name="time">
            The time of the observation.
            </param>
            <param name="value">
            The observation to collect.
            </param>
        </member>
        <member name="M:Simphony.Simulation.BasicDurationStatistic.FromDays(System.Double)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified number of days, where the
            specification is accurate to the nearest millisecond.
            </summary>
            <param name="value">
            A number of days, accurate to the nearest millisecond.
            </param>
            <returns>
            An object that represents <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.BasicDurationStatistic.CustomList.#ctor(System.Collections.Generic.IReadOnlyList{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicDurationStatistic.CustomList"/> class.
            </summary>
            <param name="innerList">
            The list to be wrapped.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified list is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.BasicDurationStatistic.CustomList.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicDurationStatistic.CustomList.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDurationStatistic.CustomList.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDurationStatistic.CustomList.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.BasicEnumeratedStatistic`1">
            <summary>
            An enumerated statistic that supports a single run.
            </summary>
            <typeparam name="T">
            The type of observation supported by the statistic.
            </typeparam>
        </member>
        <member name="M:Simphony.Simulation.BasicEnumeratedStatistic`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicEnumeratedStatistic`1"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicEnumeratedStatistic`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicEnumeratedStatistic`1"/> class.
            </summary>
            <param name="isIntrinsic">
            True if the statistic is intrinsic; otherwise false.
            </param>
        </member>
        <member name="P:Simphony.Simulation.BasicEnumeratedStatistic`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicEnumeratedStatistic`1.Current">
            <summary>
            Gets the most recent observation.
            </summary>
            <value>
            The most recent observation. If there are no observations, the return value is the default
            value of the enumeration.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicEnumeratedStatistic`1.LastTime">
            <summary>
            Gets the simulation time at which the most recent observation was collected.
            </summary>
            <value>
            The simulation time at which the most recent observation was collected; or NaN if no
            observations have been collected.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicEnumeratedStatistic`1.LeastFrequent">
            <summary>
            Gets the least frequent observation.
            </summary>
            <value>
            The least frequent observation. If there are no observations, the return value is the
            default value of the enumeration.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicEnumeratedStatistic`1.LeastFrequentPercentage">
            <summary>
            Gets the percentage of time the least frequent observation was observed.
            </summary>
            <value>
            The percentage of time the least frequent observation was observed. If there are no
            observations, the return value is NaN.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicEnumeratedStatistic`1.MostFrequent">
            <summary>
            Gets the most frequent observation.
            </summary>
            <value>
            The most frequent observation. If there are no observations, the return value is the
            default value of the enumeration.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicEnumeratedStatistic`1.MostFrequentPercentage">
            <summary>
            Gets the percentage of time the most frequent observation was observed.
            </summary>
            <value>
            The percentage of time the most frequent observation was observed. If there are no
            observations, the return value is NaN.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicEnumeratedStatistic`1.Observations">
            <summary>
            Gets a list containing the observations.
            </summary>
            <returns>
            A list containing the observations.
            </returns>
        </member>
        <member name="P:Simphony.Simulation.BasicEnumeratedStatistic`1.Times">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicEnumeratedStatistic`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicEnumeratedStatistic`1.Collect(System.Double,`0)">
            <summary>
            Collects an observation.
            </summary>
            <param name="time">
            The time of the observation.
            </param>
            <param name="value">
            The observation to collect.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified value is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.Simulation.BasicCostStatistic">
            <summary>
            A cost statistic that supports a single run.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicCostStatistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicCostStatistic"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicCostStatistic.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicCostStatistic"/> class.
            </summary>
            <param name="isIntrinsic">
            True if the statistic is intrinsic; otherwise false.
            </param>
        </member>
        <member name="P:Simphony.Simulation.BasicCostStatistic.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicCostStatistic.Current">
            <summary>
            Gets the most recent observation.
            </summary>
            <value>
            The most recent observation. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicCostStatistic.Kurtosis">
            <summary>
            Gets the kurtosis of the observations.
            </summary>
            <value>
            The kurtosis of the observations. If there are no observations or if the variance of the
            observations is zero, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicCostStatistic.LastTime">
            <summary>
            Gets the simulation time at which the most recent observation was collected.
            </summary>
            <value>
            The simulation time at which the most recent observation was collected; or NaN if no
            observations have been collected.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicCostStatistic.Maximum">
            <summary>
            Gets the largest observed value.
            </summary>
            <value>
            The largest observed value. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicCostStatistic.Mean">
            <summary>
            Gets the mean of the observations.
            </summary>
            <value>
            The mean of the observations. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicCostStatistic.Minimum">
            <summary>
            Gets the smallest observed value.
            </summary>
            <value>
            The smallest observed value. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicCostStatistic.Observations">
            <summary>
            Gets a list containing the observations.
            </summary>
            <returns>
            A list containing the observations.
            </returns>
        </member>
        <member name="P:Simphony.Simulation.BasicCostStatistic.Skewness">
            <summary>
            Gets the skewness of the observations.
            </summary>
            <value>
            The skewness of the observations. If there are no observations or if the variance of the
            observations is zero, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicCostStatistic.StandardDeviation">
            <summary>
            Gets the standard deviation of the observations.
            </summary>
            <value>
            The standard deviation of the observations. If there are no observations, the return
            value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicCostStatistic.Sum">
            <summary>
            Gets the sum of the observations.
            </summary>
            <value>
            The sum of the observations. If there are no observations, the return value is
            null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicCostStatistic.Times">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicCostStatistic.Variance">
            <summary>
            Gets the variance of the observations.
            </summary>
            <value>
            The variance of the observations. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="M:Simphony.Simulation.BasicCostStatistic.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicCostStatistic.Collect(System.Double,System.Nullable{System.Decimal})">
            <summary>
            Collects an observation.
            </summary>
            <param name="time">
            The time of the observation.
            </param>
            <param name="value">
            The observation to collect.
            </param>
        </member>
        <member name="T:Simphony.Simulation.BasicDateStatistic">
            <summary>
            A date statistic that supports a single run.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicDateStatistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicDateStatistic"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.BasicDateStatistic.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicDateStatistic.Current">
            <summary>
            Gets the most recent observation.
            </summary>
            <value>
            The most recent observation. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDateStatistic.Maximum">
            <summary>
            Gets the largest observed value.
            </summary>
            <value>
            The largest observed value. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDateStatistic.Mean">
            <summary>
            Gets the mean of the observations.
            </summary>
            <value>
            The mean of the observations. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDateStatistic.Minimum">
            <summary>
            Gets the smallest observed value.
            </summary>
            <value>
            The smallest observed value. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDateStatistic.Observations">
            <summary>
            Gets a list containing the observations.
            </summary>
            <returns>
            A list containing the observations.
            </returns>
        </member>
        <member name="P:Simphony.Simulation.BasicDateStatistic.StandardDeviation">
            <summary>
            Gets the standard deviation of the observations.
            </summary>
            <value>
            The standard deviation of the observations. If there are no observations, the return
            value is null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDateStatistic.Times">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicDateStatistic.Variance">
            <summary>
            Gets the variance of the observations.
            </summary>
            <value>
            The variance of the observations. If there are no observations, the return value is null.
            </value>
        </member>
        <member name="M:Simphony.Simulation.BasicDateStatistic.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDateStatistic.Collect(System.Double,System.Nullable{System.DateTime})">
            <summary>
            Collects an observation.
            </summary>
            <param name="time">
            The time of the observation.
            </param>
            <param name="value">
            The observation to collect.
            </param>
        </member>
        <member name="M:Simphony.Simulation.BasicDateStatistic.FromDays(System.Double)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified number of days, where the
            specification is accurate to the nearest millisecond.
            </summary>
            <param name="value">
            A number of days, accurate to the nearest millisecond.
            </param>
            <returns>
            An object that represents <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.BasicDateStatistic.FromOADate(System.Double)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> equivalent to the specified OLE Automation Date.
            </summary>
            <param name="d">
            An OLE Automation Date value.
            </param>
            <returns>
            An object that represents the same date and time as <paramref name="d"/>.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.BasicDateStatistic.CustomList.#ctor(System.Collections.Generic.IReadOnlyList{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicDateStatistic.CustomList"/> class.
            </summary>
            <param name="innerList">
            The list to be wrapped.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified list is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.BasicDateStatistic.CustomList.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicDateStatistic.CustomList.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDateStatistic.CustomList.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDateStatistic.CustomList.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.BasicNumericStatistic">
            <summary>
            A numeric statistic that supports a single run.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.BasicNumericStatistic.BinomialCoefficients">
            <summary>
            Binomial coefficients used for calculation of central moments.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicNumericStatistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicNumericStatistic"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicNumericStatistic.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicNumericStatistic"/> class.
            </summary>
            <param name="isIntrinsic">
            True if the statistic is intrinsic; otherwise false.
            </param>
        </member>
        <member name="P:Simphony.Simulation.BasicNumericStatistic.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicNumericStatistic.Current">
            <summary>
            Gets the most recent observation.
            </summary>
            <value>
            The most recent observation. If there are no observations, the return value is
            Double.NaN.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicNumericStatistic.Kurtosis">
            <summary>
            Gets the kurtosis of the observations.
            </summary>
            <value>
            The kurtosis of the observations. If there are no observations or if the variance of the
            observations is zero, the return value is Double.NaN.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicNumericStatistic.LastTime">
            <summary>
            Gets the simulation time at which the most recent observation was collected.
            </summary>
            <value>
            The simulation time at which the most recent observation was collected; or NaN if no
            observations have been collected.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicNumericStatistic.Maximum">
            <summary>
            Gets the largest observed value.
            </summary>
            <value>
            The largest observed value. If there are no observations, the return value is Double.NaN.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicNumericStatistic.Mean">
            <summary>
            Gets the mean of the observations.
            </summary>
            <value>
            The mean of the observations. If there are no observations, the return value is
            Double.NaN.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicNumericStatistic.Minimum">
            <summary>
            Gets the smallest observed value.
            </summary>
            <value>
            The smallest observed value. If there are no observations, the return value is
            Double.NaN.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicNumericStatistic.Observations">
            <summary>
            Gets a list containing the observations.
            </summary>
            <returns>
            A list containing the observations.
            </returns>
        </member>
        <member name="P:Simphony.Simulation.BasicNumericStatistic.ShapiroWilkStatistic">
            <summary>
            Gets the test statistic for the Shapiro-Wilk test of normality.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.BasicNumericStatistic.Skewness">
            <summary>
            Gets the skewness of the observations.
            </summary>
            <value>
            The skewness of the observations. If there are no observations or if the variance of the
            observations is zero, the return value is Double.NaN.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicNumericStatistic.StandardDeviation">
            <summary>
            Gets the standard deviation of the observations.
            </summary>
            <value>
            The standard deviation of the observations. If there are no observations, the return
            value is Double.NaN.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicNumericStatistic.Sum">
            <summary>
            Gets the sum of the observations.
            </summary>
            <value>
            The sum of the observations. If there are no observations, the return value is
            Double.NaN.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicNumericStatistic.Times">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicNumericStatistic.Variance">
            <summary>
            Gets the variance of the observations.
            </summary>
            <value>
            The variance of the observations. If there are no observations, the return value is
            Double.NaN.
            </value>
        </member>
        <member name="M:Simphony.Simulation.BasicNumericStatistic.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicNumericStatistic.Collect(System.Double,System.Double)">
            <summary>
            Collects an observation.
            </summary>
            <param name="time">
            The time of the observation.
            </param>
            <param name="value">
            The observation to collect.
            </param>
        </member>
        <member name="M:Simphony.Simulation.BasicNumericStatistic.CentralMoment(System.Int32)">
            <summary>
            Calculates the k-th sample central moment.
            </summary>
            <param name="k">
            An integer in the range 1 to 4.
            </param>
            <returns>
            The k-th sample central moment. If there are no observations, the return value is
            Double.NaN.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if k is not within the range 1 to 4.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicNumericStatistic.WeightedCollect(System.Double,System.Double)">
            <summary>
            Collects a weighted observation.
            </summary>
            <param name="weight">
            The weight of the observation.
            </param>
            <param name="value">
            The observation to collect.
            </param>
        </member>
        <member name="T:Simphony.Simulation.BasicStatistic">
            <summary>
            Abstract base class for statistics.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicStatistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicStatistic"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicStatistic.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicStatistic"/> class.
            </summary>
            <param name="isIntrinsic">
            True if the statistic is intrinsic; otherwise false.
            </param>
        </member>
        <member name="M:Simphony.Simulation.BasicStatistic.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicStatistic"/> class.
            </summary>
            <param name="name">
            The name of the statistic.
            </param>
        </member>
        <member name="M:Simphony.Simulation.BasicStatistic.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicStatistic"/> class.
            </summary>
            <param name="name">
            The name of the statistic.
            </param>
            <param name="isIntrinsic">
            True if the statistic is intrinsic; otherwise false.
            </param>
        </member>
        <member name="P:Simphony.Simulation.BasicStatistic.Count">
            <summary>
            Gets the number of observations.
            </summary>
            <value>
            The number of observations.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicStatistic.IsIntrinsic">
            <summary>
            Gets or sets a value indicating whether or not the statistic is intrinsic.
            </summary>
            <value>
            True if the statistic is intrinsic; otherwise false.
            </value>
            <remarks>
            Changing this property during simulation will result in unpredictable behaviour.
            </remarks>
        </member>
        <member name="P:Simphony.Simulation.BasicStatistic.Name">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicStatistic.Times">
            <summary>
            Gets a list containing the times of the observations.
            </summary>
            <returns>
            A list containing the times of the observations.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.BasicStatistic.Clear">
            <summary>
            Clears all observations from the statistic.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicStatistic.ClearChartCustomizations">
            <summary>
            Removes all chart customizations from the statistic, causing the defaults to be restored.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicStatistic.GetCustomAxisFormat(Simphony.Simulation.StatisticRunType,Simphony.Simulation.StatisticChartType,System.Windows.Forms.DataVisualization.Charting.AxisName)">
            <summary>
            Gets the custom format of a specified axis.
            </summary>
            <param name="runType">
            The type of run.
            </param>
            <param name="chartType">
            The type of chart.
            </param>
            <param name="axisName">
            The axis.
            </param>
            <returns>
            The format of the specified axis.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.BasicStatistic.GetCustomAxisTitle(Simphony.Simulation.StatisticRunType,Simphony.Simulation.StatisticChartType,System.Windows.Forms.DataVisualization.Charting.AxisName)">
            <summary>
            Gets the custom title of a specified axis.
            </summary>
            <param name="runType">
            The type of run.
            </param>
            <param name="chartType">
            The type of chart.
            </param>
            <param name="axisName">
            The axis.
            </param>
            <returns>
            The title of the specified axis.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.BasicStatistic.GetCustomChartTitle(Simphony.Simulation.StatisticRunType,Simphony.Simulation.StatisticChartType)">
            <summary>
            Gets the custom title of a chart.
            </summary>
            <param name="runType">
            The type of run.
            </param>
            <param name="chartType">
            The type of chart.
            </param>
            <returns>
            The title of the chart.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.BasicStatistic.SetCustomAxisFormat(Simphony.Simulation.StatisticRunType,Simphony.Simulation.StatisticChartType,System.Windows.Forms.DataVisualization.Charting.AxisName,System.String)">
            <summary>
            Sets the custom format of a specified axis.
            </summary>
            <param name="runType">
            The type of run.
            </param>
            <param name="chartType">
            The type of chart.
            </param>
            <param name="axisName">
            The axis.
            </param>
            <param name="format">
            The format of the axis.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified format is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicStatistic.SetCustomAxisTitle(Simphony.Simulation.StatisticRunType,Simphony.Simulation.StatisticChartType,System.Windows.Forms.DataVisualization.Charting.AxisName,System.String)">
            <summary>
            Sets the custom title of a specified axis.
            </summary>
            <param name="runType">
            The type of run.
            </param>
            <param name="chartType">
            The type of chart.
            </param>
            <param name="axisName">
            The axis.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified title is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicStatistic.SetCustomChartTitle(Simphony.Simulation.StatisticRunType,Simphony.Simulation.StatisticChartType,System.String)">
            <summary>
            Sets the custom title of a chart.
            </summary>
            <param name="runType">
            The type of run.
            </param>
            <param name="chartType">
            The type of chart.
            </param>
            <param name="title">
            The title of the chart.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified title is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicStatistic.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.BasicStatistic.ChartCustomization">
            <summary>
            Class for storing chart customization information.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicStatistic.ChartCustomization.#ctor(Simphony.Simulation.StatisticRunType,Simphony.Simulation.StatisticChartType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicStatistic.ChartCustomization"/> class.
            </summary>
            <param name="runType">
            The type of run the customization applies to.
            </param>
            <param name="chartType">
            The type of chart the customization applies to.
            </param>
            <param name="item">
            The item the customization applies to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified item is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified item is an empty string.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.BasicStatistic.ChartCustomization.ChartType">
            <summary>
            Gets a value indicating the type of chart the customization applies to.
            </summary>
            <value>
            The type of chart the customization applies to.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicStatistic.ChartCustomization.Item">
            <summary>
            Gets the item the customization applies to.
            </summary>
            <value>
            The item the customization applies to.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicStatistic.ChartCustomization.RunType">
            <summary>
            Gets a value indicating the type of run the customization applies to.
            </summary>
            <value>
            The type of run the customization applies to.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicStatistic.ChartCustomization.Value">
            <summary>
            Gets or sets the value of the customization.
            </summary>
            <value>
            The value of the customization.
            </value>
        </member>
        <member name="T:Simphony.Simulation.ChartAttribute">
            <summary>
            A custom attribute used to specify the types of chart to generate for different
            numerical statistic interpretations.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.ChartAttribute.#ctor(Simphony.Simulation.StatisticRunType,Simphony.Simulation.StatisticChartType)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.ChartAttribute"/> class.
            </summary>
            <param name="runType">
            The type of run the attribute permits.
            </param>
            <param name="chartType">
            The type of chart the attribute permits.
            </param>
        </member>
        <member name="P:Simphony.Simulation.ChartAttribute.ChartType">
            <summary>
            Gets the type of chart the attribute permits.
            </summary>
            <value>
            The type of chart the attribute permits.
            </value>
        </member>
        <member name="P:Simphony.Simulation.ChartAttribute.FormatX">
            <summary>
            Gets or sets the format of the X-axis.
            </summary>
            <value>
            The format of the X-axis.
            </value>
        </member>
        <member name="P:Simphony.Simulation.ChartAttribute.FormatY">
            <summary>
            Gets or sets the format of the Y-axis.
            </summary>
            <value>
            The format of the Y-axis.
            </value>
        </member>
        <member name="P:Simphony.Simulation.ChartAttribute.RunType">
            <summary>
            Gets the type of run the attribute permits.
            </summary>
            <value>
            The type of run the attribute permits.
            </value>
        </member>
        <member name="P:Simphony.Simulation.ChartAttribute.TitleX">
            <summary>
            Gets or sets the title of the X-axis.
            </summary>
            <value>
            The title of the X-axis.
            </value>
        </member>
        <member name="P:Simphony.Simulation.ChartAttribute.TitleY">
            <summary>
            Gets or sets the title of the Y-axis.
            </summary>
            <value>
            The title of the Y-axis.
            </value>
        </member>
        <member name="T:Simphony.Simulation.DecimalStatisticDialog">
            <summary>
            Dialog box displayed by the <see cref="T:Simphony.Simulation.DecimalStatisticEditor"/>.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DecimalStatisticDialog.#ctor(Simphony.Simulation.DecimalStatistic,System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.DecimalStatisticDialog"/> class.
            </summary>
            <param name="statistic">
            The statistic to display.
            </param>
            <param name="context">
            The type descriptor context that was passed to the editor.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified statistic is a null reference.
            </exception>
        </member>
        <member name="F:Simphony.Simulation.DecimalStatisticDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DecimalStatisticDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Simulation.DecimalStatisticDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.DecimalStatisticEditor">
            <summary>
            A design value editor that can provide a user interface for representing decimal-based
            statistics.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DecimalStatisticEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DecimalStatisticEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.DecimalStatistic">
            <summary>
            A decimal-based statistic that supports multiple runs.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DecimalStatistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.DecimalStatistic"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DecimalStatistic.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.DecimalStatistic"/> class.
            </summary>
            <param name="name">
            The name of the statistic.
            </param>
            <param name="isIntrinsic">
            True if the statistic is intrinsic; otherwise false.
            </param>
        </member>
        <member name="P:Simphony.Simulation.DecimalStatistic.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DecimalStatistic.Current">
            <inheritdoc cref="P:Simphony.Simulation.BasicDecimalStatistic.Current"/>
        </member>
        <member name="P:Simphony.Simulation.DecimalStatistic.Kurtosis">
            <inheritdoc cref="P:Simphony.Simulation.BasicDecimalStatistic.Kurtosis"/>
        </member>
        <member name="P:Simphony.Simulation.DecimalStatistic.LastTime">
            <summary>
            Gets the simulation time at which the most recent observation was collected.
            </summary>
            <value>
            The simulation time at which the most recent observation was collected; or NaN if no
            observations have been collected.
            </value>
        </member>
        <member name="P:Simphony.Simulation.DecimalStatistic.Maximum">
            <inheritdoc cref="P:Simphony.Simulation.BasicDecimalStatistic.Maximum"/>
        </member>
        <member name="P:Simphony.Simulation.DecimalStatistic.Mean">
            <inheritdoc cref="P:Simphony.Simulation.BasicDecimalStatistic.Mean"/>
        </member>
        <member name="P:Simphony.Simulation.DecimalStatistic.Minimum">
            <inheritdoc cref="P:Simphony.Simulation.BasicDecimalStatistic.Minimum"/>
        </member>
        <member name="P:Simphony.Simulation.DecimalStatistic.Observations">
            <inheritdoc cref="P:Simphony.Simulation.BasicDecimalStatistic.Observations"/>
        </member>
        <member name="P:Simphony.Simulation.DecimalStatistic.RunCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DecimalStatistic.Skewness">
            <inheritdoc cref="P:Simphony.Simulation.BasicDecimalStatistic.Skewness"/>
        </member>
        <member name="P:Simphony.Simulation.DecimalStatistic.StandardDeviation">
            <inheritdoc cref="P:Simphony.Simulation.BasicDecimalStatistic.StandardDeviation"/>
        </member>
        <member name="P:Simphony.Simulation.DecimalStatistic.Sum">
            <inheritdoc cref="P:Simphony.Simulation.BasicDecimalStatistic.Sum"/>
        </member>
        <member name="P:Simphony.Simulation.DecimalStatistic.Times">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DecimalStatistic.Variance">
            <inheritdoc cref="P:Simphony.Simulation.BasicDecimalStatistic.Variance"/>
        </member>
        <member name="M:Simphony.Simulation.DecimalStatistic.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DecimalStatistic.FinalizeRun(System.Int32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DecimalStatistic.InitializeRun(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DecimalStatistic.Collect(System.Double,System.Nullable{System.Decimal})">
            <summary>
            Collects an observation.
            </summary>
            <param name="time">
            The time of the observation.
            </param>
            <param name="value">
            The observation to collect.
            </param>
        </member>
        <member name="M:Simphony.Simulation.DecimalStatistic.OnRunIndexPropertyChanged">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.DurationStatisticDialog">
            <summary>
            Dialog box displayed by the <see cref="T:Simphony.Simulation.DurationStatisticEditor"/>.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DurationStatisticDialog.#ctor(Simphony.Simulation.DurationStatistic,System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.DurationStatisticDialog"/> class.
            </summary>
            <param name="statistic">
            The statistic to display.
            </param>
            <param name="context">
            The type descriptor context that was passed to the editor.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified statistic is a null reference.
            </exception>
        </member>
        <member name="F:Simphony.Simulation.DurationStatisticDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DurationStatisticDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Simulation.DurationStatisticDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.DurationStatisticEditor">
            <summary>
            A design value editor that can provide a user interface for representing duration statistics.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DurationStatisticEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DurationStatisticEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.DurationStatistic">
            <summary>
            A duration statistic that supports multiple runs.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DurationStatistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.DurationStatistic"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DurationStatistic.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.DurationStatistic"/> class.
            </summary>
            <param name="name">
            The name of the statistic.
            </param>
        </member>
        <member name="P:Simphony.Simulation.DurationStatistic.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DurationStatistic.Current">
            <inheritdoc cref="P:Simphony.Simulation.BasicDurationStatistic.Current"/>
        </member>
        <member name="P:Simphony.Simulation.DurationStatistic.Maximum">
            <inheritdoc cref="P:Simphony.Simulation.BasicDurationStatistic.Maximum"/>
        </member>
        <member name="P:Simphony.Simulation.DurationStatistic.Mean">
            <inheritdoc cref="P:Simphony.Simulation.BasicDurationStatistic.Mean"/>
        </member>
        <member name="P:Simphony.Simulation.DurationStatistic.Minimum">
            <inheritdoc cref="P:Simphony.Simulation.BasicDurationStatistic.Minimum"/>
        </member>
        <member name="P:Simphony.Simulation.DurationStatistic.Observations">
            <inheritdoc cref="P:Simphony.Simulation.BasicDurationStatistic.Observations"/>
        </member>
        <member name="P:Simphony.Simulation.DurationStatistic.RunCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DurationStatistic.StandardDeviation">
            <inheritdoc cref="P:Simphony.Simulation.BasicDurationStatistic.StandardDeviation"/>
        </member>
        <member name="P:Simphony.Simulation.DurationStatistic.Times">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DurationStatistic.Variance">
            <inheritdoc cref="P:Simphony.Simulation.BasicDurationStatistic.Variance"/>
        </member>
        <member name="M:Simphony.Simulation.DurationStatistic.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DurationStatistic.FinalizeRun(System.Int32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DurationStatistic.InitializeRun(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DurationStatistic.Collect(System.Double,System.Nullable{System.TimeSpan})">
            <summary>
            Collects an observation.
            </summary>
            <param name="time">
            The time of the observation.
            </param>
            <param name="value">
            The observation to collect.
            </param>
        </member>
        <member name="M:Simphony.Simulation.DurationStatistic.OnRunIndexPropertyChanged">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.DateStatisticEditor">
            <summary>
            A design value editor that can provide a user interface for representing date statistics.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DateStatisticEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DateStatisticEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.DateStatisticDialog">
            <summary>
            Dialog box displayed by the <see cref="T:Simphony.Simulation.DateStatisticEditor"/>.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DateStatisticDialog.#ctor(Simphony.Simulation.DateStatistic,System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.DateStatisticDialog"/> class.
            </summary>
            <param name="statistic">
            The statistic to display.
            </param>
            <param name="context">
            The type descriptor context that was passed to the editor.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified statistic is a null reference.
            </exception>
        </member>
        <member name="F:Simphony.Simulation.DateStatisticDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DateStatisticDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Simulation.DateStatisticDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.DateStatistic">
            <summary>
            A date statistic that supports multiple runs.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DateStatistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.DateStatistic"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DateStatistic.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.DateStatistic"/> class.
            </summary>
            <param name="name">
            The name of the statistic.
            </param>
        </member>
        <member name="P:Simphony.Simulation.DateStatistic.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DateStatistic.Current">
            <inheritdoc cref="P:Simphony.Simulation.BasicDateStatistic.Current"/>
        </member>
        <member name="P:Simphony.Simulation.DateStatistic.Maximum">
            <inheritdoc cref="P:Simphony.Simulation.BasicDateStatistic.Maximum"/>
        </member>
        <member name="P:Simphony.Simulation.DateStatistic.Mean">
            <inheritdoc cref="P:Simphony.Simulation.BasicDateStatistic.Mean"/>
        </member>
        <member name="P:Simphony.Simulation.DateStatistic.Minimum">
            <inheritdoc cref="P:Simphony.Simulation.BasicDateStatistic.Minimum"/>
        </member>
        <member name="P:Simphony.Simulation.DateStatistic.Observations">
            <inheritdoc cref="P:Simphony.Simulation.BasicDateStatistic.Observations"/>
        </member>
        <member name="P:Simphony.Simulation.DateStatistic.RunCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DateStatistic.StandardDeviation">
            <inheritdoc cref="P:Simphony.Simulation.BasicDateStatistic.StandardDeviation"/>
        </member>
        <member name="P:Simphony.Simulation.DateStatistic.Times">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DateStatistic.Variance">
            <inheritdoc cref="P:Simphony.Simulation.BasicDateStatistic.Variance"/>
        </member>
        <member name="M:Simphony.Simulation.DateStatistic.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DateStatistic.FinalizeRun(System.Int32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DateStatistic.InitializeRun(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DateStatistic.Collect(System.Double,System.Nullable{System.DateTime})">
            <summary>
            Collects an observation.
            </summary>
            <param name="time">
            The time of the observation.
            </param>
            <param name="value">
            The observation to collect.
            </param>
        </member>
        <member name="M:Simphony.Simulation.DateStatistic.OnRunIndexPropertyChanged">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.EnumeratedStatisticDialog">
            <summary>
            Dialog box displayed by the <see cref="T:Simphony.Simulation.EnumeratedStatisticEditor"/>.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.EnumeratedStatisticDialog.#ctor(Simphony.Simulation.Statistic,System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.EnumeratedStatisticDialog"/> class.
            </summary>
            <param name="statistic">
            The statistic to display.
            </param>
            <param name="context">
            The type descriptor context that was passed to the editor.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified statistic is a null reference.
            </exception>
        </member>
        <member name="F:Simphony.Simulation.EnumeratedStatisticDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.EnumeratedStatisticDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Simulation.EnumeratedStatisticDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.CostStatistic">
            <summary>
            A cost statistic that supports multiple runs.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CostStatistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.CostStatistic"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CostStatistic.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.CostStatistic"/> class.
            </summary>
            <param name="name">
            The name of the statistic.
            </param>
            <param name="isIntrinsic">
            True if the statistic is intrinsic; otherwise false.
            </param>
        </member>
        <member name="P:Simphony.Simulation.CostStatistic.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.CostStatistic.Current">
            <inheritdoc cref="P:Simphony.Simulation.BasicCostStatistic.Current"/>
        </member>
        <member name="P:Simphony.Simulation.CostStatistic.Kurtosis">
            <inheritdoc cref="P:Simphony.Simulation.BasicCostStatistic.Kurtosis"/>
        </member>
        <member name="P:Simphony.Simulation.CostStatistic.LastTime">
            <summary>
            Gets the simulation time at which the most recent observation was collected.
            </summary>
            <value>
            The simulation time at which the most recent observation was collected; or NaN if no
            observations have been collected.
            </value>
        </member>
        <member name="P:Simphony.Simulation.CostStatistic.Maximum">
            <inheritdoc cref="P:Simphony.Simulation.BasicCostStatistic.Maximum"/>
        </member>
        <member name="P:Simphony.Simulation.CostStatistic.Mean">
            <inheritdoc cref="P:Simphony.Simulation.BasicCostStatistic.Mean"/>
        </member>
        <member name="P:Simphony.Simulation.CostStatistic.Minimum">
            <inheritdoc cref="P:Simphony.Simulation.BasicCostStatistic.Minimum"/>
        </member>
        <member name="P:Simphony.Simulation.CostStatistic.Observations">
            <inheritdoc cref="P:Simphony.Simulation.BasicCostStatistic.Observations"/>
        </member>
        <member name="P:Simphony.Simulation.CostStatistic.RunCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.CostStatistic.Skewness">
            <inheritdoc cref="P:Simphony.Simulation.BasicCostStatistic.Skewness"/>
        </member>
        <member name="P:Simphony.Simulation.CostStatistic.StandardDeviation">
            <inheritdoc cref="P:Simphony.Simulation.BasicCostStatistic.StandardDeviation"/>
        </member>
        <member name="P:Simphony.Simulation.CostStatistic.Sum">
            <inheritdoc cref="P:Simphony.Simulation.BasicCostStatistic.Sum"/>
        </member>
        <member name="P:Simphony.Simulation.CostStatistic.Times">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.CostStatistic.Variance">
            <inheritdoc cref="P:Simphony.Simulation.BasicCostStatistic.Variance"/>
        </member>
        <member name="M:Simphony.Simulation.CostStatistic.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.CostStatistic.FinalizeRun(System.Int32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.CostStatistic.InitializeRun(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.CostStatistic.Collect(System.Double,System.Nullable{System.Decimal})">
            <summary>
            Collects an observation.
            </summary>
            <param name="time">
            The time of the observation.
            </param>
            <param name="value">
            The observation to collect.
            </param>
        </member>
        <member name="M:Simphony.Simulation.CostStatistic.OnRunIndexPropertyChanged">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.CostStatisticDialog">
            <summary>
            Dialog box displayed by the <see cref="T:Simphony.Simulation.CostStatisticEditor"/>.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CostStatisticDialog.#ctor(Simphony.Simulation.CostStatistic,System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.CostStatisticDialog"/> class.
            </summary>
            <param name="statistic">
            The statistic to display.
            </param>
            <param name="context">
            The type descriptor context that was passed to the editor.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified statistic is a null reference.
            </exception>
        </member>
        <member name="F:Simphony.Simulation.CostStatisticDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CostStatisticDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Simulation.CostStatisticDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.NumericStatisticDialog">
            <summary>
            Dialog box displayed by the <see cref="T:Simphony.Simulation.NumericStatisticEditor"/>.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticDialog.#ctor(Simphony.Simulation.NumericStatistic,System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.NumericStatisticDialog"/> class.
            </summary>
            <param name="statistic">
            The statistic to display.
            </param>
            <param name="context">
            The type descriptor context that was passed to the editor.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified statistic is a null reference.
            </exception>
        </member>
        <member name="F:Simphony.Simulation.NumericStatisticDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.CostStatisticEditor">
            <summary>
            A design value editor that can provide a user interface for representing cost statistics.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CostStatisticEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.CostStatisticEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.CoefficientsCollection">
            <summary>
            Contains the periodic polynomial coefficients for each weather element.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CoefficientsCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.CoefficientsCollection"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CoefficientsCollection.GustMaxMean">
            <summary>
            Gets the polynomial coefficients for the maximum gust mean.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CoefficientsCollection.GustMaxStandardDeviation">
            <summary>
            Gets the polynomial coefficients for the maximum gust standard deviation.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CoefficientsCollection.TempMaxMean">
            <summary>
            Gets the polynomial coefficients for the maximum temperature mean.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CoefficientsCollection.TempMaxStandardDeviation">
            <summary>
            Gets the polynomial coefficients for the maximum temperature standard deviation.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CoefficientsCollection.TempMinMean">
            <summary>
            Gets the polynomial coefficients for the minimum temperature mean.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CoefficientsCollection.TempMinStandardDeviation">
            <summary>
            Gets the polynomial coefficients for the minimum temperature standard deviation.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CoefficientsCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Simphony.Simulation.CoefficientsCollection.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.CoefficientsCollection.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.CoefficientsCollection.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.CoefficientsCollection.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.CoefficientsCollection.SetCoefficients(System.Collections.Generic.IEnumerable{Simphony.Simulation.ImportedRecord})">
            <summary>
            Sets the polynomial coefficients from a set of data.
            </summary>
            <param name="records">The weather records.</param>
        </member>
        <member name="T:Simphony.Simulation.CoefficientsConverter">
            <summary>
            A type converter that rounds polynomial coefficients to six decimal spaces with trailing zeroes.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CoefficientsConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.CoefficientsConverter"/> class.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.CoefficientsElement">
            <summary>
            A wrapper class for polynomial coefficients in the <see cref="T:Simphony.Simulation.WeatherParameters"/> element.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CoefficientsElement.#ctor(Simphony.Simulation.PrecipitationCategory,System.String,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.CoefficientsElement"/> class.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
            <param name="data">The list of coefficients.</param>
        </member>
        <member name="P:Simphony.Simulation.CoefficientsElement.A">
            <summary>
            Gets or sets the coefficient value.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CoefficientsElement.B">
            <summary>
            Gets or sets the coefficient value.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CoefficientsElement.C">
            <summary>
            Gets or sets the coefficient value.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CoefficientsElement.Category">
            <summary>
            Gets the element's category.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CoefficientsElement.D">
            <summary>
            Gets or sets the coefficient value.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CoefficientsElement.E">
            <summary>
            Gets or sets the coefficient value.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CoefficientsElement.F">
            <summary>
            Gets or sets the coefficient value.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CoefficientsElement.Name">
            <summary>
            Gets the element's name.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CoefficientsElement.Data">
            <summary>
            Gets or sets the data values.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.ImportedRecord">
            <summary>
            Represents weather information for a day.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ImportedRecord.CoolDegDays">
            <summary>
            Gets the cooling degree days in degrees centigrade.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ImportedRecord.Date">
            <summary>
            Gets or sets the date the record corresponds to.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ImportedRecord.DirOfMaxGust">
            <summary>
            Gets the direction of the maximum wind gust in degrees.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ImportedRecord.HeatDegDays">
            <summary>
            Gets the heating degree days in degrees centigrade.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ImportedRecord.IsValid">
            <summary>
            Gets a value indicating whether the record is valid.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ImportedRecord.IsWetDay">
            <summary>
            Gets a value indicating whether it is a wet day.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ImportedRecord.MaxTemp">
            <summary>
            Gets or sets the maximum temperature in degrees centigrade.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ImportedRecord.MeanTemp">
            <summary>
            Gets the mean temperature in degrees centigrade.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ImportedRecord.MinTemp">
            <summary>
            Gets or sets the minimum temperature in degrees centigrade.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ImportedRecord.SnowOnGround">
            <summary>
            Gets the total snow on the ground in centimeters.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ImportedRecord.SpeedOfMaxGust">
            <summary>
            Gets or sets the speed of the maximum wind gust in kilometers per hour.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ImportedRecord.TotalPrecipitation">
            <summary>
            Gets or sets the total precipitation in millimeters.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ImportedRecord.TotalRain">
            <summary>
            Gets the total rain in millimeters.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ImportedRecord.TotalSnow">
            <summary>
            Gets the total snow in centimeters.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.ImportedRecord.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.ImportedRecord.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.ImportedRecord.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.ImportedRecord.TryReadSimpleElementAsDouble(System.Xml.XmlReader,System.String,System.String,System.Double)">
            <summary>
            Try to read the simple element as a double.
            </summary>
            <param name="reader">The XML reader.</param>
            <param name="name">The name of the element.</param>
            <param name="nextName">The name of the next element.</param>
            <param name="defaultValue">The default value in the case of an exception.</param>
            <returns>The read double.</returns>
        </member>
        <member name="T:Simphony.Simulation.ImportProgress">
            <summary>
            A form that downloads and deserializes the required weather files.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.ImportProgress.#ctor(Simphony.Simulation.WeatherImporterForm)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.ImportProgress"/> class.
            </summary>
            <param name="importer">
            The form that contains the import information.
            </param>
        </member>
        <member name="F:Simphony.Simulation.ImportProgress.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.ImportProgress.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Simulation.ImportProgress.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.MaxGustConverter">
            <summary>
            Custom type converter to round speed of max gust doubles to 0 decimal places.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.MaxGustConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.MaxGustConverter"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.MaxGustConverter.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.MaxGustConverter"/> class.
            </summary>
            <param name="numberOfDigits">
            The number of digits to round to.
            </param>
            <param name="showTrailingZeros">
            True to show trailing zeros; false to hide them.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the number of digits is outside the range of 0 to 16.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.MaxGustConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.MaxGustConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.MaxGustConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.MonthConverter">
            <summary>
            A type converter that converts integers to their respective months.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.MonthConverter.Names">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.MonthConverter.Values">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.PrecipitationCategory">
            <summary>
            An enumerator for precipitation categories.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.PrecipitationCategory.Invalid">
            <summary>
            An invalid category.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.PrecipitationCategory.Wet">
            <summary>
            A category for wet days.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.PrecipitationCategory.Dry">
            <summary>
            A category for dry days.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.PrecipitationParametersConverter">
            <summary>
            A type converter that rounds precipitation parameters to six decimal spaces with trailing zeroes.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.PrecipitationParametersConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.PrecipitationParametersConverter"/> class.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.PrecipitationParametersRecord">
            <summary>
            A record containing parameters for predicting a given month's precipitation values.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.PrecipitationParametersRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.PrecipitationParametersRecord"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.PrecipitationParametersRecord.#ctor(System.Int32,System.Collections.Generic.IEnumerable{Simphony.Simulation.ImportedRecord},Simphony.Simulation.ImportedRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.PrecipitationParametersRecord"/> class.
            </summary>
            <param name="month">The numeric value of the month.</param>
            <param name="monthRecords">Records of the same month for all years.</param>
            <param name="prevRecord">The previous record of the earliest record in the set of months.</param>
        </member>
        <member name="P:Simphony.Simulation.PrecipitationParametersRecord.Month">
            <summary>
            Gets the month for this record.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.PrecipitationParametersRecord.Scale">
            <summary>
            Gets or sets the gamma distribution scale.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.PrecipitationParametersRecord.Shape">
            <summary>
            Gets or sets the gamma distribution shape.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.PrecipitationParametersRecord.WetFromDry">
            <summary>
            Gets or sets the probability of a transition to a wet day from a dry day.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.PrecipitationParametersRecord.WetFromWet">
            <summary>
            Gets or sets the probability of a transition to a wet day from a wet day.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.PrecipitationParametersRecord.WetProbability">
            <summary>
            Gets or sets the probability of a wet day.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.PrecipitationParametersRecord.Gamma">
            <summary>
            Gets or sets the precipitation distribution.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.PrecipitationParametersRecord.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Simphony.Simulation.PrecipitationParametersRecord.GetSchema">
            <summary>
            This method is reserved and should not be used.
            </summary>
            <returns>
            This method always returns null.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.PrecipitationParametersRecord.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Simphony.Simulation.PrecipitationParametersRecord.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the class from an XML reader.
            </summary>
            <param name="reader">
            The XML reader to deserialize from.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified XML reader is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.PrecipitationParametersRecord.ToString">
            <summary>
            Generates a string representation of the current object.
            </summary>
            <returns>
            A string representation for the current object.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.PrecipitationParametersRecord.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the class to an XML writer.
            </summary>
            <param name="writer">
            The XML writer to serialize to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified XML writer is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.Simulation.ResidualElements">
            <summary>
            Models the weather residual elements for a given date.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ResidualElements.MaxTemp">
            <summary>
            Gets or sets the residual element for maximum temperature.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ResidualElements.MinTemp">
            <summary>
            Gets or sets the residual element for minimum temperature.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ResidualElements.SpeedOfMaxGust">
            <summary>
            Gets or sets the residual element for speed of maximum gust.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.ResidualElements.GetNextResidual(Simphony.Mathematics.Matrix,Simphony.Mathematics.Matrix)">
            <summary>
            Gets the next residual record using the weekly stationary generating process.
            </summary>
            <param name="matrixA">The A-coefficient matrix.</param>
            <param name="matrixB">The B-coefficient matrix.</param>
            <returns>The next residual record.</returns>
        </member>
        <member name="T:Simphony.Simulation.WeatherParameters">
            <summary>
            Contains the parameters for weather generation.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WeatherParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WeatherParameters"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherParameters.CoefficientsDry">
            <summary>
            Gets the polynomial coefficients for dry periodic weather data.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherParameters.CoefficientsWet">
            <summary>
            Gets the polynomial coefficients for wet periodic weather data.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherParameters.EndYear">
            <summary>
            Gets the end year of the historical data.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherParameters.MatrixA">
            <summary>
            Gets the A-coefficient matrix.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherParameters.MatrixB">
            <summary>
            Gets the B-coefficient matrix.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherParameters.PrecipitationParameters">
            <summary>
            Gets the collection of precipitation parameters.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherParameters.StartYear">
            <summary>
            Gets the start year of the historical data.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherParameters.StationID">
            <summary>
            Gets the station ID from which historical data was imported.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherParameters.StationName">
            <summary>
            Gets the name of the station from which historical data was imported.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WeatherParameters.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.WeatherParameters.FinalizeRun(System.Int32,System.DateTime)">
            <summary>
            Called following simulation of each run.
            </summary>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
            <param name="date">
            The final simulation date/time.
            </param>
        </member>
        <member name="M:Simphony.Simulation.WeatherParameters.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WeatherParameters.GetWeather(Simphony.Simulation.IDiscreteEventEngine)">
            <summary>
            Gets the weather info for the current date.
            </summary>
            <param name="engine">
            The simulation engine.
            </param>
            <returns>
            The weather info for the current date.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.WeatherParameters.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WeatherParameters.InitializeRun(System.Int32,System.DateTime)">
            <summary>
            Called prior to simulation of each run.
            </summary>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
            <param name="date">
            The initial simulation date/time.
            </param>
        </member>
        <member name="M:Simphony.Simulation.WeatherParameters.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WeatherParameters.ToString">
            <summary>
            Generates a string representation of the current object.
            </summary>
            <returns>
            A string representation for the current object.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.WeatherParameters.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WeatherParameters.Copy(Simphony.Simulation.WeatherParameters)">
            <summary>
            Copies the properties of another weather parameters.
            </summary>
            <param name="weather">The weather parameters to copy.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified weather parameters is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.WeatherParameters.SetDefaultValues">
            <summary>
            Resets the parameters to their default values.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.WeatherParametersEditor">
            <summary>
            Dialog editor for a set of weather parameters.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WeatherParametersEditor.#ctor(Simphony.Simulation.WeatherParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WeatherParametersEditor"/> class.
            </summary>
            <param name="weather">
            The weather parameters.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified weather parameters is a null reference.
            </exception>
        </member>
        <member name="F:Simphony.Simulation.WeatherParametersEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WeatherParametersEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Simulation.WeatherParametersEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.WeatherImporterForm">
            <summary>
            A form that imports weather information from an external source.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WeatherImporterForm.#ctor(Simphony.Simulation.WeatherParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WeatherImporterForm"/> class.
            </summary>
            <param name="weather">The weather parameters.</param>
        </member>
        <member name="P:Simphony.Simulation.WeatherImporterForm.EndYear">
            <summary>
            Gets the ending year from which data is imported.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherImporterForm.StartYear">
            <summary>
            Gets the starting year from which data is imported.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherImporterForm.Station">
            <summary>
            Gets the weather station of the imported data.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherImporterForm.Records">
            <summary>
            Gets the imported records.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WeatherImporterForm.CalculateCorrelationMatrices(Simphony.Mathematics.Matrix@,Simphony.Mathematics.Matrix@,System.Collections.Generic.Dictionary{System.DateTime,Simphony.Simulation.ResidualElements})">
            <summary>
            Calculates the cross-correlation coefficients among the residuals.
            </summary>
            <param name="lag0">The lag-0 covariance matrix.</param>
            <param name="lag1">The lag-1 covariance matrix.</param>
            <param name="residuals">The residual elements.</param>
        </member>
        <member name="M:Simphony.Simulation.WeatherImporterForm.GetCoefficientMatrices(Simphony.Mathematics.Matrix,Simphony.Mathematics.Matrix,Simphony.Mathematics.Matrix@,Simphony.Mathematics.Matrix@)">
            <summary>
            Get the matrices to ensure the generated residual series maintain the serial
            and cross-correlation characteristics of the historical series.
            </summary>
            <param name="lag0">The lag 0 covariance matrix.</param>
            <param name="lag1">The lag 1 covariance matrix.</param>
            <param name="matrixA">The A coefficient matrix.</param>
            <param name="matrixB">The B coefficient matrix.</param>
        </member>
        <member name="F:Simphony.Simulation.WeatherImporterForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WeatherImporterForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Simulation.WeatherImporterForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.WeatherRecord">
            <summary>
            Represents weather simulation information for a day.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WeatherRecord.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WeatherRecord"/> class.
            </summary>
            <param name="date">The date.</param>
        </member>
        <member name="P:Simphony.Simulation.WeatherRecord.Date">
            <summary>
            Gets or sets the date of the record.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherRecord.IsWetDay">
            <summary>
            Gets a value indicating whether it is a wet day.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherRecord.SpeedOfMaxGust">
            <summary>
            Gets or sets the speed of the maximum wind gust in kilometers per hour.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherRecord.TempMax">
            <summary>
            Gets or sets the maximum temperature in degrees centigrade.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherRecord.TempMin">
            <summary>
            Gets or sets the minimum temperature in degrees centigrade.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherRecord.TotalPrecipitation">
            <summary>
            Gets or sets the total precipitation in millimeters.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherRecord.ResidualElements">
            <summary>
            Gets the residual elements for this record.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WeatherRecord.GetInitialInstance(System.DateTime,Simphony.Simulation.WeatherParameters)">
            <summary>
            Gets the weather record for beginning simulation.
            </summary>
            <param name="date">The date.</param>
            <param name="weather">The weather parameters.</param>
            <returns>A new instance of the <see cref="T:Simphony.Simulation.WeatherRecord"/> class.</returns>
        </member>
        <member name="M:Simphony.Simulation.WeatherRecord.GetNextInstance(Simphony.Simulation.WeatherParameters)">
            <summary>
            Gets a new instance of the <see cref="T:Simphony.Simulation.WeatherRecord"/> from the current instance.
            </summary>
            <param name="weather">The weather parameters.</param>
            <returns>The next weather record.</returns>
        </member>
        <member name="T:Simphony.Simulation.WeatherRoundingConverter">
            <summary>
            Custom type converter to round doubles to 1 decimal places.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WeatherRoundingConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WeatherRoundingConverter"/> class.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.WeatherStation">
            <summary>
            Models a weather station from Environment Canada.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WeatherStation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WeatherStation"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WeatherStation.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WeatherStation"/> class.
            </summary>
            <param name="id">The ID.</param>
        </member>
        <member name="M:Simphony.Simulation.WeatherStation.#ctor(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WeatherStation"/> class.
            </summary>
            <param name="id">The ID.</param>
            <param name="name">The name.</param>
            <param name="earliest">The earliest year containing data.</param>
            <param name="latest">The latest year containing data.</param>
        </member>
        <member name="P:Simphony.Simulation.WeatherStation.KnownStations">
            <summary>
            Gets a list of the known weather stations.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherStation.YearMaximum">
            <summary>
            Gets the latest year that a station may have data.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherStation.YearMinimum">
            <summary>
            Gets the earliest year that a station may have data.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherStation.EarliestYear">
            <summary>
            Gets the earliest year for which the station has data.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherStation.ID">
            <summary>
            Gets the ID.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherStation.LatestYear">
            <summary>
            Gets the latest year for which the station has data.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherStation.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherStation.NameKnown">
            <summary>
            Gets a value indicating whether the name of the station is known.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.WeatherStation.Years">
            <summary>
            Gets the list of years that contain data.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WeatherStation.HasYear(System.Int32)">
            <summary>
            Determines whether a given year is a valid year.
            </summary>
            <param name="year">The year.</param>
            <returns>True if the year is valid; otherwise false.</returns>
        </member>
        <member name="M:Simphony.Simulation.WeatherStation.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.YearlyRecurrencePattern">
            <summary>
            Represents a recurrence pattern that occurs on a monthly basis.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.YearlyRecurrencePattern.#ctor(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.YearlyRecurrencePattern"/> class by end date.
            </summary>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="toDate">
            The last date on which the recurrence pattern is in effect.
            </param>
            <param name="month">
            The month on which occurrences fall.
            </param>
            <param name="monthDay">
            The day of the month on which occurrences fall.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified month is not between 1 and 12 or if the specified day of
            the month is not between 1 and the number of days in the specified month.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date is greater than the specified finish date.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.YearlyRecurrencePattern.#ctor(System.DateTime,System.DateTime,System.Int32,Simphony.Simulation.MonthPosition,Simphony.Simulation.MonthItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.YearlyRecurrencePattern"/> class by end date.
            </summary>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="toDate">
            The last date on which the recurrence pattern is in effect.
            </param>
            <param name="month">
            The month on which occurrences fall.
            </param>
            <param name="monthPosition">
            The position of the month item on which occurrences fall.
            </param>
            <param name="monthItem">
            The month item on which occurrences fall.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified months is not between 1 and 12.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date is greater than the specified finish date.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.YearlyRecurrencePattern.#ctor(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.YearlyRecurrencePattern"/> class by number of
            occurrences.
            </summary>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="occurrences">
            The number of occurrences.
            </param>
            <param name="month">
            The month on which occurrences fall.
            </param>
            <param name="monthDay">
            The day of the month on which occurrences fall.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of occurrences is not between 1 and 999; or if the specified
            month is not between 1 and 12; or if the specified day of the month is not between 1 and the
            number of days in the specified month.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.YearlyRecurrencePattern.#ctor(System.DateTime,System.Int32,System.Int32,Simphony.Simulation.MonthPosition,Simphony.Simulation.MonthItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.YearlyRecurrencePattern"/> class by number of
            occurrences.
            </summary>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="occurrences">
            The number of occurrences.
            </param>
            <param name="month">
            The month on which occurrences fall.
            </param>
            <param name="monthPosition">
            The position of the month item on which occurrences fall.
            </param>
            <param name="monthItem">
            The month item on which occurrences fall.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of occurrences is not between 1 and 999 or if the specified
            month is not between 1 and 12.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.YearlyRecurrencePattern.#ctor(System.Boolean,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.YearlyRecurrencePattern"/> class in
            preparation for deserialization.
            </summary>
            <param name="enteredByOccurences">
            A value indicating whether the recurrence pattern is defined by the number of
            occurrences or by the end date.
            </param>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="toDate">
            The last date on which the recurrence pattern is in effect.
            </param>
            <param name="occurrences">
            The number of occurrences.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date is greater than the specified finish date.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of occurrences is not between 1 and 999.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.YearlyRecurrencePattern.Month">
            <summary>
            Gets the month on which occurrences fall.
            </summary>
            <value>
            The month on which occurrences fall.
            </value>
        </member>
        <member name="P:Simphony.Simulation.YearlyRecurrencePattern.MonthDay">
            <summary>
            Gets the day of the month on which occurrences fall.
            </summary>
            <value>
            The day of the month on which occurrences fall.
            </value>
        </member>
        <member name="P:Simphony.Simulation.YearlyRecurrencePattern.MonthItem">
            <summary>
            Gets the month item on which occurrences fall.
            </summary>
            <value>
            The month item on which occurrences fall.
            </value>
        </member>
        <member name="P:Simphony.Simulation.YearlyRecurrencePattern.MonthPosition">
            <summary>
            Gets the position of the month item on which occurrences fall.
            </summary>
            <value>
            The position of the month item on which occurrences fall.
            </value>
        </member>
        <member name="P:Simphony.Simulation.YearlyRecurrencePattern.Type">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.YearlyRecurrencePattern.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.YearlyRecurrencePattern.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.YearlyRecurrencePattern.GetFirstDate">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.YearlyRecurrencePattern.GetNextDate(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.YearlyRecurrencePattern.GetDateInYear(System.Int32)">
            <summary>
            Determines the date on which the occurrence falls in a specified year.
            </summary>
            <param name="year">
            The year.
            </param>
            <returns>
            The date on which the occurrence falls in the specified year.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.YearlyRecurrencePattern.IsMonthItem(System.DateTime)">
            <summary>
            Determines whether a specified date corresponds to the month item the recurrence
            pattern is defined for.
            </summary>
            <param name="date">
            The date.
            </param>
            <returns>
            True if the specified date corresponds to the month item the recurrence pattern is
            defined for; otherwise false.
            </returns>
        </member>
        <member name="T:Simphony.Simulation.MonthlyRecurrencePattern">
            <summary>
            Represents a recurrence pattern that occurs on a monthly basis.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.MonthlyRecurrencePattern.#ctor(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.MonthlyRecurrencePattern"/> class by end date.
            </summary>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="toDate">
            The last date on which the recurrence pattern is in effect.
            </param>
            <param name="period">
            The number of months between recurrences.
            </param>
            <param name="monthDay">
            The day of the month on which occurrences fall.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of months between recurrences is not between 1 and 999
            or if the specified day of the month is not between 1 and 31.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date is greater than the specified finish date.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.MonthlyRecurrencePattern.#ctor(System.DateTime,System.DateTime,System.Int32,Simphony.Simulation.MonthPosition,Simphony.Simulation.MonthItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.MonthlyRecurrencePattern"/> class by end date.
            </summary>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="toDate">
            The last date on which the recurrence pattern is in effect.
            </param>
            <param name="period">
            The number of months between recurrences.
            </param>
            <param name="monthPosition">
            The position of the month item on which occurrences fall.
            </param>
            <param name="monthItem">
            The month item on which occurrences fall.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of months between recurrences is not between 1 and 999.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date is greater than the specified finish date.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.MonthlyRecurrencePattern.#ctor(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.MonthlyRecurrencePattern"/> class by number of
            occurrences.
            </summary>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="occurrences">
            The number of occurrences.
            </param>
            <param name="period">
            The number of months between occurrences.
            </param>
            <param name="monthDay">
            The day of the month on which occurrences fall.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of occurrences or the specified number of months between
            occurrences is not between 1 and 999; or if the specified day of the month is not
            between 1 and 31.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.MonthlyRecurrencePattern.#ctor(System.DateTime,System.Int32,System.Int32,Simphony.Simulation.MonthPosition,Simphony.Simulation.MonthItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.MonthlyRecurrencePattern"/> class by number of
            occurrences.
            </summary>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="occurrences">
            The number of occurrences.
            </param>
            <param name="period">
            The number of months between occurrences.
            </param>
            <param name="monthPosition">
            The position of the month item on which occurrences fall.
            </param>
            <param name="monthItem">
            The month item on which occurrences fall.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of occurrences or the specified number of months between
            occurrences is not between 1 and 999.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.MonthlyRecurrencePattern.#ctor(System.Boolean,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.MonthlyRecurrencePattern"/> class in
            preparation for deserialization.
            </summary>
            <param name="enteredByOccurences">
            A value indicating whether the recurrence pattern is defined by the number of
            occurrences or by the end date.
            </param>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="toDate">
            The last date on which the recurrence pattern is in effect.
            </param>
            <param name="occurrences">
            The number of occurrences.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date is greater than the specified finish date.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of occurrences is not between 1 and 999.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.MonthlyRecurrencePattern.MonthDay">
            <summary>
            Gets the day of the month on which occurrences fall.
            </summary>
            <value>
            The day of the month on which occurrences fall.
            </value>
        </member>
        <member name="P:Simphony.Simulation.MonthlyRecurrencePattern.MonthItem">
            <summary>
            Gets the month item on which occurrences fall.
            </summary>
            <value>
            The month item on which occurrences fall.
            </value>
        </member>
        <member name="P:Simphony.Simulation.MonthlyRecurrencePattern.MonthPosition">
            <summary>
            Gets the position of the month item on which occurrences fall.
            </summary>
            <value>
            The position of the month item on which occurrences fall.
            </value>
        </member>
        <member name="P:Simphony.Simulation.MonthlyRecurrencePattern.Period">
            <summary>
            Gets the number of months between occurrences.
            </summary>
            <value>
            The number of months between occurrences.
            </value>
        </member>
        <member name="P:Simphony.Simulation.MonthlyRecurrencePattern.Type">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.MonthlyRecurrencePattern.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.MonthlyRecurrencePattern.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.MonthlyRecurrencePattern.GetFirstDate">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.MonthlyRecurrencePattern.GetNextDate(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.MonthlyRecurrencePattern.GetDateInMonth(System.Int32,System.Int32)">
            <summary>
            Determines the date on which the occurrence falls in a specified month.
            </summary>
            <param name="year">
            The year.
            </param>
            <param name="month">
            The month.
            </param>
            <returns>
            The date on which the occurrence falls in the specified month.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.MonthlyRecurrencePattern.IsMonthItem(System.DateTime)">
            <summary>
            Determines whether a specified date corresponds to the month item the recurrence
            pattern is defined for.
            </summary>
            <param name="date">
            The date.
            </param>
            <returns>
            True if the specified date corresponds to the month item the recurrence pattern is
            defined for; otherwise false.
            </returns>
        </member>
        <member name="T:Simphony.Simulation.WeeklyRecurrencePattern">
            <summary>
            Represents a recurrence pattern that occurs on a weekly basis.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WeeklyRecurrencePattern.#ctor(System.DateTime,System.DateTime,System.Int32,Simphony.Simulation.DaysOfWeekFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WeeklyRecurrencePattern"/> class by end date.
            </summary>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="toDate">
            The last date on which the recurrence pattern is in effect.
            </param>
            <param name="period">
            The number of weeks between recurrences.
            </param>
            <param name="daysOfWeek">
            The days of the week on which occurrences fall.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of weeks between recurrences is not between 1 and 999.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date is greater than the specified finish date or if no
            days of the week have been specified.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.WeeklyRecurrencePattern.#ctor(System.DateTime,System.Int32,System.Int32,Simphony.Simulation.DaysOfWeekFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WeeklyRecurrencePattern"/> class by number of
            occurrences.
            </summary>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="occurrences">
            The number of occurrences.
            </param>
            <param name="period">
            The number of weeks between occurrences.
            </param>
            <param name="daysOfWeek">
            The days of the week on which occurrences fall.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of occurrences or the specified number of weeks between
            occurrences is not between 1 and 999.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if no days of the week have been specified.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.WeeklyRecurrencePattern.#ctor(System.Boolean,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WeeklyRecurrencePattern"/> class in
            preparation for deserialization.
            </summary>
            <param name="enteredByOccurences">
            A value indicating whether the recurrence pattern is defined by the number of
            occurrences or by the end date.
            </param>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="toDate">
            The last date on which the recurrence pattern is in effect.
            </param>
            <param name="occurrences">
            The number of occurrences.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date is greater than the specified finish date.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of occurrences is not between 1 and 999.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.WeeklyRecurrencePattern.DaysOfWeek">
            <summary>
            Gets the days of the week on which occurrences fall.
            </summary>
            <value>
            The days of the week on which occurrences fall.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WeeklyRecurrencePattern.Period">
            <summary>
            Gets the number of weeks between occurrences.
            </summary>
            <value>
            The number of weeks between occurrences.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WeeklyRecurrencePattern.Type">
            <summary>
            Gets the type of recurrence pattern.
            </summary>
            <value>
            The type of recurrence pattern.
            </value>
        </member>
        <member name="M:Simphony.Simulation.WeeklyRecurrencePattern.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the class from an XML reader.
            </summary>
            <param name="reader">
            The XML reader to deserialize from.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified XML reader is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.WeeklyRecurrencePattern.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the class to an XML writer.
            </summary>
            <param name="writer">
            The XML writer to serialize to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified XML writer
            is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.WeeklyRecurrencePattern.GetFirstDate">
            <summary>
            Gets the date of the first occurrence.
            </summary>
            <returns>
            The date of the first occurrence.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.WeeklyRecurrencePattern.GetNextDate(System.DateTime)">
            <summary>
            Gets the date of the occurrence following a specified one.
            </summary>
            <param name="date">
            The date of an occurrence.
            </param>
            <returns>
            The date of the occurrence following the specified one.
            </returns>
        </member>
        <member name="T:Simphony.Simulation.DailyRecurrencePattern">
            <summary>
            Represents a recurrence pattern that occurs on a daily basis.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DailyRecurrencePattern.#ctor(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.DailyRecurrencePattern"/> class by end date.
            </summary>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="toDate">
            The last date on which the recurrence pattern is in effect.
            </param>
            <param name="period">
            The number of days between recurrences.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of days between recurrences is not between 1 and 999.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date is greater than the specified finish date.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.DailyRecurrencePattern.#ctor(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.DailyRecurrencePattern"/> class by number of
            occurrences.
            </summary>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="occurrences">
            The number of occurrences.
            </param>
            <param name="period">
            The number of days between occurrences.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of occurrences or the specified number of days between
            occurrences is not between 1 and 999.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.DailyRecurrencePattern.#ctor(System.Boolean,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.DailyRecurrencePattern"/> class in
            preparation for deserialization.
            </summary>
            <param name="enteredByOccurences">
            A value indicating whether the recurrence pattern is defined by the number of
            occurrences or by the end date.
            </param>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="toDate">
            The last date on which the recurrence pattern is in effect.
            </param>
            <param name="occurrences">
            The number of occurrences.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date is greater than the specified finish date.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of occurrences is not between 1 and 999.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.DailyRecurrencePattern.Period">
            <summary>
            Gets the number of days between occurrences.
            </summary>
            <value>
            The number of days between occurrences.
            </value>
        </member>
        <member name="P:Simphony.Simulation.DailyRecurrencePattern.Type">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DailyRecurrencePattern.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DailyRecurrencePattern.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DailyRecurrencePattern.GetFirstDate">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DailyRecurrencePattern.GetNextDate(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.ExceptionDay">
            <summary>
            Defines an exceptional day for a calendar.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.ExceptionDay"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ExceptionDay.Calendar">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.ExceptionDay.FromDate">
            <summary>
            Gets or sets the first date on which the recurrence pattern is in effect.
            </summary>
            <value>
            The first date on which the recurrence pattern is in effect.
            </value>
        </member>
        <member name="P:Simphony.Simulation.ExceptionDay.Index">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.ExceptionDay.IsExceptional">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.ExceptionDay.IsNonWorking">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.ExceptionDay.Simphony#Simulation#IWorkDay#WorkingTimes">
            <summary>
            Gets a collection containing the working times for the work day.
            </summary>
            <value>
            A collection containing the working times for the work day.
            </value>
        </member>
        <member name="P:Simphony.Simulation.ExceptionDay.Name">
            <summary>
            Gets or sets the name of the work week.
            </summary>
            <value>
            The name of the work week.
            </value>
        </member>
        <member name="P:Simphony.Simulation.ExceptionDay.Parent">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.ExceptionDay.RecurrencePattern">
            <summary>
            Gets or sets the recurrence pattern defining the exceptional day.
            </summary>
            <value>
            The recurrence pattern defining the exceptional day.
            </value>
        </member>
        <member name="P:Simphony.Simulation.ExceptionDay.ToDate">
            <summary>
            Gets or sets the last date on which the recurrence pattern is in effect.
            </summary>
            <value>
            The last date on which the recurrence pattern is in effect.
            </value>
        </member>
        <member name="P:Simphony.Simulation.ExceptionDay.TotalWorkingTime">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.ExceptionDay.WorkingTimes">
            <summary>
            Gets a collection containing the working times for the exceptional day.
            </summary>
            <value>
            A collection containing the working times for the exceptional day.
            </value>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDay.Clone">
            <summary>
            Creates a deep copy of the current exceptional day.
            </summary>
            <returns>
            A deep copy of the current exceptional day.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDay.CompareTo(Simphony.Simulation.ExceptionDay)">
            <summary>
            Compares the current exceptional day with another exceptional day.
            </summary>
            <param name="that">
            An exceptional day to compare with the current exceptional day.
            </param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the exceptional days being compared.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDay.ContainsDate(System.DateTime)">
            <summary>
            Returns a value indicating whether the exception applies to a specified date/time.
            </summary>
            <param name="date">
            The date/time.
            </param>
            <returns>
            True if the exception applies to the specified date/time; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDay.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDay.GetTimeRemaining(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDay.GetWorkingTime(System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDay.GetWorkingTime(System.TimeSpan,System.TimeSpan,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDay.GetWorkingTime(System.TimeSpan,System.TimeSpan,System.Int32,Simphony.Simulation.PayType)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDay.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDay.IsWorking(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDay.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDay.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDay.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDay.GetWorkingTime(System.TimeSpan,System.TimeSpan,System.Func{Simphony.Simulation.WorkingTime,System.Boolean})">
            <summary>
            Gets the amount of working time between two times.
            </summary>
            <param name="fromTime">
            The start time.
            </param>
            <param name="toTime">
            The end time.
            </param>
            <param name="predicate">
            A predicate that specifies which work times to consider.
            </param>
            <returns>
            The amount of working time between the two times.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start time is greater than the specified end time.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified predicate is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.Simulation.IWorkDay">
            <summary>
            Interface implements by work days for a calendar.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.IWorkDay.Calendar">
            <summary>
            Gets the calendar the work day belongs to.
            </summary>
            <value>
            The calendar the work day belongs to.
            </value>
        </member>
        <member name="P:Simphony.Simulation.IWorkDay.IsExceptional">
            <summary>
            Gets a value indicating whether the work day is an exceptional day.
            </summary>
            <value>
            True if the work day is an exceptional day; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Simulation.IWorkDay.IsNonWorking">
            <summary>
            Gets a value indicating whether the work day is a nonworking day.
            </summary>
            <value>
            True if the work day is a nonworking day; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Simulation.IWorkDay.TotalWorkingTime">
            <summary>
            Gets the total working time for the day.
            </summary>
            <value>
            The total working time for the day.
            </value>
        </member>
        <member name="P:Simphony.Simulation.IWorkDay.WorkingTimes">
            <summary>
            Gets a collection containing the working times for the work day.
            </summary>
            <value>
            A collection containing the working times for the work day.
            </value>
        </member>
        <member name="M:Simphony.Simulation.IWorkDay.GetTimeRemaining(System.TimeSpan)">
            <summary>
            Returns the amount of time remaining in the work/non-work period a specified time
            belongs to.
            </summary>
            <param name="time">
            The date/time.
            </param>
            <returns>
            The amount of time remaining in the work/non-work period the specified time to
            or 24 hours, whichever is smaller.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.IWorkDay.GetWorkingTime(System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets the amount of working time between two times.
            </summary>
            <param name="fromTime">
            The start time.
            </param>
            <param name="toTime">
            The end time.
            </param>
            <returns>
            The amount of working time between the two times.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start time is greater than the specified end time.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IWorkDay.GetWorkingTime(System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
            Gets the amount of working time between two times for a particular shift.
            </summary>
            <param name="fromTime">
            The start time.
            </param>
            <param name="toTime">
            The end time.
            </param>
            <param name="shift">
            The shift.
            </param>
            <returns>
            The amount of working time between the two times for the specified shift.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start time is greater than the specified end time.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified shift is not one of 1, 2, or 3.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IWorkDay.GetWorkingTime(System.TimeSpan,System.TimeSpan,System.Int32,Simphony.Simulation.PayType)">
            <summary>
            Gets the amount of working time between two times for a particular shift and pay type.
            </summary>
            <param name="fromTime">
            The start time.
            </param>
            <param name="toTime">
            The end time.
            </param>
            <param name="shift">
            The shift.
            </param>
            <param name="payType">
            The pay type.
            </param>
            <returns>
            The amount of working time between the two times for the specified shift and pay type.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start time is greater than the specified end time.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified shift is not one of 1, 2, or 3.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IWorkDay.IsWorking(System.TimeSpan)">
            <summary>
            Returns a value indicating whether a given time is in a work period.
            </summary>
            <param name="time">
            The time.
            </param>
            <returns>
            True if the time is in a work period; otherwise false.
            </returns>
        </member>
        <member name="T:Simphony.Simulation.MonthPosition">
            <summary>
            The position of a month item within a month.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.MonthPosition.First">
            <summary>
            First position.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.MonthPosition.Second">
            <summary>
            Second position.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.MonthPosition.Third">
            <summary>
            Third position.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.MonthPosition.Fourth">
            <summary>
            Fourth position.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.MonthPosition.Last">
            <summary>
            Last position.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.DaysOfWeekFlags">
            <summary>
            Specifies the day or days of the week on which an exceptional day occurs.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.DaysOfWeekFlags.Sunday">
            <summary>
            The exception occurs on Sundays.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.DaysOfWeekFlags.Monday">
            <summary>
            The exception occurs on Mondays.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.DaysOfWeekFlags.Tuesday">
            <summary>
            The exception occurs on Tuesdays.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.DaysOfWeekFlags.Wednesday">
            <summary>
            The exception occurs on Wednesdays.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.DaysOfWeekFlags.Thursday">
            <summary>
            The exception occurs on Thursdays.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.DaysOfWeekFlags.Friday">
            <summary>
            The exception occurs on Fridays.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.DaysOfWeekFlags.Saturday">
            <summary>
            The exception occurs on Saturdays.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.MonthItem">
            <summary>
            The month item for which a recurrence is scheduled.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.MonthItem.Day">
            <summary>
            Recurrences occur on a particular day of the month.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.MonthItem.Weekday">
            <summary>
            Recurrences occur on a particular weekday of the month.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.MonthItem.WeekendDay">
            <summary>
            Recurrences occur on a particular weekend day of the month.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.MonthItem.Sunday">
            <summary>
            Recurrences occur on a particular Sunday of the month.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.MonthItem.Monday">
            <summary>
            Recurrences occur on a particular Monday of the month.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.MonthItem.Tuesday">
            <summary>
            Recurrences occur on a particular Tuesday of the month.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.MonthItem.Wednesday">
            <summary>
            Recurrences occur on a particular Wednesday of the month.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.MonthItem.Thursday">
            <summary>
            Recurrences occur on a particular Thursday of the month.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.MonthItem.Friday">
            <summary>
            Recurrences occur on a particular Friday of the month.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.MonthItem.Saturday">
            <summary>
            Recurrences occur on a particular Saturday of the month.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.DefaultCalendar">
            <summary>
            An enumeration defining the three default calendars.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.DefaultCalendar.Standard">
            <summary>
            The Standard calendar.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.DefaultCalendar.TwentyFourHours">
            <summary>
            The 24 Hours calendar.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.DefaultCalendar.NightShift">
            <summary>
            The Night Shift calendar.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.Calendar">
            <summary>
            Defines a calendar.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.Calendar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.Calendar"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.Calendar.#ctor(Simphony.Simulation.DefaultCalendar)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.Calendar"/> class that is one of the three
            default calendars.
            </summary>
            <param name="defaultCalendar">
            The type of default calendar.
            </param>
        </member>
        <member name="P:Simphony.Simulation.Calendar.DefaultWorkWeek">
            <summary>
            Gets the default work week for the current calendar.
            </summary>
            <value>
            The default work week for the current calendar.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Calendar.ExceptionDays">
            <summary>
            Gets a collection containing the exceptional days associated with the current calendar.
            </summary>
            <value>
            A collection containing the exceptional days associated with the current calendar.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Calendar.WorkWeeks">
            <summary>
            Gets a collection containing the work weeks associated with the current calendar.
            </summary>
            <value>
            A collection containing the work weeks associated with the current calendar.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Calendar.NonDefaultWorkWeeks">
            <summary>
            Gets a sequence containing all the work weeks associated with the current calendar
            except the default work week.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.Calendar.AddWorkingTime(System.DateTime,System.TimeSpan,System.Boolean)">
            <summary>
            Adds a specified amount of working time to a specified date.
            </summary>
            <param name="date">
            A date.
            </param>
            <param name="time">
            The amount of working time to add to the date.
            </param>
            <param name="conservative">
            True if the calculation should be conservative (i.e. if the result falls at the end of a
            shift, then the return value is time that shift ended); false if the calculation should
            be generous (i.e. if the result falls at the end of a shift, then the return value is the
            time that the next shift starts). The default is true.
            </param>
            <returns>
            A date that is the specified date plus the specified working time.
            </returns>
            <remarks>
            This method accepts negative time spans (in which case working time will be subtracted
            from the specified date).
            </remarks>
        </member>
        <member name="M:Simphony.Simulation.Calendar.Clone">
            <summary>
            Creates a deep copy of the current calendar.
            </summary>
            <returns>
            A deep copy of the current calendar.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.Calendar.GetExceptionalDay(System.DateTime)">
            <summary>
            Gets the exceptional day that applies to a given date/time.
            </summary>
            <param name="date">
            The date/time.
            </param>
            <returns>
            The exceptional day that applies to the date/time; or a null reference if no
            exceptional day applies.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.Calendar.GetNonWorkingTime(System.DateTime,System.DateTime)">
            <summary>
            Gets the amount of non-working time between two date/times.
            </summary>
            <param name="fromDate">
            The start date/time.
            </param>
            <param name="toDate">
            The end date/time.
            </param>
            <returns>
            The amount of non-working time between the two date/times.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date/time is greater than the specified end date/time.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Calendar.GetWorkDay(System.DateTime)">
            <summary>
            Gets the work day corresponding to a given date/time.
            </summary>
            <param name="date">
            The date/time.
            </param>
            <returns>
            The  work day corresponding to the date/time.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.Calendar.GetWorkingDays(System.DateTime,System.DateTime)">
            <summary>
            Gets the number of working days between two date/times.
            </summary>
            <param name="fromDate">
            The start date/time.
            </param>
            <param name="toDate">
            The end date/time.
            </param>
            <returns>
            The number of working days between the two date/times.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date/time is greater than the specified end date/time.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Calendar.GetWorkingTime(System.DateTime,System.DateTime)">
            <summary>
            Gets the amount of working time between two date/times.
            </summary>
            <param name="fromDate">
            The start date/time.
            </param>
            <param name="toDate">
            The end date/time.
            </param>
            <returns>
            The amount of working time between the two date/times.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date/time is greater than the specified end date/time.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Calendar.GetWorkingTime(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Gets the amount of working time between two date/times for a particular shift.
            </summary>
            <param name="fromDate">
            The start date/time.
            </param>
            <param name="toDate">
            The end date/time.
            </param>
            <param name="shift">
            The shift.
            </param>
            <returns>
            The amount of working time between the two date/times for the specified shift.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date/time is greater than the specified end date/time.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified shift is not one of 1, 2, or 3.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Calendar.GetWorkingTime(System.DateTime,System.DateTime,System.Int32,Simphony.Simulation.PayType)">
            <summary>
            Gets the amount of working time between two date/times for a particular shift and pay type.
            </summary>
            <param name="fromDate">
            The start date/time.
            </param>
            <param name="toDate">
            The end date/time.
            </param>
            <param name="shift">
            The shift.
            </param>
            <param name="payType">
            The pay type.
            </param>
            <returns>
            The amount of working time between the two date/times for the specified shift and pay type.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date/time is greater than the specified end date/time.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified shift is not one of 1, 2, or 3.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Calendar.GetWorkWeek(System.DateTime)">
            <summary>
            Gets the work week in effect for a given date/time.
            </summary>
            <param name="date">
            The date/time.
            </param>
            <returns>
            The work week in effect for the date/time.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.Calendar.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.Calendar.IsWorking(System.DateTime)">
            <summary>
            Returns a value indicating whether a given date/time is in a work period.
            </summary>
            <param name="date">
            The date/time.
            </param>
            <returns>
            True if the date/time is in a work period; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.Calendar.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the class from an XML reader.
            </summary>
            <param name="reader">
            The XML reader to deserialize from.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified XML reader is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Calendar.SubtractWorkingTime(System.DateTime,System.TimeSpan,System.Boolean)">
            <summary>
            Subtracts a specified amount of working time from a specified date.
            </summary>
            <param name="date">
            A date.
            </param>
            <param name="time">
            The amount of working time to subtract from the date.
            </param>
            <param name="conservative">
            True if the calculation should be conservative (i.e. if the result falls at the start of a
            shift, then the return value is time that shift started); false if the calculation should
            be generous (i.e. if the result falls at the start of a shift, then the return value is the
            time that the previous shift ends). The default is true.
            </param>
            <returns>
            A date that is the specified date less the specified working time.
            </returns>
            <remarks>
            This method accepts negative time spans (in which case working time will be added to the
            specified date).
            </remarks>
        </member>
        <member name="M:Simphony.Simulation.Calendar.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the class to an XML writer.
            </summary>
            <param name="writer">
            The XML writer to serialize to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified XML writer is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Calendar.CalendarEvent``1(``0)">
            <summary>
            Event handler for events associated with a calendar.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="entity">
            The entity associated with the event.
            </param>
        </member>
        <member name="M:Simphony.Simulation.Calendar.GetDefaultCalendarName(Simphony.Simulation.DefaultCalendar)">
            <summary>
            Gets the name of a default calendar.
            </summary>
            <param name="defaultCalendar">
            The type of default the calendar.
            </param>
            <returns>
            The name of the default calendar.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.Calendar.GetDefaultCalendarTimes(System.DayOfWeek)">
            <summary>
            Gets a sequence containing the default work times for the standard default calendar
            on a specified day.
            </summary>
            <param name="dayOfWeek">
            The day of the week.
            </param>
            <returns>
            A sequence containing the default work times for the standard default calendar on
            the specified day.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.Calendar.GetDefaultCalendarTimes(Simphony.Simulation.DefaultCalendar,System.DayOfWeek)">
            <summary>
            Gets a sequence containing the default work times for a default calendar
            on a specified day.
            </summary>
            <param name="defaultCalendar">
            The type of default the calendar.
            </param>
            <param name="dayOfWeek">
            The day of the week.
            </param>
            <returns>
            A sequence containing the default work times for the default calendar on
            the specified day.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.Calendar.OnModified">
            <summary>
            Called after the calendar has been modified.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.CalendarEditor">
            <summary>
            Dialog editor for a CalendarCollection.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CalendarEditor.#ctor(Simphony.Simulation.CalendarList)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.CalendarEditor"/> class.
            </summary>
            <param name="calendars">
            A list of calendars to be edited.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified list of calendars is a null reference.
            </exception>
        </member>
        <member name="F:Simphony.Simulation.CalendarEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CalendarEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Simulation.CalendarEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.CalendarList">
            <summary>
            A collection class for calendars.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CalendarList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.CalendarList"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CalendarList.NightShift">
            <summary>
            Gets the night shift calendar.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CalendarList.Standard">
            <summary>
            Gets the standard calendar.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.CalendarList.TwentyFourHours">
            <summary>
            Gets the 24 hour calendar.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CalendarList.Clone">
            <summary>
            Creates a deep copy of the current list.
            </summary>
            <returns>
            A deep copy of the current list.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.CalendarList.GetCalendarId(Simphony.Simulation.Calendar)">
            <summary>
            Gets the UID of the specified calendar.
            </summary>
            <param name="calendar">
            The calendar.
            </param>
            <returns>
            The UID of the calendar.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified calendar is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified calendar is not contained in the list.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.CalendarList.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.CalendarList.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.CalendarList.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.CalendarList.Reset">
            <summary>
            Removes all calendars from the collection, and restores the initial default calendars.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CalendarList.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.CalendarList.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.CreateCalendarDialog">
            <summary>
            A dialog box for creating a new calendar.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CreateCalendarDialog.#ctor(Simphony.Simulation.CalendarList,Simphony.Simulation.Calendar)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.CreateCalendarDialog"/> class.
            </summary>
            <param name="calendars">
            A list of calendars to which a new calendar should be added.
            </param>
            <param name="initialItem">
            The calendar that should be initially selected in the combobox.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified list of calendars or the initial item is a null reference.
            </exception>
        </member>
        <member name="F:Simphony.Simulation.CreateCalendarDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CreateCalendarDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Simulation.CreateCalendarDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.ExceptionDayEditor">
            <summary>
            Dialog editor for an exceptional day.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDayEditor.#ctor(Simphony.Simulation.ExceptionDay)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.ExceptionDayEditor"/> class.
            </summary>
            <param name="exceptionDay">
            The exceptional day to be edited.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified exceptional day is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDayEditor.GetRecurrencePattern">
            <summary>
            Gets the recurrence pattern currently defined by the controls.
            </summary>
            <returns>
            The recurrence pattern currently defined by the controls.
            </returns>
        </member>
        <member name="F:Simphony.Simulation.ExceptionDayEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDayEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Simulation.ExceptionDayEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.RecurrenceType">
            <summary>
            Represents the calendar exception type.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.RecurrenceType.Daily">
            <summary>
            The recurrence occurs daily.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.RecurrenceType.YearlyByDayOfMonth">
            <summary>
            The recurrence occurs yearly by day of the month.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.RecurrenceType.YearlyByPosition">
            <summary>
            The recurrence occurs yearly by position.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.RecurrenceType.MonthlyByDayOfMonth">
            <summary>
            The recurrence occurs monthly by day of the month.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.RecurrenceType.MonthlyByPosition">
            <summary>
            The recurrence occurs monthly by position.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.RecurrenceType.Weekly">
            <summary>
            The recurrence occurs weekly.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.RecurrenceType.ByDayCount">
            <summary>
            The recurrence occurs by day count.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.RecurrenceType.ByWeekdayCount">
            <summary>
            The recurrence occurs by weekday count.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.RecurrencePattern">
            <summary>
            Abstract base class for recurrence patterns.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.RecurrencePattern.#ctor(System.Boolean,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.RecurrencePattern"/> class in preparation for
            deserialization.
            </summary>
            <param name="enteredByOccurences">
            A value indicating whether the recurrence pattern is defined by the number of
            occurrences or by the end date.
            </param>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="toDate">
            The last date on which the recurrence pattern is in effect.
            </param>
            <param name="occurrences">
            The number of occurrences.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date is greater than the specified finish date.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of occurrences is not between 1 and 999.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.RecurrencePattern.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.RecurrencePattern"/> class by end date.
            </summary>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="toDate">
            The last date on which the recurrence pattern is in effect.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start date is greater than the specified finish date.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.RecurrencePattern.#ctor(System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.RecurrencePattern"/> class by number of
            occurrences.
            </summary>
            <param name="fromDate">
            The first date on which the recurrence pattern is in effect.
            </param>
            <param name="occurrences">
            The number of occurrences.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of occurrences is not between 1 and 999.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.RecurrencePattern.Dates">
            <summary>
            Gets a read-only list containing the dates for the current recurrence pattern.
            </summary>
            <value>
            A read-only list containing the dates for the current recurrence pattern.
            </value>
        </member>
        <member name="P:Simphony.Simulation.RecurrencePattern.FromDate">
            <summary>
            Gets or sets the first date on which the recurrence pattern is in effect.
            </summary>
            <value>
            The first date on which the recurrence pattern is in effect.
            </value>
        </member>
        <member name="P:Simphony.Simulation.RecurrencePattern.Occurrences">
            <summary>
            Gets the number of occurrences in the recurrence pattern.
            </summary>
            <value>
            The number of occurrence in the recurrence pattern.
            </value>
        </member>
        <member name="P:Simphony.Simulation.RecurrencePattern.ToDate">
            <summary>
            Gets or sets the last date on which the recurrence pattern is in effect.
            </summary>
            <value>
            The last date on which the recurrence pattern is in effect.
            </value>
        </member>
        <member name="P:Simphony.Simulation.RecurrencePattern.Type">
            <summary>
            Gets the type of recurrence pattern.
            </summary>
            <value>
            The type of recurrence pattern.
            </value>
        </member>
        <member name="M:Simphony.Simulation.RecurrencePattern.Clone">
            <summary>
            Creates a deep copy of the current recurrence pattern.
            </summary>
            <returns>
            A deep copy of the current recurrence pattern.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.RecurrencePattern.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.RecurrencePattern.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.RecurrencePattern.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.RecurrencePattern.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.RecurrencePattern.GetFirstDate">
            <summary>
            Gets the date of the first occurrence.
            </summary>
            <returns>
            The date of the first occurrence.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.RecurrencePattern.GetNextDate(System.DateTime)">
            <summary>
            Gets the date of the occurrence following a specified one.
            </summary>
            <param name="date">
            The date of an occurrence.
            </param>
            <returns>
            The date of the occurrence following the specified one.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.RecurrencePattern.GetDates">
            <summary>
            Gets a sequence containing the dates defined by the recurrence pattern.
            </summary>
            <returns>
            A sequence containing the dates defined by the recurrence pattern.
            </returns>
        </member>
        <member name="T:Simphony.Simulation.TimeUnit">
            <summary>
            An enumeration defining the different time units for simulation.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.TimeUnit.Day">
            <summary>
            Time is measured in days.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.TimeUnit.Hour">
            <summary>
            Time is measured in hours.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.TimeUnit.Minute">
            <summary>
            Time is measured in minutes.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.TimeUnit.Second">
            <summary>
            Time is measured in seconds.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.TimeUnit.Week">
            <summary>
            Time is measured in weeks.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.WeekDay">
            <summary>
            Defines a week day for a work week.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WeekDay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WeekDay"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WeekDay.#ctor(System.DayOfWeek)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WeekDay"/> class with default working times.
            </summary>
            <param name="dayOfWeek">
            The day of the week the new instance will represent.
            </param>
        </member>
        <member name="M:Simphony.Simulation.WeekDay.#ctor(System.DayOfWeek,System.Collections.Generic.IEnumerable{Simphony.Simulation.WorkingTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WeekDay"/> class with particular working
            times.
            </summary>
            <param name="dayOfWeek">
            The day of the week the new instance will represent.
            </param>
            <param name="workingTimes">
            A sequence of working times with which to initialize the week day.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence of working times is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.WeekDay.Calendar">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.WeekDay.CollapsedWorkingTimes">
            <summary>
            Gets a collection containing the collapsed working times for the week day.
            </summary>
            <value>
            A collection containing the collapsed working times for the week day.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WeekDay.DayOfWeek">
            <summary>
            Gets the day of the week the week day represents.
            </summary>
            <value>
            The day of the week the week day represents.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WeekDay.Index">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.WeekDay.IsDefault">
            <summary>
            Gets or sets a value indicating whether the week day has the default working hours.
            </summary>
            <value>
            True if the week day has the default working hours; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WeekDay.IsExceptional">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.WeekDay.IsNonWorking">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.WeekDay.Simphony#Simulation#IWorkDay#WorkingTimes">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.WeekDay.Parent">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.WeekDay.TotalWorkingTime">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.WeekDay.WorkingTimes">
            <summary>
            Gets a collection containing the working times for the week day.
            </summary>
            <value>
            A collection containing the working times for the week day.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WeekDay.WorkWeek">
            <summary>
            Gets the work week the week day belongs to.
            </summary>
            <value>
            The work week the week day belongs to.
            </value>
        </member>
        <member name="M:Simphony.Simulation.WeekDay.Clone">
            <summary>
            Creates a deep copy of the current week day.
            </summary>
            <returns>
            A deep copy of the current week day.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.WeekDay.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WeekDay.GetTimeRemaining(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WeekDay.GetWorkingTime(System.Int32)">
            <summary>
            Gets the amount of working time for a particular shift over a twenty-four hour period.
            </summary>
            <param name="shift">
            The shift.
            </param>
            <returns>
            The amount of working time for the specified shift over a twenty-four hour period.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified shift is not one of 1, 2, or 3.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.WeekDay.GetWorkingTime(System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WeekDay.GetWorkingTime(System.TimeSpan,System.TimeSpan,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WeekDay.GetWorkingTime(System.TimeSpan,System.TimeSpan,System.Int32,Simphony.Simulation.PayType)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WeekDay.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WeekDay.IsWorking(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WeekDay.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WeekDay.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WeekDay.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WeekDay.GetWorkingTime(System.TimeSpan,System.TimeSpan,System.Func{Simphony.Simulation.WorkingTime,System.Boolean})">
            <summary>
            Gets the amount of working time between two times.
            </summary>
            <param name="fromTime">
            The start time.
            </param>
            <param name="toTime">
            The end time.
            </param>
            <param name="predicate">
            A predicate that specifies which work times to consider.
            </param>
            <returns>
            The amount of working time between the two times.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start time is greater than the specified end time.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified predicate is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.Simulation.WorkingTime">
            <summary>
            Defines a working time period.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WorkingTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WorkingTime"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WorkingTime.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WorkingTime"/> class.
            </summary>
            <param name="fromTime">
            The start time in hours.
            </param>
            <param name="toTime">
            The finish time in hours.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start time is greater than the specified finish time.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.WorkingTime.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WorkingTime"/> class.
            </summary>
            <param name="fromTime">
            The start time.
            </param>
            <param name="toTime">
            The finish time.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start time is greater than the specified finish time.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.WorkingTime.#ctor(System.TimeSpan,System.TimeSpan,System.Int32,Simphony.Simulation.PayType)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WorkingTime"/> class.
            </summary>
            <param name="fromTime">
            The start time.
            </param>
            <param name="toTime">
            The finish time.
            </param>
            <param name="shift">
            The shift number.
            </param>
            <param name="payType">
            The pay type.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified shift is not one of 1, 2, or 3.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start time is greater than the specified finish time.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.WorkingTime.Calendar">
            <summary>
            Gets the calendar the working time belongs to.
            </summary>
            <value>
            The calendar the working time belongs to.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WorkingTime.FromTime">
            <summary>
            Gets or sets the start time.
            </summary>
            <value>
            The start time.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WorkingTime.Index">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.WorkingTime.Length">
            <summary>
            Gets the length of the working time period.
            </summary>
            <value>
            The length of the working time period.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WorkingTime.PayType">
            <summary>
            Gets or sets the pay type.
            </summary>
            <value>
            The pay type.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WorkingTime.Parent">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.WorkingTime.Shift">
            <summary>
            Gets or sets the shift number.
            </summary>
            <value>
            The shift number.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WorkingTime.ToTime">
            <summary>
            Gets or sets the finish time.
            </summary>
            <value>
            The finish time.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WorkingTime.WorkDay">
            <summary>
            Gets the work day the working time belongs to.
            </summary>
            <value>
            The work day the working time belongs to.
            </value>
        </member>
        <member name="M:Simphony.Simulation.WorkingTime.Clone">
            <summary>
            Creates a clone of the current object.
            </summary>
            <returns>
            A clone of the current object.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.WorkingTime.CompareTo(Simphony.Simulation.WorkingTime)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WorkingTime.Contains(System.TimeSpan)">
            <summary>
            Returns a value indicating whether a time is contained in the working time period.
            </summary>
            <param name="time">
            The time.
            </param>
            <returns>
            True if the time is contained in the working time period; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.WorkingTime.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WorkingTime.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WorkingTime.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WorkingTime.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WorkingTime.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WorkingTime.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WorkingTime.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.WorkWeek">
            <summary>
            Defines a work week for a calendar.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WorkWeek.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WorkWeek"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WorkWeek.#ctor(Simphony.Simulation.DefaultCalendar)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WorkWeek"/> class that is the default work
            week.
            </summary>
            <param name="defaultCalendar">
            The type of default calendar the default work week is being created for.
            </param>
        </member>
        <member name="P:Simphony.Simulation.WorkWeek.Calendar">
            <summary>
            Gets the calendar the work week belongs to.
            </summary>
            <value>
            The calendar the work week belongs to.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WorkWeek.FromDate">
            <summary>
            Gets or sets the first date on which the work week is in effect.
            </summary>
            <value>
            The first date on which the work week is in effect.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WorkWeek.Index">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.WorkWeek.IsDefault">
            <summary>
            Gets a value indicating whether or not the current work week represents the
            default work week.
            </summary>
            <value>
            True if the current work week represents the default work week; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WorkWeek.Name">
            <summary>
            Gets or sets the name of the work week.
            </summary>
            <value>
            The name of the work week.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WorkWeek.Parent">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.WorkWeek.ShiftLength">
            <summary>
            Gets an estimate of the length of a shift.
            </summary>
            <value>
            An estimate of the length of a shift.
            </value>
            <remarks>
            The length returned is the length of the most typical shift in the work week.
            </remarks>
        </member>
        <member name="P:Simphony.Simulation.WorkWeek.ShiftsPerDay">
            <summary>
            Gets an estimate of the number of a shifts per day.
            </summary>
            <value>
            An estimate of the number of a shifts per day.
            </value>
            <remarks>
            The number returned is that of the most typical day in the week.
            </remarks>
        </member>
        <member name="P:Simphony.Simulation.WorkWeek.ShiftText">
            <summary>
            Gets a string describing the shift configuration for the work week.
            </summary>
            <value>
            A string describing the shift configuration for the work week.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WorkWeek.ToDate">
            <summary>
            Gets or sets the last date on which the work week is in effect.
            </summary>
            <value>
            The last date on which the work week is in effect.
            </value>
        </member>
        <member name="P:Simphony.Simulation.WorkWeek.WeekDays">
            <summary>
            Gets a collection containing the week days associated with the current work week.
            </summary>
            <value>
            A collection containing the week days associated with the work week.
            </value>
        </member>
        <member name="M:Simphony.Simulation.WorkWeek.Clone">
            <summary>
            Creates a deep copy of the current work week.
            </summary>
            <returns>
            A deep copy of the current work week.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.WorkWeek.CompareTo(Simphony.Simulation.WorkWeek)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WorkWeek.ContainsDate(System.DateTime)">
            <summary>
            Returns a value indicating whether the current work week contains a specified date.
            </summary>
            <param name="date">
            The date in question.
            </param>
            <returns>
            True if the current work week contains the specified date; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.WorkWeek.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WorkWeek.GetWeekDay(System.DateTime)">
            <summary>
            Gets the week day corresponding to a given date/time.
            </summary>
            <param name="date">
            The date/time.
            </param>
            <returns>
            The week day corresponding to the given date/time.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified date is outside the range of dates defined by the
            current work week.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.WorkWeek.GetWeekDay(System.DayOfWeek)">
            <summary>
            Gets the week day corresponding to a given day of the week.
            </summary>
            <param name="dayOfWeek">
            The day of the week.
            </param>
            <returns>
            The week day corresponding to the given day of the week.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.WorkWeek.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WorkWeek.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WorkWeek.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.WorkWeek.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.WorkWeekEditor">
            <summary>
            Dialog editor for a work week.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WorkWeekEditor.#ctor(Simphony.Simulation.WorkWeek)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.WorkWeekEditor"/> class.
            </summary>
            <param name="workWeek">
            The work week to be edited.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified work week is a null reference.
            </exception>
        </member>
        <member name="F:Simphony.Simulation.WorkWeekEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.WorkWeekEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Simulation.WorkWeekEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.NumericStatisticConverter">
            <summary>
            Type converter for numeric statistics.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsDescriptor"/> class.
            </summary>
            <param name="name">
            The name of the property.
            </param>
        </member>
        <member name="P:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsDescriptor.Category">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsDescriptor.ComponentType">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsDescriptor.Converter">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsDescriptor.Description">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsDescriptor.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsDescriptor.PropertyType">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsDescriptor.Add(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Adds a property to the list of child properties.
            </summary>
            <param name="property">
            The property to add.
            </param>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsDescriptor.CanResetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsDescriptor.GetChildProperties(System.Object,System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsDescriptor.GetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsDescriptor.ResetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsDescriptor.SetValue(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticConverter.AdvancedStatisticsDescriptor.ShouldSerializeValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.EmissionsResource">
            <summary>
            Represents a resource producing emissions in a discrete event model.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.EmissionsResource.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.EmissionsResource"/> class.
            </summary>
            <param name="name">
            The name of the resource.
            </param>
            <param name="quantity">
            The initial number of servers available.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the supplied name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the supplied name is an empty string or if the specified quantity is negative.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.EmissionsResource.CO2EmissionRateIdle">
            <summary>
            Gets or sets the idle emission rate of CO2.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.EmissionsResource.CO2EmissionRateUtilized">
            <summary>
            Gets or sets the utilized emission rate of CO2.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.EmissionsResource.CO2Emissions">
            <summary>
            Gets or sets the numeric statistic for the emission rate of CO2.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.EmissionsResource.COEmissionRateIdle">
            <summary>
            Gets or sets the idle emission rate of CO.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.EmissionsResource.COEmissionRateUtilized">
            <summary>
            Gets or sets the utilized emission rate of CO.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.EmissionsResource.COEmissions">
            <summary>
            Gets or sets the numeric statistic for the emission rate of CO.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.EmissionsResource.HCEmissionRateIdle">
            <summary>
            Gets or sets the idle emission rate of HC.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.EmissionsResource.HCEmissionRateUtilized">
            <summary>
            Gets or sets the utilized emission rate of HC.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.EmissionsResource.HCEmissions">
            <summary>
            Gets or sets the numeric statistic for the emission rate of HC.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.EmissionsResource.NOxEmissionRateIdle">
            <summary>
            Gets or sets the idle emission rate of NOx.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.EmissionsResource.NOxEmissionRateUtilized">
            <summary>
            Gets or sets the utilized emission rate of NOx.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.EmissionsResource.NOxEmissions">
            <summary>
            Gets or sets the numeric statistic for the emission rate of NOx.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.EmissionsResource.PMEmissionRateIdle">
            <summary>
            Gets or sets the idle emission rate of PM.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.EmissionsResource.PMEmissionRateUtilized">
            <summary>
            Gets or sets the utilized emission rate of PM.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.EmissionsResource.PMEmissions">
            <summary>
            Gets or sets the numeric statistic for the emission rate of PM (particulate matter).
            </summary>
        </member>
        <member name="M:Simphony.Simulation.EmissionsResource.FinalizeRun(System.Int32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.EmissionsResource.InitializeRun(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.EmissionsResource.CollectStatistics(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.IResourceRequest">
            <summary>
            Interface implemented by resource requests.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.IResourceRequest.Entity">
            <summary>
            Gets the entity making the request.
            </summary>
            <value>
            The entity making the request.
            </value>
        </member>
        <member name="P:Simphony.Simulation.IResourceRequest.Time">
            <summary>
            Gets the simulation time at which the request was made.
            </summary>
            <value>
            The simulation time at which the request was made.
            </value>
        </member>
        <member name="M:Simphony.Simulation.IResourceRequest.Check">
            <summary>
            Checks to see if the required resources are available.
            </summary>
            <returns>
            A null reference if the required resources are not currently available; otherwise an
            IList of ResourceQuantityPairs specifying the resources desired.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.IResourceRequest.Fulfill(System.Collections.Generic.IList{Simphony.Simulation.ResourceQuantityPair})">
            <summary>
            Called by the framework after the resource request has been fulfilled.
            </summary>
            <param name="resources">
            An list of ResourceQuantityPairs specifying the resources that were captured.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified list is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.Simulation.Reservation">
            <summary>
            Defines a resource reservation.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.Reservation.#ctor(Simphony.Simulation.Entity,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.Reservation"/> class.
            </summary>
            <param name="entity">
            The entity making the reservation.
            </param>
            <param name="priority">
            The priority of the reservation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Reservation.#ctor(Simphony.Simulation.Entity,System.Double,Simphony.Simulation.Reservation)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.Reservation"/> class.
            </summary>
            <param name="entity">
            The entity making the reservation.
            </param>
            <param name="priority">
            The priority of the reservation.
            </param>
            <param name="preempted">
            The reservation being preempted (if any); otherwise null.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.Reservation.Entity">
            <summary>
            Gets the entity making the reservation.
            </summary>
            <value>
            The entity making the reservation.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Reservation.Preempted">
            <summary>
            Gets the reservation being preempted.
            </summary>
            <value>
            The reservation being preempted (if any); otherwise null.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Reservation.Priority">
            <summary>
            Gets the priority of the reservation.
            </summary>
            <value>
            The priority of the reservation.
            </value>
        </member>
        <member name="T:Simphony.Simulation.TerminationReason">
            <summary>
            Lists the possible reasons that a simulation may terminate.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.TerminationReason.Unknown">
            <summary>
            The reason for termination is not known.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.TerminationReason.EventQueueEmpty">
            <summary>
            There were no more events to process.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.TerminationReason.MaximumTimeReached">
            <summary>
            The maximum simulation time was reached.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.TerminationReason.ExplicitlyHalted">
            <summary>
            The simulation was explicitly halted.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.StatisticRunType">
            <summary>
            An enumeration specifying whether a chart is displaying data for a single run or all runs.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.StatisticRunType.Single">
            <summary>
            The chart is displaying data about a single run.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.StatisticRunType.All">
            <summary>
            The chart is displaying data about all run.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.RunAlreadyFinalizedException">
            <summary>
            An exception indicating that a run has already been finalized.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.RunAlreadyFinalizedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.RunAlreadyFinalizedException"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.RunAlreadyFinalizedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.RunAlreadyFinalizedException"/> class with a
            specified error message.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:Simphony.Simulation.RunAlreadyFinalizedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.RunAlreadyFinalizedException"/> class with a
            specified error message and a reference to the inner exception that is the cause of this
            exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference if no inner
            exception is specified.
            </param>
        </member>
        <member name="M:Simphony.Simulation.RunAlreadyFinalizedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.RunAlreadyFinalizedException"/> class from
            serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or
            destination.
            </param>
        </member>
        <member name="T:Simphony.Simulation.RunAlreadyInitializedException">
            <summary>
            An exception indicating that a run has already been initialized.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.RunAlreadyInitializedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.RunAlreadyInitializedException"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.RunAlreadyInitializedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.RunAlreadyInitializedException"/> class with a
            specified error message.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:Simphony.Simulation.RunAlreadyInitializedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.RunAlreadyInitializedException"/> class with a
            specified error message and a reference to the inner exception that is the cause of this
            exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference if no inner
            exception is specified.
            </param>
        </member>
        <member name="M:Simphony.Simulation.RunAlreadyInitializedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.RunAlreadyInitializedException"/> class from
            serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or
            destination.
            </param>
        </member>
        <member name="T:Simphony.Simulation.RunNotInitializedException">
            <summary>
            An exception indicating that a run has not been initialized.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.RunNotInitializedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.RunNotInitializedException"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.RunNotInitializedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.RunNotInitializedException"/> class with a
            specified error message.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:Simphony.Simulation.RunNotInitializedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.RunNotInitializedException"/> class with a
            specified error message and a reference to the inner exception that is the cause of this
            exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference if no inner
            exception is specified.
            </param>
        </member>
        <member name="M:Simphony.Simulation.RunNotInitializedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.RunNotInitializedException"/> class from
            serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or
            destination.
            </param>
        </member>
        <member name="T:Simphony.Simulation.EnumeratedStatisticEditor">
            <summary>
            A design value editor that can provide a user interface for representing enumerated
            statistics.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.EnumeratedStatisticEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.EnumeratedStatisticEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.NumericStatisticInterpretation">
            <summary>
            An enumeration defining the possible interpretations of a numeric statistic.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.NumericStatisticInterpretation.Generic">
            <summary>
            The statistic is generic and does not have a specific interpretation.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.NumericStatisticInterpretation.ContinuousVariable">
            <summary>
            The statistic represents the a continuous variable.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.NumericStatisticInterpretation.Cost">
            <summary>
            The statistic represents the cost of a project or activity.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.NumericStatisticInterpretation.CycleTime">
            <summary>
            The statistic represents the cycle time of an entity.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.NumericStatisticInterpretation.Duration">
            <summary>
            The statistic represents the duration of a project or activity.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.NumericStatisticInterpretation.FileLength">
            <summary>
            The statistic represents the length of a file/queue.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.NumericStatisticInterpretation.FinishTime">
            <summary>
            The statistic represents the finish time of a project or activity.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.NumericStatisticInterpretation.InterarrivalTime">
            <summary>
            The statistic represents the inter-arrival time of entities.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.NumericStatisticInterpretation.OverallProduction">
            <summary>
            The statistic represents overall production.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.NumericStatisticInterpretation.ProductionRate">
            <summary>
            The statistic represents a production rate.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.NumericStatisticInterpretation.StartTime">
            <summary>
            The statistic represents the start time of a project or activity.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.NumericStatisticInterpretation.Utilization">
            <summary>
            The statistic represents the utilization of a resource.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.NumericStatisticInterpretation.WaitingTime">
            <summary>
            The statistic represents the waiting time of an entity in a queue.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.NumericStatisticEditor">
            <summary>
            A design value editor that can provide a user interface for representing numeric statistics.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.NumericStatisticEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.RunIndexConverter">
            <summary>
            A type converter for the run index of a statistic.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.RunIndexConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.RunIndexConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.RunIndexConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.RunIndexConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.RunIndexConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.RunIndexConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.RunIndexConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.EnumeratedStatistic`1">
            <summary>
            An enumerated statistic that supports multiple runs.
            </summary>
            <typeparam name="T">
            The type of observation supported by the statistic.
            </typeparam>
        </member>
        <member name="M:Simphony.Simulation.EnumeratedStatistic`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.EnumeratedStatistic`1"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.EnumeratedStatistic`1.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.EnumeratedStatistic`1"/> class.
            </summary>
            <param name="name">
            The name of the statistic.
            </param>
            <param name="isIntrinsic">
            True if the statistic is intrinsic; otherwise false.
            </param>
        </member>
        <member name="P:Simphony.Simulation.EnumeratedStatistic`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.EnumeratedStatistic`1.Current">
            <inheritdoc cref="P:Simphony.Simulation.BasicEnumeratedStatistic`1.Current"/>
        </member>
        <member name="P:Simphony.Simulation.EnumeratedStatistic`1.LastTime">
            <summary>
            Gets the simulation time at which the most recent observation was collected.
            </summary>
            <value>
            The simulation time at which the most recent observation was collected; or NaN if no
            observations have been collected.
            </value>
        </member>
        <member name="P:Simphony.Simulation.EnumeratedStatistic`1.LeastFrequent">
            <inheritdoc cref="P:Simphony.Simulation.BasicEnumeratedStatistic`1.LeastFrequent"/>
        </member>
        <member name="P:Simphony.Simulation.EnumeratedStatistic`1.LeastFrequentPercentage">
            <inheritdoc cref="P:Simphony.Simulation.BasicEnumeratedStatistic`1.LeastFrequentPercentage"/>
        </member>
        <member name="P:Simphony.Simulation.EnumeratedStatistic`1.MostFrequent">
            <inheritdoc cref="P:Simphony.Simulation.BasicEnumeratedStatistic`1.MostFrequent"/>
        </member>
        <member name="P:Simphony.Simulation.EnumeratedStatistic`1.MostFrequentPercentage">
            <inheritdoc cref="P:Simphony.Simulation.BasicEnumeratedStatistic`1.MostFrequentPercentage"/>
        </member>
        <member name="P:Simphony.Simulation.EnumeratedStatistic`1.Observations">
            <inheritdoc cref="P:Simphony.Simulation.BasicEnumeratedStatistic`1.Observations"/>
        </member>
        <member name="P:Simphony.Simulation.EnumeratedStatistic`1.RunCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.EnumeratedStatistic`1.Times">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.EnumeratedStatistic`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.EnumeratedStatistic`1.FinalizeRun(System.Int32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.EnumeratedStatistic`1.InitializeRun(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.EnumeratedStatistic`1.Collect(System.Double,`0)">
            <summary>
            Collects an observation.
            </summary>
            <param name="time">
            The time of the observation.
            </param>
            <param name="value">
            The observation to collect.
            </param>
        </member>
        <member name="M:Simphony.Simulation.EnumeratedStatistic`1.OnRunIndexPropertyChanged">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.NumericStatistic">
            <summary>
            A numeric statistic that supports multiple runs.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.NumericStatistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.NumericStatistic"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.NumericStatistic.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.NumericStatistic"/> class.
            </summary>
            <param name="isIntrinsic">
            True if the statistic is intrinsic; otherwise false.
            </param>
        </member>
        <member name="M:Simphony.Simulation.NumericStatistic.#ctor(Simphony.Simulation.NumericStatisticInterpretation)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.NumericStatistic"/> class.
            </summary>
            <param name="interpretation">
            A value indicating how the statistic should be interpreted.
            </param>
        </member>
        <member name="M:Simphony.Simulation.NumericStatistic.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.NumericStatistic"/> class.
            </summary>
            <param name="name">
            The name of the statistic.
            </param>
        </member>
        <member name="M:Simphony.Simulation.NumericStatistic.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.NumericStatistic"/> class.
            </summary>
            <param name="name">
            The name of the statistic.
            </param>
            <param name="isIntrinsic">
            True if the statistic is intrinsic; otherwise false.
            </param>
        </member>
        <member name="M:Simphony.Simulation.NumericStatistic.#ctor(System.String,Simphony.Simulation.NumericStatisticInterpretation)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.NumericStatistic"/> class.
            </summary>
            <param name="name">
            The name of the statistic.
            </param>
            <param name="interpretation">
            A value indicating how the statistic should be interpreted.
            </param>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.Current">
            <inheritdoc cref="P:Simphony.Simulation.BasicNumericStatistic.Current"/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.Initial">
            <summary>
            Gets or sets an initial observation to be recorded at time zero during initialization.
            </summary>
            <value>
            The value of the initial observation to be recorded at time zero; or a null reference if no
            observation should be recorded.
            </value>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.Interpretation">
            <summary>
            Gets or sets a value indicating how the statistic should be interpreted.
            </summary>
            <value>
            A value indicating how the statistic should be interpreted.
            </value>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.IsIntrinsic">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.Kurtosis">
            <inheritdoc cref="P:Simphony.Simulation.BasicNumericStatistic.Kurtosis"/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.LastTime">
            <summary>
            Gets the simulation time at which the most recent observation was collected.
            </summary>
            <value>
            The simulation time at which the most recent observation was collected; or NaN if no
            observations have been collected.
            </value>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.Maximum">
            <inheritdoc cref="P:Simphony.Simulation.BasicNumericStatistic.Maximum"/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.Mean">
            <inheritdoc cref="P:Simphony.Simulation.BasicNumericStatistic.Mean"/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.Minimum">
            <inheritdoc cref="P:Simphony.Simulation.BasicNumericStatistic.Minimum"/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.Observations">
            <inheritdoc cref="P:Simphony.Simulation.BasicNumericStatistic.Observations"/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.RunCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.ShapiroWilkStatistic">
            <inheritdoc cref="P:Simphony.Simulation.BasicNumericStatistic.ShapiroWilkStatistic"/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.Skewness">
            <inheritdoc cref="P:Simphony.Simulation.BasicNumericStatistic.Skewness"/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.StandardDeviation">
            <inheritdoc cref="P:Simphony.Simulation.BasicNumericStatistic.StandardDeviation"/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.Sum">
            <inheritdoc cref="P:Simphony.Simulation.BasicNumericStatistic.Sum"/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.Times">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.NumericStatistic.Variance">
            <inheritdoc cref="P:Simphony.Simulation.BasicNumericStatistic.Variance"/>
        </member>
        <member name="M:Simphony.Simulation.NumericStatistic.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.NumericStatistic.FinalizeRun(System.Int32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.NumericStatistic.InitializeRun(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.NumericStatistic.Percentile(System.Double)">
            <summary>
            Gets the n-th percentile of the statistic.
            </summary>
            <param name="n">
            The percentile to get.
            </param>
            <returns>
            The n-th percentile of the statistic; if there are no observations, the
            return value is Double.NaN.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified percentile is outside the range of 0 to 1.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.NumericStatistic.Collect(System.Double,System.Double)">
            <summary>
            Collects an observation.
            </summary>
            <param name="time">
            The time of the observation.
            </param>
            <param name="value">
            The observation to collect.
            </param>
        </member>
        <member name="M:Simphony.Simulation.NumericStatistic.OnRunIndexPropertyChanged">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.StatisticChartType">
            <summary>
            An enumeration defining the different types of charts a that can be generated for a
            statistic.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.StatisticChartType.Histogram">
            <summary>
            A histogram.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.StatisticChartType.CumulativeDistribution">
            <summary>
            A cumulative distribution chart.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.StatisticChartType.TimeChart">
            <summary>
            A time chart.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.StatisticChartType.CumulativeTimeChart">
            <summary>
            A cumulative time chart.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.StatisticChartType.QQPlot">
            <summary>
            A Q-Q plot.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.StatisticChartType.BarChart">
            <summary>
            A bar chart.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.StatisticChartType.StackedBarChart">
            <summary>
            A stacked bar chart.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.CompoundResourceRequirement">
            <summary>
            Represents a resources requirement built from other resource requirements.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CompoundResourceRequirement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.CompoundResourceRequirement"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.CompoundResourceRequirement.#ctor(Simphony.Simulation.RequirementActionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.CompoundResourceRequirement"/> class.
            </summary>
            <param name="action">
            A value indicating how multiple resources are handled.
            </param>
        </member>
        <member name="P:Simphony.Simulation.CompoundResourceRequirement.Action">
            <summary>
            Gets or sets a value indicating how multiple resources are handled.
            </summary>
            <value>
            A value indicating how multiple resources are handled.
            </value>
            <remarks>
            The default value is RequirementActionType.All.
            </remarks>
        </member>
        <member name="M:Simphony.Simulation.CompoundResourceRequirement.Add(Simphony.Simulation.IResourceRequirement)">
            <summary>
            Adds a resource to the list of requirements.
            </summary>
            <param name="requirement">
            The requirement to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified requirement is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.CompoundResourceRequirement.Check">
            <summary>
            Checks to see if the required resources are available.
            </summary>
            <returns>
            A null reference if the required resources are not currently available; otherwise an
            IList or ResourceQuantityPairs specifying the resources desired.
            </returns>
        </member>
        <member name="T:Simphony.Simulation.IResourceRequirement">
            <summary>
            Abstract representation of a resource requirement.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.IResourceRequirement.Check">
            <summary>
            Checks to see if the required resources are available.
            </summary>
            <returns>
            A null reference if the required resources are not currently available; otherwise an
            <see cref="T:System.Collections.Generic.IList`1"/> specifying the resources desired.
            </returns>
        </member>
        <member name="T:Simphony.Simulation.MultipleResourceRequirement">
            <summary>
            Represents a requirement for multiple resources.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.MultipleResourceRequirement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.MultipleResourceRequirement"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.MultipleResourceRequirement.#ctor(Simphony.Simulation.RequirementActionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.MultipleResourceRequirement"/> class.
            </summary>
            <param name="action">
            A value indicating how multiple resources are handled.
            </param>
        </member>
        <member name="P:Simphony.Simulation.MultipleResourceRequirement.Action">
            <summary>
            Gets or sets a value indicating how multiple resources are handled.
            </summary>
            <value>
            A value indicating how multiple resources are handled.
            </value>
            <remarks>
            The default value is RequirementActionType.All.
            </remarks>
        </member>
        <member name="P:Simphony.Simulation.MultipleResourceRequirement.Resources">
            <summary>
            Gets a read-only collection containing a list of the resources required.
            </summary>
            <value>
            A read-only collection containing a list of the resources required.
            </value>
        </member>
        <member name="M:Simphony.Simulation.MultipleResourceRequirement.Add(Simphony.Simulation.Resource,System.Int32)">
            <summary>
            Adds a resource to the list of requirements.
            </summary>
            <param name="resource">
            The resource to add.
            </param>
            <param name="quantity">
            The quantity of the resource required.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified resource is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified quantity is negative.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.MultipleResourceRequirement.AddRange(System.Collections.Generic.IEnumerable{Simphony.Simulation.ResourceQuantityPair})">
            <summary>
            Adds a collection of resources to the list of requirements.
            </summary>
            <param name="resources">
            A collection of resource/quantity pairs specifying the resources to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.MultipleResourceRequirement.Check">
            <summary>
            Checks to see if the required resources are available.
            </summary>
            <returns>
            A null reference if the required resources are not currently available; otherwise an
            IList or ResourceQuantityPairs specifying the resources desired.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.MultipleResourceRequirement.Remove(Simphony.Simulation.Resource)">
            <summary>
            Removes a resource from the list of requirements.
            </summary>
            <param name="resource">
            The resource to remove.
            </param>
            <returns>
            True if the specified resource was found and removed; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified resource is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.Simulation.RequirementActionType">
            <summary>
            An enumeration that specifies the different ways that multiple resource are handled.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.RequirementActionType.All">
            <summary>
            Indicates that all of the specified resources are required.
            </summary>
        </member>
        <member name="F:Simphony.Simulation.RequirementActionType.Any">
            <summary>
            Indicates that any one of the specified resources is sufficient.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.ResourceExtensions">
            <summary>
            Extension methods for resources.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.ResourceExtensions.Add(System.Collections.Generic.ICollection{Simphony.Simulation.ResourceQuantityPair},Simphony.Simulation.Resource,System.Int32)">
            <summary>
            Adds the specified resource and quantity as a resource/quantity pair to the collection.
            </summary>
            <param name="collection">
            The collection in question.
            </param>
            <param name="resource">
            The resource.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection or the specified resource is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified quantity is negative.
            </exception>
        </member>
        <member name="T:Simphony.Simulation.DiscreteEventScenario">
            <summary>
            An abstract base class that provides an implementation of the <see cref="T:Simphony.Simulation.IScenario"/>
            interface.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventScenario.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.DiscreteEventScenario"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventScenario.AbsoluteError">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventScenario.Enabled">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventScenario.RelativeError">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventScenario.StateVariables">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventScenario.TimeStep">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventScenario.F(System.Double,System.Double[],System.Double[])">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventScenario.FinalizeRun(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventScenario.FinalizeScenario">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventScenario.InitializeRun(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventScenario.InitializeScenario">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.IDiscreteEventEngine">
            <summary>
            Interface implemented by discrete event simulation engines.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.IDiscreteEventEngine.CurrentEntity">
            <summary>
            Gets the entity the engine is processing.
            </summary>
            <value>
            The entity the engine is processing if it is processing one; otherwise a null reference.
            </value>
        </member>
        <member name="P:Simphony.Simulation.IDiscreteEventEngine.ProcessedEventCount">
            <summary>
            Gets the number of events that have been processed.
            </summary>
            <value>
            The number of events that have been processed.
            </value>
            <remarks>
            The value includes the event currently being processed if applicable.
            </remarks>
        </member>
        <member name="P:Simphony.Simulation.IDiscreteEventEngine.ScheduledEventCount">
            <summary>
            Gets the number of events currently scheduled.
            </summary>
            <value>
            The number of events currently scheduled.
            </value>
        </member>
        <member name="P:Simphony.Simulation.IDiscreteEventEngine.TimeNext">
            <summary>
            Gets the time of the next scheduled event.
            </summary>
            <value>
            The time of the next scheduled event; or double.PositiveInfinity if no events are scheduled.
            </value>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.AlterServers(Simphony.Simulation.Resource,System.Int32)">
            <summary>
            Changes the total number of servers available to a resource.
            </summary>
            <param name="resource">
            The resource.
            </param>
            <param name="servers">
            The total number of servers that should now be available to the resource.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified resource is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of servers is negative.
            </exception>
            <remarks>
            This method will not affect the number of servers in use.  If the quantity is set to a value
            less than the current number of servers in use, then the number of servers available will
            temporarily be negative until the appropriate number of servers are released.
            </remarks>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.CancelEvent(Simphony.Simulation.Entity)">
            <summary>
            Cancels an event.
            </summary>
            <param name="entity">
            The entity associated with the event.
            </param>
            <returns>
            The amount of time remaining before the canceled event was due to be handled.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is not scheduled.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.DequeueEntity``1(Simphony.Simulation.WaitingFile)">
            <summary>
            Dequeues the entity at the head of a waiting file.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="file">
            The waiting file in question.
            </param>
            <returns>
            The entity at the head of the waiting file.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified waiting file is a null reference.
            </exception>
            <exception cref="T:System.InvalidCastException">
            Thrown if the entity at the head of the queue cannot be cast to type T.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified waiting file is empty.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.DequeueEntity``1(Simphony.Simulation.WaitingFile,System.Int32)">
            <summary>
            Dequeues the entity at a specified index from a waiting file.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="file">
            The waiting file in question.
            </param>
            <param name="index">
            The zero-based index of the entity to dequeue.
            </param>
            <returns>
            The entity at the head of the waiting file.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified waiting file is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is not a valid index in the waiting file.
            </exception>
            <exception cref="T:System.InvalidCastException">
            Thrown if the entity at the specified index cannot be cast to type T.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.EnqueueEntity``1(``0,Simphony.Simulation.WaitingFile)">
            <summary>
            Enqueues an entity in a waiting file.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="entity">
            The entity to be enqueued.
            </param>
            <param name="file">
            The waiting file in which the entity should wait.
            </param>
            <remarks>
            The entity is enqueued with a priority of zero.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity or the specified waiting file is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is scheduled or if it is already queued in a waiting file.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.EnqueueEntity``1(``0,Simphony.Simulation.WaitingFile,System.Double)">
            <summary>
            Enqueues an entity in a waiting file.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="entity">
            The entity to be enqueued.
            </param>
            <param name="file">
            The waiting file in which the entity should wait.
            </param>
            <param name="priority">
            The entity's priority.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity or the specified waiting file is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is scheduled or if it is already queued in a waiting file.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.GetEventHandler``1(``0)">
            <summary>
            Gets the handler of the event the specified entity is scheduled for.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="entity">
            The entity in question.
            </param>
            <returns>
            The handler of the event the specified entity is scheduled for.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is not scheduled.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.GetTimeRemaining(Simphony.Simulation.Entity)">
            <summary>
            Gets the amount of time remaining until the event an entity is scheduled for.
            </summary>
            <param name="entity">
            The entity in question.
            </param>
            <returns>
            If the entity is scheduled, the amount of time remaining until the event; if the
            entity is suspended, the amount of time that will be remaining until the event
            once the entity is resumed; otherwise Double.NaN.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.GetWeather(Simphony.Simulation.WeatherParameters)">
            <summary>
            Gets the weather information for the current date.
            </summary>
            <param name="parameters">
            The weather parameters.
            </param>
            <returns>
            The weather information for the current date.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.PollResource(Simphony.Simulation.Resource)">
            <summary>
            Checks to see if any requests for the specified resource can be fulfilled.
            </summary>
            <param name="resource">
            The resource.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified resource is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.PreemptResource``1(``0,Simphony.Simulation.Resource,System.Action{``0},Simphony.Simulation.WaitingFile,System.Double)">
            <summary>
            Attempts to preempt one server of the specified resource for an entity.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="entity">
            The entity preempting the resource.
            </param>
            <param name="resource">
            The resource to preempt.
            </param>
            <param name="handler">
            The event handler to call when the resource has been captured.
            </param>
            <param name="file">
            The waiting file in which the entity should wait if the resource is unavailable.
            </param>
            <param name="priority">
            The priority of the preempt.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the entity, the resource, the handler, or the waiting file is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is scheduled or if it is queued in a waiting file.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.ReleaseResource``1(``0,System.Collections.Generic.IEnumerable{Simphony.Simulation.ResourceQuantityPair})">
            <summary>
            Attempts to release the specified resources.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="entity">
            The entity releasing the resources.
            </param>
            <param name="resources">
            A collection of resource/quantity pairs specifying the resource to release and the quantities thereof.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity or the specified collection is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.ReleaseResource``1(``0,Simphony.Simulation.Resource,System.Int32)">
            <summary>
            Attempts to release the specified resource.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="entity">
            The entity releasing the resource.
            </param>
            <param name="resource">
            The resource to release.
            </param>
            <param name="quantity">
            The quantity of the resource to release.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity or the specified resource is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified quantity is not between zero and the number of servers the
            entity has reserved.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.ReleaseResource``1(``0,Simphony.Simulation.ResourceQuantityPair)">
            <summary>
            Attempts to release the specified resource.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="entity">
            The entity releasing the resource.
            </param>
            <param name="pair">
            A resource/quantity pair specifying the resource to release and the quantity thereof.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity or the specified pair is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.RequestResource``1(``0,System.Collections.Generic.IEnumerable{Simphony.Simulation.ResourceQuantityPair},System.Action{``0},Simphony.Simulation.WaitingFile)">
            <summary>
            Attempts to capture the specified resources for the entity.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="entity">
            The entity requesting the resource.
            </param>
            <param name="resources">
            A collection of resource/quantity pairs specifying the resources needed and the quantities thereof.
            </param>
            <param name="handler">
            The event handler to call when the resources have been captured.
            </param>
            <param name="file">
            The waiting file in which the entity should wait if the resources are unavailable.
            </param>
            <remarks>
            The request is made with a priority of zero.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the entity, the requirements, the handler, or the waiting file is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is scheduled or if it is queued in a waiting file.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.RequestResource``1(``0,System.Collections.Generic.IEnumerable{Simphony.Simulation.ResourceQuantityPair},System.Action{``0},Simphony.Simulation.WaitingFile,System.Double)">
            <summary>
            Attempts to capture the specified resources for the entity.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="entity">
            The entity requesting the resource.
            </param>
            <param name="resources">
            A collection of resource/quantity pairs specifying the resources needed and the quantities thereof.
            </param>
            <param name="handler">
            The event handler to call when the resources have been captured.
            </param>
            <param name="file">
            The waiting file in which the entity should wait if the resources are unavailable.
            </param>
            <param name="priority">
            The priority of the request.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the entity, the requirements, the handler, or the waiting file is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is scheduled or if it is queued in a waiting file.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.RequestResource``1(``0,Simphony.Simulation.IResourceRequirement,System.Action{``0},Simphony.Simulation.WaitingFile)">
            <summary>
            Attempts to capture the specified resources for the entity.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="entity">
            The entity requesting the resource.
            </param>
            <param name="requirements">
            An IResourceRequirement specifying the resources the entity desires.
            </param>
            <param name="handler">
            The event handler to call when the resources have been captured.
            </param>
            <param name="file">
            The waiting file in which the entity should wait if the resources are unavailable.
            </param>
            <remarks>
            The request is made with a priority of zero.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the entity, the requirements, the handler, or the waiting file is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is scheduled or if it is queued in a waiting file.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.RequestResource``1(``0,Simphony.Simulation.IResourceRequirement,System.Action{``0},Simphony.Simulation.WaitingFile,System.Double)">
            <summary>
            Attempts to capture the specified resources for the entity.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="entity">
            The entity requesting the resource.
            </param>
            <param name="requirements">
            An IResourceRequirement specifying the resources the entity desires.
            </param>
            <param name="handler">
            The event handler to call when the resources have been captured.
            </param>
            <param name="file">
            The waiting file in which the entity should wait if the resources are unavailable.
            </param>
            <param name="priority">
            The priority of the request.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the entity, the requirements, the handler, or the waiting file is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is scheduled or if it is queued in a waiting file.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.RequestResource``1(``0,Simphony.Simulation.Resource,System.Int32,System.Action{``0},Simphony.Simulation.WaitingFile)">
            <summary>
            Attempts to capture the specified resource for the entity.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="entity">
            The entity requesting the resource.
            </param>
            <param name="resource">
            The resource the entity requires.
            </param>
            <param name="quantity">
            The quantity of the resource the entity requires.
            </param>
            <param name="handler">
            The event handler to call when the resources have been captured.
            </param>
            <param name="file">
            The waiting file in which the entity should wait if the resource is unavailable.
            </param>
            <remarks>
            The request is made with a priority of zero.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the entity, the resource, the handler, or the waiting file is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified quantity is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is scheduled or if it is queued in a waiting file.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.RequestResource``1(``0,Simphony.Simulation.Resource,System.Int32,System.Action{``0},Simphony.Simulation.WaitingFile,System.Double)">
            <summary>
            Attempts to capture the specified resource for the entity.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="entity">
            The entity requesting the resource.
            </param>
            <param name="resource">
            The resource the entity requires.
            </param>
            <param name="quantity">
            The quantity of the resource the entity requires.
            </param>
            <param name="handler">
            The event handler to call when the resources have been captured.
            </param>
            <param name="file">
            The waiting file in which the entity should wait if the resource is unavailable.
            </param>
            <param name="priority">
            The priority of the request.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the entity, the resource, the handler, or the waiting file is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified quantity is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is scheduled or if it is queued in a waiting file.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.ResumeEvent(Simphony.Simulation.Entity)">
            <summary>
            Resumes a suspended event.
            </summary>
            <param name="entity">
            The entity associated with the event.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is not suspended.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.ScheduleEvent``1(``0,System.Action{``0},System.DateTime)">
            <summary>
            Schedules an event.
            </summary>
            <typeparam name="T">
            The type of entity associated with the event.
            </typeparam>
            <param name="entity">
            The entity associated with the event.
            </param>
            <param name="handler">
            That event handler to call when the event occurs.
            </param>
            <param name="dateTime">
            The absolute date/time at which the event should occur.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the specified entity or the specified handler is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is already scheduled or if it is queued in a waiting file.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified date/time has passed.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.ScheduleEvent``1(``0,System.Action{``0},System.Double)">
            <summary>
            Schedules an event.
            </summary>
            <typeparam name="T">
            The type of entity associated with the event.
            </typeparam>
            <param name="entity">
            The entity associated with the event.
            </param>
            <param name="handler">
            That event handler to call when the event occurs.
            </param>
            <param name="interval">
            The time interval from the current simulation time at which the event should occur.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the specified entity or the specified handler is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is already scheduled or if it is queued in a waiting file.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified time interval is negative.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.ScheduleEvent``1(``0,System.Action{``0},System.TimeSpan)">
            <summary>
            Schedules an event.
            </summary>
            <typeparam name="T">
            The type of entity associated with the event.
            </typeparam>
            <param name="entity">
            The entity associated with the event.
            </param>
            <param name="handler">
            That event handler to call when the event occurs.
            </param>
            <param name="timeSpan">
            The time interval from the current simulation time at which the event should occur.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the specified entity or the specified handler is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is already scheduled or if it is queued in a waiting file.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified time interval is negative.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.SubscribeCalendar``1(``0,Simphony.Simulation.Calendar,System.Action{``0})">
            <summary>
            Subscribes to events from a calendar.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="entity">
            The entity to be used for calendar events.
            </param>
            <param name="calendar">
            The calendar to subscribe to.
            </param>
            <param name="handler">
            The event handler to call when a calendar event occurs.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity, calendar, or handler is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity has already been subscribed to a calendar.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.SuspendEvent(Simphony.Simulation.Entity)">
            <summary>
            Suspends an event.
            </summary>
            <param name="entity">
            The entity associated with the event.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.IDiscreteEventEngine.UnsubscribeCalendar``1(``0)">
            <summary>
            Unsubscribes to events from a calendar.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
            <param name="entity">
            The entity currently being used for calendar events.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified entity is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is not subscribed to a calendar.
            </exception>
        </member>
        <member name="T:Simphony.Simulation.IScenario">
            <summary>
            Interface to be implemented by discrete event simulation scenarios.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.IScenario.AbsoluteError">
            <summary>
            Gets the absolute local truncation error allowed in Runge-Kutta integration.
            </summary>
            <value>
            The absolute local truncation error allowed in Runge-Kutta integration.
            </value>
        </member>
        <member name="P:Simphony.Simulation.IScenario.Enabled">
            <summary>
            Gets or sets a value indicating whether or not the scenario should be simulated.
            </summary>
            <value>
            A value indicating whether or not the scenario should be simulated.
            </value>
        </member>
        <member name="P:Simphony.Simulation.IScenario.RelativeError">
            <summary>
            Gets the relative local truncation error allowed in Runge-Kutta integration.
            </summary>
            <value>
            The relative local truncation error allowed in Runge-Kutta integration.
            </value>
        </member>
        <member name="P:Simphony.Simulation.IScenario.StateVariables">
            <summary>
            Gets a sequence of state variables.
            </summary>
            <value>
            A sequence of state variables.
            </value>
        </member>
        <member name="P:Simphony.Simulation.IScenario.TimeStep">
            <summary>
            Gets the maximum permissible time step for continuous simulation.
            </summary>
            <value>
            The maximum permissible time step for continuous simulation.
            </value>
        </member>
        <member name="M:Simphony.Simulation.IScenario.F(System.Double,System.Double[],System.Double[])">
            <summary>
            The method used to evaluate derivatives for continuous simulation.
            </summary>
            <param name="t">
            The simulation time.
            </param>
            <param name="y">
            The current values of the state variables at time t.
            </param>
            <param name="yp">
            When the method exits, the values of the derivatives of the state variables at time t.
            </param>
        </member>
        <member name="M:Simphony.Simulation.IScenario.FinalizeRun(System.Int32)">
            <summary>
            Finalizes the scenario after simulation of a run.
            </summary>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
        </member>
        <member name="M:Simphony.Simulation.IScenario.FinalizeScenario">
            <summary>
            Finalizes the scenario after simulation of all runs.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.IScenario.InitializeRun(System.Int32)">
            <summary>
            Initializes the scenario prior to simulation of a run.
            </summary>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
            <returns>
            The simulation time at which simulation of the run should halt; or double.PositiveInfinity
            if simulation of the run should not be constrained by time.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.IScenario.InitializeScenario">
            <summary>
            Initializes the scenario prior to simulation of any runs.
            </summary>
            <returns>
            The number of runs to be simulated for the scenario.
            </returns>
        </member>
        <member name="T:Simphony.Simulation.IEvent">
            <summary>
            Interface implemented by classes that encapsulate an event in the discrete event model.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.IEvent.Entity">
            <summary>
            Gets the entity associated with the event.
            </summary>
            <value>
            The entity associated with the event.
            </value>
        </member>
        <member name="P:Simphony.Simulation.IEvent.Time">
            <summary>
            Gets or sets the time of the event.
            </summary>
            <value>
            If the event is scheduled, the absolute simulation time of the event; if the
            event is suspended, the time remaining in the event.
            </value>
        </member>
        <member name="M:Simphony.Simulation.IEvent.Dispatch">
            <summary>
            Dispatches the event for processing.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.ISimulationEngine">
            <summary>
            Interface implemented by simulation engines.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.ISimulationEngine.DateNow">
            <summary>
            Gets the current simulation date/time.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the current simulation date/time.
            </value>
        </member>
        <member name="P:Simphony.Simulation.ISimulationEngine.IsSimulating">
            <summary>
            Gets a value indicating whether the simulation engine is running a simulation.
            </summary>
            <value>
            True if the simulation engine is running a simulation; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Simulation.ISimulationEngine.PercentComplete">
            <summary>
            Gets or sets a value indicating the progress of the simulation.
            </summary>
            <value>
            A number between 0 and 1 indicating the progress of the simulation.
            </value>
            <remarks>
            This property is intended to allow a simulation model to report its progress to an
            external interface.
            </remarks>
        </member>
        <member name="P:Simphony.Simulation.ISimulationEngine.StartDate">
            <summary>
            Gets or sets the date on which simulation starts.
            </summary>
            <value>
            The date on which simulation starts.
            </value>
        </member>
        <member name="P:Simphony.Simulation.ISimulationEngine.TimeNow">
            <summary>
            Gets the current simulation time.
            </summary>
            <value>
            The current simulation time.
            </value>
        </member>
        <member name="P:Simphony.Simulation.ISimulationEngine.TimeUnit">
            <summary>
            Gets or sets the time unit used to measure simulation time.
            </summary>
            <value>
            The time unit used to measure simulation time.
            </value>
        </member>
        <member name="M:Simphony.Simulation.ISimulationEngine.CollectStatistic(Simphony.Simulation.CostStatistic,System.Nullable{System.Decimal})">
            <summary>
            Collects an observation to a <see cref="T:Simphony.Simulation.CostStatistic"/>.
            </summary>
            <param name="statistic">
            The <see cref="T:Simphony.Simulation.CostStatistic"/>.
            </param>
            <param name="value">
            The observation to collect.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Simulation.CostStatistic"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.ISimulationEngine.CollectStatistic(Simphony.Simulation.DateStatistic,System.Nullable{System.DateTime})">
            <summary>
            Collects an observation to a <see cref="T:Simphony.Simulation.DateStatistic"/>.
            </summary>
            <param name="statistic">
            The <see cref="T:Simphony.Simulation.DateStatistic"/>.
            </param>
            <param name="value">
            The observation to collect.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Simulation.DateStatistic"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.ISimulationEngine.CollectStatistic(Simphony.Simulation.DecimalStatistic,System.Nullable{System.Decimal})">
            <summary>
            Collects an observation to a <see cref="T:Simphony.Simulation.DecimalStatistic"/>.
            </summary>
            <param name="statistic">
            The <see cref="T:Simphony.Simulation.DecimalStatistic"/>.
            </param>
            <param name="value">
            The observation to collect.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Simulation.DecimalStatistic"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.ISimulationEngine.CollectStatistic(Simphony.Simulation.DurationStatistic,System.Nullable{System.TimeSpan})">
            <summary>
            Collects an observation to a <see cref="T:Simphony.Simulation.DurationStatistic"/>.
            </summary>
            <param name="statistic">
            The <see cref="T:Simphony.Simulation.DurationStatistic"/>.
            </param>
            <param name="value">
            The observation to collect.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Simulation.DurationStatistic"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.ISimulationEngine.CollectStatistic(Simphony.Simulation.NumericStatistic,System.Double)">
            <summary>
            Collects an observation to a <see cref="T:Simphony.Simulation.NumericStatistic"/>.
            </summary>
            <param name="statistic">
            The <see cref="T:Simphony.Simulation.NumericStatistic"/>.
            </param>
            <param name="value">
            The observation to collect.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Simulation.NumericStatistic"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.ISimulationEngine.CollectStatistic(Simphony.Simulation.NumericStatistic,System.Double,System.Double)">
            <summary>
            Collects an observation to a <see cref="T:Simphony.Simulation.NumericStatistic"/>.
            </summary>
            <param name="statistic">
            The <see cref="T:Simphony.Simulation.NumericStatistic"/>.
            </param>
            <param name="time">
            The simulation time at which the observation occurred.
            </param>
            <param name="value">
            The observation to collect.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Simulation.NumericStatistic"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.ISimulationEngine.CollectStatistic``1(Simphony.Simulation.EnumeratedStatistic{``0},``0)">
            <summary>
            Collects an observation to an <see cref="T:Simphony.Simulation.EnumeratedStatistic`1"/>.
            </summary>
            <typeparam name="T">
            The type of observation supported by the <see cref="T:Simphony.Simulation.EnumeratedStatistic`1"/>.
            </typeparam>
            <param name="statistic">
            The <see cref="T:Simphony.Simulation.EnumeratedStatistic`1"/>.
            </param>
            <param name="value">
            The observation to collect.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Simulation.EnumeratedStatistic`1"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.ISimulationEngine.InitializeEngine">
            <summary>
            Initializes the engine prior to simulation.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.ResourceQuantityPair">
            <summary>
            Defines a resource/quantity pair.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.ResourceQuantityPair.#ctor(Simphony.Simulation.Resource,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.ResourceQuantityPair"/> class.
            </summary>
            <param name="resource">
            The resource.
            </param>
            <param name="quantity">
            The quantity of the resource.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified resource is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified quantity is negative.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.ResourceQuantityPair.Quantity">
            <summary>
            Gets the quantity of the resource.
            </summary>
            <value>
            The quantity of the resource.
            </value>
        </member>
        <member name="P:Simphony.Simulation.ResourceQuantityPair.Resource">
            <summary>
            Gets the resource.
            </summary>
            <value>
            The resource.
            </value>
        </member>
        <member name="T:Simphony.Simulation.SingleResourceRequirement">
            <summary>
            Represents a requirement for a single resource.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.SingleResourceRequirement.#ctor(Simphony.Simulation.Resource,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.SingleResourceRequirement"/> class.
            </summary>
            <param name="resource">
            The resource required.
            </param>
            <param name="quantity">
            The quantity of the resource required.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified resource is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified quantity is negative.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.SingleResourceRequirement.Quantity">
            <summary>
            Gets or sets the quantity of the resource required.
            </summary>
            <value>
            The quantity of the resource required.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the quantity is set to a negative value.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.SingleResourceRequirement.Resource">
            <summary>
            Gets or sets the resource required.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.SingleResourceRequirement.Check">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Simulation.DiscreteEventEngine">
            <summary>
            Implements a discrete event simulation engine.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.DiscreteEventEngine"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Simphony.Simulation.DiscreteEventEngine"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventEngine.AbsoluteError">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventEngine.CurrentEntity">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventEngine.CurrentScenario">
            <summary>
            Gets the currently executing scenario.
            </summary>
            <value>
            The currently executing scenario.
            </value>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventEngine.DateNow">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventEngine.IsPaused">
            <summary>
            Gets a value indicating whether the simulation engine has been paused.
            </summary>
            <value>
            True if the simulation engine has been paused; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventEngine.IsSimulating">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventEngine.PercentComplete">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventEngine.ProcessedEventCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventEngine.RelativeError">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventEngine.RunIndex">
            <summary>
            Gets the zero-based run index of the current run.
            </summary>
            <value>
            The zero-based run index of the current run.
            </value>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventEngine.ScheduledEventCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventEngine.StartDate">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventEngine.TimeNext">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventEngine.TimeNow">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.DiscreteEventEngine.TimeUnit">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.AddWatch(Simphony.Simulation.IWatch)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.AlterServers(Simphony.Simulation.Resource,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.CancelEvent(Simphony.Simulation.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.CollectStatistic(Simphony.Simulation.CostStatistic,System.Nullable{System.Decimal})">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.CollectStatistic(Simphony.Simulation.DateStatistic,System.Nullable{System.DateTime})">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.CollectStatistic(Simphony.Simulation.DecimalStatistic,System.Nullable{System.Decimal})">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.CollectStatistic(Simphony.Simulation.DurationStatistic,System.Nullable{System.TimeSpan})">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.CollectStatistic(Simphony.Simulation.NumericStatistic,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.CollectStatistic(Simphony.Simulation.NumericStatistic,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.CollectStatistic``1(Simphony.Simulation.EnumeratedStatistic{``0},``0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.DequeueEntity``1(Simphony.Simulation.WaitingFile)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.DequeueEntity``1(Simphony.Simulation.WaitingFile,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.EnqueueEntity``1(``0,Simphony.Simulation.WaitingFile)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.EnqueueEntity``1(``0,Simphony.Simulation.WaitingFile,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.GetEventHandler``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.GetTimeRemaining(Simphony.Simulation.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.GetWeather(Simphony.Simulation.WeatherParameters)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.HaltRun">
            <summary>
            Halts the current run.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the simulation engine is not simulating.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.HaltScenario">
            <summary>
            Halts the current scenario.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the simulation engine is not simulating.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.HaltSimulation">
            <summary>
            Halts the simulation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the simulation engine is not simulating.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.InitializeEngine">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.Pause">
            <summary>
            Pauses simulation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the simulation engine is not simulating.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.PollResource(Simphony.Simulation.Resource)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.PreemptResource``1(``0,Simphony.Simulation.Resource,System.Action{``0},Simphony.Simulation.WaitingFile,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.ReleaseResource``1(``0,System.Collections.Generic.IEnumerable{Simphony.Simulation.ResourceQuantityPair})">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.ReleaseResource``1(``0,Simphony.Simulation.Resource,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.ReleaseResource``1(``0,Simphony.Simulation.ResourceQuantityPair)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.RemoveWatch(Simphony.Simulation.IWatch)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.RequestResource``1(``0,System.Collections.Generic.IEnumerable{Simphony.Simulation.ResourceQuantityPair},System.Action{``0},Simphony.Simulation.WaitingFile)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.RequestResource``1(``0,System.Collections.Generic.IEnumerable{Simphony.Simulation.ResourceQuantityPair},System.Action{``0},Simphony.Simulation.WaitingFile,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.RequestResource``1(``0,Simphony.Simulation.IResourceRequirement,System.Action{``0},Simphony.Simulation.WaitingFile)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.RequestResource``1(``0,Simphony.Simulation.IResourceRequirement,System.Action{``0},Simphony.Simulation.WaitingFile,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.RequestResource``1(``0,Simphony.Simulation.Resource,System.Int32,System.Action{``0},Simphony.Simulation.WaitingFile)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.RequestResource``1(``0,Simphony.Simulation.Resource,System.Int32,System.Action{``0},Simphony.Simulation.WaitingFile,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.Resume">
            <summary>
            Resumes simulation after it has been paused.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the simulation engine is not simulating.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.ResumeEvent(Simphony.Simulation.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.ScheduleEvent``1(``0,System.Action{``0},System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.ScheduleEvent``1(``0,System.Action{``0},System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.ScheduleEvent``1(``0,System.Action{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.Simulate(Simphony.Simulation.IModel)">
            <summary>
            Starts simulation of a specified model.
            </summary>
            <param name="model">
            The model to simulate.
            </param>
            <returns>
            The reason simulation terminated.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified model is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.Simulate(Simphony.Simulation.IScenario)">
            <summary>
            Starts simulation of a specified scenario.
            </summary>
            <param name="scenario">
            The scenario to simulate.
            </param>
            <returns>
            The reason simulation terminated.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified scenario is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.SubscribeCalendar``1(``0,Simphony.Simulation.Calendar,System.Action{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.SuspendEvent(Simphony.Simulation.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.UnsubscribeCalendar``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.DiscreteEventEngine.Dispose(System.Boolean)">
            <inheritdoc cref="M:Simphony.DisposableObjectBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:Simphony.Simulation.Entity">
            <summary>
            Base class for entities.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.Entity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.Entity"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.Entity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.Entity"/> class.
            </summary>
            <param name="name">
            The name to give the entity.
            </param>
        </member>
        <member name="P:Simphony.Simulation.Entity.Id">
            <summary>
            Gets a unique identifier for the entity.
            </summary>
            <value>
            A unique identifier for the entity.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Entity.IsQueued">
            <summary>
            Gets a value indicating whether the entity has been queued in a waiting file.
            </summary>
            <value>
            True if the entity has been queued in a waiting file; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Entity.IsScheduled">
            <summary>
            Gets a value indicating whether the entity has been scheduled for an event.
            </summary>
            <value>
            True if the entity has been scheduled for an event; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Entity.IsSuspended">
            <summary>
            Gets a value indicating whether the entity's events have been suspended.
            </summary>
            <value>
            True if the entity's events have been suspended; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Entity.Name">
            <summary>
            Gets or sets the name of the entity.
            </summary>
            <value>
            The name of the entity.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Entity.NewResources">
            <summary>
            Gets a list of the resources captured by the entity as a result of the most recent capture
            operation.
            </summary>
            <value>
            A list of the resources captured by the entity as a result of the most recent capture
            operation.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Entity.ResourcesOwned">
            <summary>
            Gets a list of resources owned by the entity.
            </summary>
            <value>
            A list of resources owned by the entity.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Entity.ScheduledTime">
            <summary>
            Gets the time at which the entity is currently scheduled.
            </summary>
            <value>
            The time at which the entity is currently scheduled; or NaN if the entity is not scheduled.
            </value>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the property is set and the entity is not scheduled.
            </exception>
        </member>
        <member name="P:Simphony.Simulation.Entity.NextId">
            <summary>
            Gets or sets the entity ID counter.
            </summary>
            <value>
            The entity ID counter.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Entity.EnqueueTime">
            <summary>
            Gets or sets the time at which the entity was queued in a waiting file.
            </summary>
            <value>
            The time at which the entity was queued in a waiting file.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Entity.Event">
            <summary>
            Gets or sets the event the entity is scheduled for.
            </summary>
            <value>
            The event the entity is scheduled for; or a null reference if the entity is not
            scheduled for an event.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Entity.ResourceRequest">
            <summary>
            Gets or sets the resource request the entity is making.
            </summary>
            <value>
            The resource request the entity is making.
            </value>
        </member>
        <member name="P:Simphony.Simulation.Entity.SuspendCount">
            <summary>
            Gets or sets the number of times the entity has been suspended.
            </summary>
            <value>
            The number of times the entity has been suspended.
            </value>
        </member>
        <member name="M:Simphony.Simulation.Entity.Clone">
            <summary>
            Creates a clone of the current entity.
            </summary>
            <returns>
            A clone of the current entity.
            </returns>
            <remarks>
            The default behaviour is to create a shallow copy of the current entity.
            Custom entities can override this behaviour by taking the entity returned
            by the base class method and modifying it as appropriate.
            </remarks>
        </member>
        <member name="M:Simphony.Simulation.Entity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.Entity.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.Entity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.Entity.AddResource(Simphony.Simulation.Resource,System.Int32)">
            <summary>
            Adds a resource to the list of resources owned by the entity.
            </summary>
            <param name="resource">
            The resource to add.
            </param>
            <param name="quantity">
            The number of servers to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified resource is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified quantity is negative.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Entity.ExceptionIfNotScheduled">
            <summary>
            Throws an exception if the entity is not scheduled for an event.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is not scheduled.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Entity.ExceptionIfNotSuspended">
            <summary>
            Throws an exception if the entity is not suspended.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is not suspended.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Entity.ExceptionIfQueued">
            <summary>
            Throws an exception if the entity has been queued in a waiting file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is queued in a waiting file.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Entity.ExceptionIfScheduled">
            <summary>
            Throws an exception if the entity is scheduled for an event.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified entity is scheduled.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.Entity.RemoveResource(Simphony.Simulation.Resource,System.Int32)">
            <summary>
            Removes a resource from the list of resources owned by the entity.
            </summary>
            <param name="resource">
            The resource to remove.
            </param>
            <param name="quantity">
            The number of servers to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified resource is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified quantity is negative.
            </exception>
        </member>
        <member name="T:Simphony.Simulation.IModel">
            <summary>
            Interface to be implemented by discrete event simulation models.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.IModel.Scenarios">
            <summary>
            Gets a read-only collection containing the scenarios to be simulated.
            </summary>
            <value>
            A read-only collection containing the scenarios to be simulated.
            </value>
        </member>
        <member name="M:Simphony.Simulation.IModel.FinalizeModel">
            <summary>
            Finalizes the model after simulation.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.IModel.InitializeModel">
            <summary>
            Initializes the model prior to simulation.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.BasicDiscreteEventEngine">
            <summary>
            Implements a basic discrete event simulation engine that provides support for only a single
            scenario.
            </summary>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicDiscreteEventEngine"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Simulation.BasicDiscreteEventEngine.CurrentEntity">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicDiscreteEventEngine.IsPaused">
            <summary>
            Gets a value indicating whether the simulation engine has been paused.
            </summary>
            <value>
            True if the simulation engine has been paused; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDiscreteEventEngine.IsSimulating">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicDiscreteEventEngine.ProcessedEventCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicDiscreteEventEngine.ScheduledEventCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicDiscreteEventEngine.TimeNext">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Simulation.BasicDiscreteEventEngine.TimeNow">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.AlterServers(Simphony.Simulation.Resource,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.CancelEvent(Simphony.Simulation.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.DequeueEntity``1(Simphony.Simulation.WaitingFile)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.DequeueEntity``1(Simphony.Simulation.WaitingFile,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.EnqueueEntity``1(``0,Simphony.Simulation.WaitingFile)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.EnqueueEntity``1(``0,Simphony.Simulation.WaitingFile,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.FinalizeRun(System.Int32)">
            <summary>
            Finalizes the engine after simulation of the specified run.
            </summary>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
            <exception cref="T:Simphony.Simulation.RunAlreadyFinalizedException">
            Thrown if the run has already been finalized.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.GetEventHandler``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.GetTimeRemaining(Simphony.Simulation.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.GetWeather(Simphony.Simulation.WeatherParameters)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.Halt">
            <summary>
            Halts the simulation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the simulation engine is not simulating.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.InitializeRun(System.Int32)">
            <summary>
            Initializes the engine in preparation for the specified run.
            </summary>
            <param name="runIndex">
            The zero-based index of the run.
            </param>
            <exception cref="T:Simphony.Simulation.RunAlreadyInitializedException">
            Thrown if the run has already been initialized.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.Pause">
            <summary>
            Pauses simulation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the simulation engine is not simulating.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.PollResource(Simphony.Simulation.Resource)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.PreemptResource``1(``0,Simphony.Simulation.Resource,System.Action{``0},Simphony.Simulation.WaitingFile,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.ReleaseResource``1(``0,System.Collections.Generic.IEnumerable{Simphony.Simulation.ResourceQuantityPair})">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.ReleaseResource``1(``0,Simphony.Simulation.Resource,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.ReleaseResource``1(``0,Simphony.Simulation.ResourceQuantityPair)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.RequestResource``1(``0,System.Collections.Generic.IEnumerable{Simphony.Simulation.ResourceQuantityPair},System.Action{``0},Simphony.Simulation.WaitingFile)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.RequestResource``1(``0,System.Collections.Generic.IEnumerable{Simphony.Simulation.ResourceQuantityPair},System.Action{``0},Simphony.Simulation.WaitingFile,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.RequestResource``1(``0,Simphony.Simulation.IResourceRequirement,System.Action{``0},Simphony.Simulation.WaitingFile)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.RequestResource``1(``0,Simphony.Simulation.IResourceRequirement,System.Action{``0},Simphony.Simulation.WaitingFile,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.RequestResource``1(``0,Simphony.Simulation.Resource,System.Int32,System.Action{``0},Simphony.Simulation.WaitingFile)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.RequestResource``1(``0,Simphony.Simulation.Resource,System.Int32,System.Action{``0},Simphony.Simulation.WaitingFile,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.Resume">
            <summary>
            Resumes simulation after it has been paused.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the simulation engine is not simulating.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.ResumeEvent(Simphony.Simulation.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.ScheduleEvent``1(``0,System.Action{``0},System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.ScheduleEvent``1(``0,System.Action{``0},System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.ScheduleEvent``1(``0,System.Action{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.Simulate">
            <summary>
            Starts simulation at the current simulation time and continues simulating until there are
            no scheduled events or the simulation is halted.
            </summary>
            <returns>
            The reason simulation terminated.
            </returns>
            <exception cref="T:Simphony.Simulation.RunNotInitializedException">
            Thrown if the run hasn't been initialized.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.Simulate(System.Double)">
            <summary>
            Starts simulation at the current simulation time and continues simulating until there are
            no scheduled events, a specified halt time is reached, or the simulation is halted.
            </summary>
            <param name="haltTime">
            The time at which simulation should stop; or double.PositiveInfinity if simulation should
            not be constrained by simulation time.
            </param>
            <returns>
            The reason simulation terminated.
            </returns>
            <exception cref="T:Simphony.Simulation.RunNotInitializedException">
            Thrown if the run hasn't been initialized.
            </exception>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.SubscribeCalendar``1(``0,Simphony.Simulation.Calendar,System.Action{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.SuspendEvent(Simphony.Simulation.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.UnsubscribeCalendar``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.PollWaitingFile(Simphony.Simulation.WaitingFile)">
            <summary>
            Polls a waiting file to see if any of the queued resource requests can be fulfilled.
            </summary>
            <param name="file">
            The waiting file.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified waiting file is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.Simulation.BasicDiscreteEventEngine.Event`1">
            <summary>
            Encapsulates an event in the discrete event model.
            </summary>
            <typeparam name="T">
            The type of entity.
            </typeparam>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.Event`1.#ctor(`0,System.Action{`0},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicDiscreteEventEngine.Event`1"/> class.
            </summary>
            <param name="entity">
            The entity associated with the event.
            </param>
            <param name="handler">
            The handler to call when the event occurs.
            </param>
            <param name="time">
            The simulation time at which the event is scheduled.
            </param>
        </member>
        <member name="P:Simphony.Simulation.BasicDiscreteEventEngine.Event`1.Entity">
            <summary>
            Gets the entity associated with the event.
            </summary>
            <value>
            The entity associated with the event.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDiscreteEventEngine.Event`1.Handler">
            <summary>
            Gets the handler associated with the event.
            </summary>
            <value>
            The handler associated with the event.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDiscreteEventEngine.Event`1.Time">
            <summary>
            Gets or sets the time of the event.
            </summary>
            <value>
            If the event is scheduled, the absolute simulation time of the event; if the
            event is suspended, the time remaining in the event.
            </value>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.Event`1.Dispatch">
            <summary>
            Dispatches the event for processing.
            </summary>
        </member>
        <member name="T:Simphony.Simulation.BasicDiscreteEventEngine.ResourceRequest`1">
            <summary>
            Represents a pending resource request.
            </summary>
            <typeparam name="T">
            The type of entity making the request.
            </typeparam>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.ResourceRequest`1.#ctor(Simphony.Simulation.IDiscreteEventEngine,`0,System.Double,Simphony.Simulation.IResourceRequirement,System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Simulation.BasicDiscreteEventEngine.ResourceRequest`1"/> class.
            </summary>
            <param name="engine">
            The discrete event simulation engine associated with the request.
            </param>
            <param name="entity">
            The entity requesting the resources.
            </param>
            <param name="priority">
            The priority of the request.
            </param>
            <param name="requirements">
            The resources required.
            </param>
            <param name="handler">
            The handler to call when the resources are captured.
            </param>
        </member>
        <member name="P:Simphony.Simulation.BasicDiscreteEventEngine.ResourceRequest`1.Entity">
            <summary>
            Gets the entity making the request.
            </summary>
            <value>
            The entity making the request.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDiscreteEventEngine.ResourceRequest`1.Priority">
            <summary>
            Gets the priority of the request.
            </summary>
            <value>
            The priority of the request.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDiscreteEventEngine.ResourceRequest`1.Requirements">
            <summary>
            Gets the resources required.
            </summary>
            <value>
            The resources required.
            </value>
        </member>
        <member name="P:Simphony.Simulation.BasicDiscreteEventEngine.ResourceRequest`1.Time">
            <summary>
            Gets the simulation time at which the request was made.
            </summary>
            <value>
            The simulation time at which the request was made.
            </value>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.ResourceRequest`1.Check">
            <summary>
            Checks to see if the required resources are available.
            </summary>
            <returns>
            A null reference if the required resources are not currently available; otherwise an
            IList of ResourceQuantityPairs specifying the resources desired.
            </returns>
        </member>
        <member name="M:Simphony.Simulation.BasicDiscreteEventEngine.ResourceRequest`1.Fulfill(System.Collections.Generic.IList{Simphony.Simulation.ResourceQuantityPair})">
            <summary>
            Called by the framework after the resource request has been fulfilled.
            </summary>
            <param name="resources">
            An list of ResourceQuantityPairs specifying the resources that were captured.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified list is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.CollectionExtensions">
            <summary>
            Extension methods for the System.Collections namespace.
            </summary>
        </member>
        <member name="M:Simphony.CollectionExtensions.Any(System.Collections.IEnumerable)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">
            The <see cref="T:System.Collections.IEnumerable"/> to check for emptiness.
            </param>
            <returns>
            True if the source sequence contains any elements; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.Collections.CalculatedCollection`1">
            <summary>
            Abstract base class for collections whose items are calculated at the time
            of retrieval.
            </summary>
            <typeparam name="T">
            The type of elements in the collection.
            </typeparam>
        </member>
        <member name="E:Simphony.Collections.CalculatedCollection`1.ListChanged">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.AllowEdit">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.AllowNew">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.AllowRemove">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.IsSorted">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.SortDirection">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.SortProperty">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.SupportsChangeNotification">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.SupportsSearching">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.SupportsSorting">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.System#Collections#IList#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.AddNew">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.System#Collections#IList#Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.System#Collections#IList#Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.System#Collections#IList#Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.System#Collections#IList#Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.Refresh">
            <summary>
            Refreshes all the items in the list.
            </summary>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.Refresh(System.Int32)">
            <summary>
            Refreshes a specified item in the list.
            </summary>
            <param name="index">
            The index of the item to refresh.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.RemoveSort">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.GetCount">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <returns>
            The number of elements contained in the collection.
            </returns>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.GetEditSupported">
            <summary>
            Gets a value indicating whether editing of items in the collection by
            bound controls is supported.
            </summary>
            <returns>
            True if items in the collection can be edited; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.GetItem(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the element to get.
            </param>
            <returns>
            The element at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Simphony.Collections.CalculatedCollection`1.ListChanged"/> event.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.Enumerator.#ctor(Simphony.Collections.CalculatedCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.CalculatedCollection`1.Enumerator"/> class.
            </summary>
            <param name="list">
            The list to be enumerated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified list is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.CalculatedCollection`1.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.CalculatedCollection`1.Enumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Collections.ChildCollection`2">
            <summary>
            A collection that maintains a parent-child relationship.
            </summary>
            <typeparam name="TParent">
            The type of parent.
            </typeparam>
            <typeparam name="TChild">
            The type of child.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.ChildCollection`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ChildCollection`2"/> class.
            </summary>
            <param name="parent">
            The parent to which the children will belong.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified parent is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ChildCollection`2.#ctor(`0,System.Collections.Generic.IList{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ChildCollection`2"/> class.
            </summary>
            <param name="parent">
            The parent to which the children will belong.
            </param>
            <param name="list">
            A list of items to be contained in the collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified parent or the specified list is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ChildCollection`2.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ChildCollection`2.InsertItem(System.Int32,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ChildCollection`2.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ChildCollection`2.SetItem(System.Int32,`1)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Collections.DefaultingDictionary`2">
            <summary>
            A dictionary that returns the default value if a key is not present instead of throwing
            a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.DefaultingDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.DefaultingDictionary`2"/>
            class that is empty, has the default initial capacity, and uses the default equality
            comparer for the key type.
            </summary>
        </member>
        <member name="M:Simphony.Collections.DefaultingDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.DefaultingDictionary`2"/>
            class that contains elements copied from the specified dictionary and uses the default
            equality comparer for
            the key type.
            </summary>
            <param name="dictionary">
            The dictionary whose elements are copied to the new dictionary.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified dictionary is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified dictionary contains one or more duplicate keys.
            </exception>
        </member>
        <member name="M:Simphony.Collections.DefaultingDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.DefaultingDictionary`2"/>
            class that contains elements copied from the specified dictionary and uses the specified
            comparer.
            </summary>
            <param name="dictionary">
            The dictionary whose elements are copied to the new dictionary.
            </param>
            <param name="comparer">
            The comparer implementation to use when comparing keys, or a null reference to use the
            default comparer for the type of the key.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified dictionary is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified dictionary contains one or more duplicate keys.
            </exception>
        </member>
        <member name="M:Simphony.Collections.DefaultingDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.DefaultingDictionary`2"/>
            class that that is empty, has the default initial capacity, and uses the specified comparer.
            </summary>
            <param name="comparer">
            The comparer implementation to use when comparing keys, or a null reference to use the
            default comparer for the type of the key.
            </param>
        </member>
        <member name="M:Simphony.Collections.DefaultingDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.DefaultingDictionary`2"/>
            class that that is empty, has the specified initial capacity, and uses the default
            equality comparer for the key type.
            </summary>
            <param name="capacity">
            The initial number of elements that the dictionary can contain.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified capacity is less than zero.
            </exception>
        </member>
        <member name="M:Simphony.Collections.DefaultingDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.DefaultingDictionary`2"/>
            class that that is empty, has the specified initial capacity, and uses the specified comparer.
            </summary>
            <param name="capacity">
            The initial number of elements that the dictionary can contain.
            </param>
            <param name="comparer">
            The comparer implementation to use when comparing keys, or a null reference to use the
            default comparer for the type of the key.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified capacity is less than zero.
            </exception>
        </member>
        <member name="M:Simphony.Collections.DefaultingDictionary`2.GetItem(`0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">
            The key of the element to get.
            </param>
            <returns>
            The value associated with the key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified key is a null reference.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if the specified key does not exist in the collection.
            </exception>
        </member>
        <member name="T:Simphony.Collections.DisposableNamedObjectBase">
            <summary>
            An abstract base class that provides an implementation of both the <see cref="T:Simphony.Collections.INamedObject"/>
            and <see cref="T:System.IDisposable"/> interfaces.
            </summary>
        </member>
        <member name="M:Simphony.Collections.DisposableNamedObjectBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.DisposableNamedObjectBase"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Collections.DisposableNamedObjectBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.DisposableNamedObjectBase"/> class with a
            specified name.
            </summary>
            <param name="name">
            The name of the object.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the supplied name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the supplied name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.Collections.DisposableNamedObjectBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Simphony.Collections.DisposableNamedObjectBase"/> class.
            </summary>
        </member>
        <member name="E:Simphony.Collections.DisposableNamedObjectBase.Disposed">
            <inheritdoc cref="E:Simphony.DisposableObjectBase.Disposed"/>
        </member>
        <member name="P:Simphony.Collections.DisposableNamedObjectBase.IsDisposed">
            <inheritdoc cref="P:Simphony.DisposableObjectBase.IsDisposed"/>
        </member>
        <member name="M:Simphony.Collections.DisposableNamedObjectBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DisposableNamedObjectBase.Dispose(System.Boolean)">
            <inheritdoc cref="M:Simphony.DisposableObjectBase.Dispose(System.Boolean)"/>
        </member>
        <member name="M:Simphony.Collections.DisposableNamedObjectBase.ExceptionIfDisposed">
            <inheritdoc cref="M:Simphony.DisposableObjectBase.ExceptionIfDisposed"/>
        </member>
        <member name="T:Simphony.Collections.FilteredBindingList`1">
            <summary>
            Wraps and filters an <see cref="T:System.Collections.Generic.IList`1"/> using a <see cref="T:System.Predicate`1"/>.
            </summary>
            <typeparam name="T">
            The type of elements in the collection.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.FilteredBindingList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.FilteredBindingList`1"/> class.
            </summary>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> to be wrapped and filtered.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:System.Collections.Generic.IList`1"/> is a null reference.
            </exception>
        </member>
        <member name="E:Simphony.Collections.FilteredBindingList`1.ListChanged">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.FilteredBindingList`1.AllowEdit">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.FilteredBindingList`1.AllowNew">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.FilteredBindingList`1.AllowRemove">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.FilteredBindingList`1.Filter">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.FilteredBindingList`1.IsSorted">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.FilteredBindingList`1.SortDirection">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.FilteredBindingList`1.SortProperty">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.FilteredBindingList`1.SupportsChangeNotification">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.FilteredBindingList`1.SupportsSearching">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.FilteredBindingList`1.SupportsSorting">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredBindingList`1.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredBindingList`1.AddNew">
            <inheritdoc cref="M:System.ComponentModel.IBindingList.AddNew"/>
        </member>
        <member name="M:Simphony.Collections.FilteredBindingList`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredBindingList`1.CancelNew(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredBindingList`1.EndNew(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredBindingList`1.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredBindingList`1.System#ComponentModel#IBindingList#AddNew">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredBindingList`1.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredBindingList`1.RemoveSort">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredBindingList`1.ResetBindings">
            <summary>
            Raises a <see cref="E:Simphony.Collections.FilteredBindingList`1.ListChanged"/> event of type <see cref="F:System.ComponentModel.ListChangedType.Reset"/>.
            </summary>
        </member>
        <member name="M:Simphony.Collections.FilteredBindingList`1.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredBindingList`1.CreateNew">
            <summary>
            Called by the <see cref="M:Simphony.Collections.FilteredBindingList`1.AddNew"/> method to create a new item.
            </summary>
            <returns>
            The item that was created.
            </returns>
        </member>
        <member name="M:Simphony.Collections.FilteredBindingList`1.InsertItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredBindingList`1.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredBindingList`1.SetItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Collections.FilteredList`1">
            <summary>
            Wraps and filters an <see cref="T:System.Collections.Generic.IList`1"/> using a <see cref="T:System.Predicate`1"/>.
            </summary>
            <typeparam name="T">
            The type of elements in the collection.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.FilteredList`1"/> class.
            </summary>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> to be wrapped and filtered.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:System.Collections.Generic.IList`1"/> is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Collections.FilteredList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.FilteredList`1.Filter">
            <summary>
            Gets or sets the filter to apply to the list.
            </summary>
            <value>
            A <see cref="T:System.Predicate`1"/> that defines the filter.
            </value>
        </member>
        <member name="P:Simphony.Collections.FilteredList`1.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.FilteredList`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.FilteredList`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.FilteredList`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.FilteredList`1.Items">
            <summary>
            Gets the underlying <see cref="T:System.Collections.Generic.IList`1"/> being filtered.
            </summary>
            <value>
            The underlying <see cref="T:System.Collections.Generic.IList`1"/> being filtered.
            </value>
        </member>
        <member name="P:Simphony.Collections.FilteredList`1.System#Collections#IList#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.FilteredList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.System#Collections#IList#Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.System#Collections#IList#Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.System#Collections#IList#Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.ClearItems">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which the element should be inserted.
            </param>
            <param name="item">
            The item to insert.
            </param>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the element to Removes.
            </param>
        </member>
        <member name="M:Simphony.Collections.FilteredList`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the element to replace.
            </param>
            <param name="value">
            The new value for the element at the specified index.
            </param>
        </member>
        <member name="T:Simphony.Collections.IChild`1">
            <summary>
            Implemented by a class that represents the child in a parent-child relationship.
            </summary>
            <typeparam name="TParent">
            The type of parent.
            </typeparam>
        </member>
        <member name="P:Simphony.Collections.IChild`1.Index">
            <summary>
            Gets or sets the zero-based index of the current object in the containing collection.
            </summary>
            <value>
            The zero-based index of the current object in the containing collection; or -1 if the
            current object is not contained in a collection.
            </value>
        </member>
        <member name="P:Simphony.Collections.IChild`1.Parent">
            <summary>
            Gets or sets the parent of the current object.
            </summary>
            <value>
            The parent of the current object; or a null reference if the current object does not
            have a parent.
            </value>
        </member>
        <member name="T:Simphony.Collections.INotifyDictionaryChanged`2">
            <summary>
            Notifies listeners of dynamic changes, such as when items get added and removed or the whole
            dictionary is refreshed.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
        </member>
        <member name="E:Simphony.Collections.INotifyDictionaryChanged`2.DictionaryChanged">
            <summary>
            Occurs when the dictionary changes.
            </summary>
        </member>
        <member name="T:Simphony.Collections.IParent`1">
            <summary>
            Implemented by a class that represents the parent in a parent-child relationship.
            </summary>
            <typeparam name="TChild">
            The type of child.
            </typeparam>
        </member>
        <member name="P:Simphony.Collections.IParent`1.Children">
            <summary>
            Gets a list containing the children of the current object.
            </summary>
            <value>
            A list containing the children of the current object.
            </value>
        </member>
        <member name="T:Simphony.Collections.ISimpleNamedObject">
            <summary>
            Interface implemented by named objects.
            </summary>
        </member>
        <member name="P:Simphony.Collections.ISimpleNamedObject.Name">
            <summary>
            Gets or sets the name of the object.
            </summary>
            <value>
            The name of the object.
            </value>
            <exception cref="T:System.ArgumentNullException">
            Thrown if an attempt is made to set the name to a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if an attempt is made to set the name to an empty string.
            </exception>
        </member>
        <member name="T:Simphony.Collections.NotifyDictionaryChangedEventArgs`2">
            <summary>
            Provides data for the <see cref="E:Simphony.Collections.INotifyDictionaryChanged`2.DictionaryChanged"/> event.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.NotifyDictionaryChangedEventArgs`2.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NotifyDictionaryChangedEventArgs`2"/>
            class that describes a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> change.
            </summary>
            <param name="action">
            The action that caused the event.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified <paramref name="action"/> is not <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/>.
            </exception>
        </member>
        <member name="M:Simphony.Collections.NotifyDictionaryChangedEventArgs`2.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,`1,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NotifyDictionaryChangedEventArgs`2"/>
            class that describes a one-item change.
            </summary>
            <param name="action">
            The action that caused the event.
            </param>
            <param name="changedValue">
            The value that is affected by the change.
            </param>
            <param name="key">
            The key that is affected by the change.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <paramref name="key"/> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified <paramref name="action"/> is not one of
            <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"/> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"/>.
            </exception>
        </member>
        <member name="M:Simphony.Collections.NotifyDictionaryChangedEventArgs`2.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,`1,`1,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NotifyDictionaryChangedEventArgs`2"/>
            class that describes a one-item <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"/> change.
            </summary>
            <param name="action">
            The action that caused the event.
            </param>
            <param name="newValue">
            The new value that is replacing the original value.
            </param>
            <param name="oldValue">
            The original value that is replaced.
            </param>
            <param name="key">
            The key that is affected by the change.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <paramref name="key"/> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified <paramref name="action"/> is not <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"/>.
            </exception>
        </member>
        <member name="P:Simphony.Collections.NotifyDictionaryChangedEventArgs`2.Action">
            <summary>
            Gets the action that caused the event.
            </summary>
            <value>
            The action that caused the event.
            </value>
        </member>
        <member name="P:Simphony.Collections.NotifyDictionaryChangedEventArgs`2.Key">
            <summary>
            Gets the key involved in the event.
            </summary>
            <value>
            The key involved in the event.
            </value>
        </member>
        <member name="P:Simphony.Collections.NotifyDictionaryChangedEventArgs`2.NewValue">
            <summary>
            Gets the new value involved in the event.
            </summary>
            <value>
            The new value involved in the event.
            </value>
        </member>
        <member name="P:Simphony.Collections.NotifyDictionaryChangedEventArgs`2.OldValue">
            <summary>
            Gets the old value involved in the event.
            </summary>
            <value>
            The old value involved in the event.
            </value>
        </member>
        <member name="T:Simphony.Collections.ObservableDictionary`2">
            <summary>
            Represents a dynamic dictionary that provides notifications when items get added or removed,
            or when the whole dictionary is refreshed.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.ObservableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ObservableDictionary`2"/>
            class that is empty, has the default initial capacity, and uses the default equality
            comparer for the key type.
            </summary>
        </member>
        <member name="M:Simphony.Collections.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ObservableDictionary`2"/>
            class that contains elements copied from the specified dictionary and uses the default
            equality comparer for the key type.
            </summary>
            <param name="dictionary">
            The dictionary whose elements are copied to the new dictionary.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified dictionary is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified dictionary contains one or more duplicate keys.
            </exception>
        </member>
        <member name="E:Simphony.Collections.ObservableDictionary`2.DictionaryChanged">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ObservableDictionary`2.AddItem(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ObservableDictionary`2.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ObservableDictionary`2.OnDictionaryChanged(Simphony.Collections.NotifyDictionaryChangedEventArgs{`0,`1})">
            <summary>
            Raises the <see cref="E:Simphony.Collections.ObservableDictionary`2.DictionaryChanged"/> event.
            </summary>
            <param name="e">
            The data associated with the event.
            </param>
        </member>
        <member name="M:Simphony.Collections.ObservableDictionary`2.RemoveItem(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ObservableDictionary`2.SetItem(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Collections.Set`1">
            <summary>
            A generic set type.
            </summary>
            <typeparam name="T">
            The type of elements in the set.
            </typeparam>
        </member>
        <member name="F:Simphony.Collections.Set`1.Empty">
            <summary>
            Represents the empty set. This field is read-only.
            </summary>
            <value>
            The empty set.
            </value>
        </member>
        <member name="M:Simphony.Collections.Set`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.Set`1"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Collections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.Set`1"/> class that contains elements copied
            from the specified collection and has sufficient capacity to accommodate the number of
            elements copied.
            </summary>
            <param name="collection">
            The collection whose elements are copied to the new set.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.Set`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.Set`1"/> class with a specified initial
            capacity.
            </summary>
            <param name="capacity">
            The number of elements that the new set can initially store.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified capacity is less than zero.
            </exception>
        </member>
        <member name="M:Simphony.Collections.Set`1.#ctor(Simphony.Collections.Set{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.Set`1"/> class that contains elements copied
            from the specified set and has sufficient capacity to accommodate the number of elements
            copied.
            </summary>
            <param name="set">
            The set whose elements are copied to the new set.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified set is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Collections.Set`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.Set`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.Set`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.Set`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.Set`1.op_LessThan(Simphony.Collections.Set{`0},Simphony.Collections.Set{`0})">
            <summary>
            Determines if the left-hand set is a strict subset of the right-hand set.
            </summary>
            <param name="left">
            The left-hand set.
            </param>
            <param name="right">
            The right-hand set.
            </param>
            <returns>
            True if the left-hand set is a strict subset of the right-hand set; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified sets is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.Set`1.op_LessThanOrEqual(Simphony.Collections.Set{`0},Simphony.Collections.Set{`0})">
            <summary>
            Determines if the left-hand set is a subset of the right-hand set.
            </summary>
            <param name="left">
            The left-hand set.
            </param>
            <param name="right">
            The right-hand set.
            </param>
            <returns>
            True if the left-hand set is a subset of the right-hand set; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified sets is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.Set`1.op_Subtraction(Simphony.Collections.Set{`0},Simphony.Collections.Set{`0})">
            <summary>
            Returns a set that is the set-theoretic difference of the left-hand set and the right-hand
            set.
            </summary>
            <param name="left">
            The left-hand set.
            </param>
            <param name="right">
            The right-hand set.
            </param>
            <returns>
            A set that is the set-theoretic difference of the left-hand set and the right-hand set.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified sets is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.Set`1.op_Inequality(Simphony.Collections.Set{`0},Simphony.Collections.Set{`0})">
            <summary>
            Determines if the left-hand set and the right-hand set are unequal.
            </summary>
            <param name="left">
            The left-hand set.
            </param>
            <param name="right">
            The right-hand set.
            </param>
            <returns>
            True if the left-hand set is unequal to the right-hand set; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Collections.Set`1.op_BitwiseAnd(Simphony.Collections.Set{`0},Simphony.Collections.Set{`0})">
            <summary>
            Returns a set that is the intersection of the left-hand set and the right-hand set.
            </summary>
            <param name="left">
            The left-hand set.
            </param>
            <param name="right">
            The right-hand set.
            </param>
            <returns>
            A set that is the intersection of the left-hand set and the right-hand set.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified sets is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.Set`1.op_ExclusiveOr(Simphony.Collections.Set{`0},Simphony.Collections.Set{`0})">
            <summary>
            Returns a set that is the symmetric difference of the left-hand set and the right-hand set.
            </summary>
            <param name="left">
            The left-hand set.
            </param>
            <param name="right">
            The right-hand set.
            </param>
            <returns>
            A set that is the symmetric difference of the left-hand set and the right-hand set.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified sets is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.Set`1.op_BitwiseOr(Simphony.Collections.Set{`0},Simphony.Collections.Set{`0})">
            <summary>
            Returns a set that is the union of the left-hand set and the right-hand set.
            </summary>
            <param name="left">
            The left-hand set.
            </param>
            <param name="right">
            The right-hand set.
            </param>
            <returns>
            A set that is the union of the left-hand set and the right-hand set.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified sets is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.Set`1.op_Equality(Simphony.Collections.Set{`0},Simphony.Collections.Set{`0})">
            <summary>
            Determines if the left-hand set and the right-hand set are equal.
            </summary>
            <param name="left">
            The left-hand set.
            </param>
            <param name="right">
            The right-hand set.
            </param>
            <returns>
            True if the left-hand set is equal to the right-hand set; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Collections.Set`1.op_GreaterThan(Simphony.Collections.Set{`0},Simphony.Collections.Set{`0})">
            <summary>
            Determines if the right-hand set is a strict subset of the left-hand set.
            </summary>
            <param name="left">
            The left-hand set.
            </param>
            <param name="right">
            The right-hand set.
            </param>
            <returns>
            True if the right-hand set is a strict subset of the left-hand set; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified sets is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.Set`1.op_GreaterThanOrEqual(Simphony.Collections.Set{`0},Simphony.Collections.Set{`0})">
            <summary>
            Determines if the right-hand set is a subset of the left-hand set.
            </summary>
            <param name="left">
            The left-hand set.
            </param>
            <param name="right">
            The right-hand set.
            </param>
            <returns>
            True if the right-hand set is a subset of the left-hand set; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified sets is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.Set`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.Set`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of elements to the set.
            </summary>
            <param name="range">
            The elements to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.Set`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.Set`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.Set`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.Set`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.Set`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.Set`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.Set`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.Set`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.Set`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Collections.Set`1.DummyType">
            <summary>
            An empty value-type to act as a value in the dictionary defining the set.
            </summary>
        </member>
        <member name="T:Simphony.Collections.SortableBindingList`1">
            <summary>
            A binding list that supports sorting.
            </summary>
            <typeparam name="T">
            The type of elements in the list.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.SortableBindingList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.SortableBindingList`1"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Collections.SortableBindingList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.SortableBindingList`1"/> class.
            </summary>
            <param name="list">
            A list of items to be contained in the binding list.
            </param>
        </member>
        <member name="P:Simphony.Collections.SortableBindingList`1.IsSortedCore">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.SortableBindingList`1.SortDirectionCore">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.SortableBindingList`1.SortPropertyCore">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.SortableBindingList`1.SupportsSortingCore">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.SortableBindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.SortableBindingList`1.RemoveSortCore">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Collections.PriorityValuePairComparer`2">
            <summary>
            A comparer that compares priority/value pairs.
            </summary>
            <typeparam name="TPriority">
            The type used to prioritize the queue/list.
            </typeparam>
            <typeparam name="TValue">
            The type of object to store in the queue/list.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.PriorityValuePairComparer`2.#ctor(System.ComponentModel.ListSortDirection)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Simphony.Collections.PriorityValuePairComparer`2"/> class.
            </summary>
            <param name="direction">
            A value indicating the direction in which the comparer sorts.
            </param>
        </member>
        <member name="M:Simphony.Collections.PriorityValuePairComparer`2.Compare(Simphony.Collections.PriorityValuePair{`0,`1},Simphony.Collections.PriorityValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Collections.CollectionChangeEventArgs`1">
            <summary>
            Provides data for events raised by a managed collection.
            </summary>
            <typeparam name="T">
            The type of elements in the collection.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.CollectionChangeEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.CollectionChangeEventArgs`1"/> class.
            </summary>
            <param name="item">
            The element involved with the event.
            </param>
        </member>
        <member name="P:Simphony.Collections.CollectionChangeEventArgs`1.Item">
            <summary>
            Gets item involved with the event.
            </summary>
            <value>
            The item involved with the event.
            </value>
        </member>
        <member name="T:Simphony.Collections.IManagedCollection`1">
            <summary>
            Interface implemented by a managed collection.
            </summary>
            <typeparam name="T">
            The type of object stored in the collection.
            </typeparam>
        </member>
        <member name="E:Simphony.Collections.IManagedCollection`1.AddedItem">
            <summary>
            Fired after an element has been added to the collection.
            </summary>
        </member>
        <member name="E:Simphony.Collections.IManagedCollection`1.AddingItem">
            <summary>
            Fired before an element has been added to the collection.
            </summary>
        </member>
        <member name="E:Simphony.Collections.IManagedCollection`1.ClearedItems">
            <summary>
            Fired after the collection has been cleared.
            </summary>
        </member>
        <member name="E:Simphony.Collections.IManagedCollection`1.ClearingItems">
            <summary>
            Fired before the collection has been cleared.
            </summary>
        </member>
        <member name="E:Simphony.Collections.IManagedCollection`1.RemovedItem">
            <summary>
            Fired after an element has been removed from the collection.
            </summary>
        </member>
        <member name="E:Simphony.Collections.IManagedCollection`1.RemovingItem">
            <summary>
            Fired before an element has been removed from the collection.
            </summary>
        </member>
        <member name="T:Simphony.Collections.DictionaryChangeEventArgs`2">
            <summary>
            Provides data for events raised by a managed dictionary.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.DictionaryChangeEventArgs`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.DictionaryChangeEventArgs`2"/> class.
            </summary>
            <param name="key">
            The zero-based key on the element involved with the event.
            </param>
            <param name="value">
            The element involved with the event.
            </param>
        </member>
        <member name="P:Simphony.Collections.DictionaryChangeEventArgs`2.Key">
            <summary>
            Gets the zero-based key on the element involved with the event.
            </summary>
            <value>
            The zero-based key on the element involved with the event.
            </value>
        </member>
        <member name="P:Simphony.Collections.DictionaryChangeEventArgs`2.Value">
            <summary>
            Gets value involved with the event.
            </summary>
            <value>
            The value involved with the event.
            </value>
        </member>
        <member name="T:Simphony.Collections.DictionaryBase`2">
            <summary>
            Provides the abstract base class for a generic dictionary.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.DictionaryBase`2"/> class that is
            empty, has the default initial capacity, and uses the default equality comparer for the key
            type.
            </summary>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.DictionaryBase`2"/> class that
            contains elements copied from the specified dictionary and uses the default equality
            comparer for the key type.
            </summary>
            <param name="dictionary">
            The dictionary whose elements are copied to the new dictionary.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified dictionary is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified dictionary contains one or more duplicate keys.
            </exception>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.DictionaryBase`2"/> class that
            contains elements copied from the specified dictionary and uses the specified comparer.
            </summary>
            <param name="dictionary">
            The dictionary whose elements are copied to the new dictionary.
            </param>
            <param name="comparer">
            The comparer implementation to use when comparing keys, or a null reference to use the
            default comparer for the type of the key.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified dictionary is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified dictionary contains one or more duplicate keys.
            </exception>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.DictionaryBase`2"/> class that
            that is empty, has the default initial capacity, and uses the specified comparer.
            </summary>
            <param name="comparer">
            The comparer implementation to use when comparing keys, or a null reference to use the
            default comparer for the type of the key.
            </param>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.DictionaryBase`2"/> class that
            that is empty, has the specified initial capacity, and uses the default equality comparer
            for the key type.
            </summary>
            <param name="capacity">
            The initial number of elements that the dictionary can contain.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified capacity is less than zero.
            </exception>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.DictionaryBase`2"/> class that
            that is empty, has the specified initial capacity, and uses the specified comparer.
            </summary>
            <param name="capacity">
            The initial number of elements that the dictionary can contain.
            </param>
            <param name="comparer">
            The comparer implementation to use when comparing keys, or a null reference to use the
            default comparer for the type of the key.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified capacity is less than zero.
            </exception>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.DictionaryBase`2"/> class as a
            wrapper for the specified dictionary.
            </summary>
            <param name="dictionary">
            The dictionary to be wrapped by the new dictionary.
            </param>
        </member>
        <member name="P:Simphony.Collections.DictionaryBase`2.Comparer">
            <summary>
            Gets the comparer that is used to determine equality of keys for the dictionary.
            </summary>
            <value>
            The comparer that is used to determine equality of keys for the dictionary.
            </value>
        </member>
        <member name="P:Simphony.Collections.DictionaryBase`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.DictionaryBase`2.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.DictionaryBase`2.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.DictionaryBase`2.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.DictionaryBase`2.System#Collections#IDictionary#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.DictionaryBase`2.System#Collections#IDictionary#Values">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.DictionaryBase`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.DictionaryBase`2.Keys">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.DictionaryBase`2.Values">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.DictionaryBase`2.System#Collections#IDictionary#Item(System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.DictionaryBase`2.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.Add(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.AsReadOnly">
            <summary>
            Gets a read-only wrapper for the current dictionary.
            </summary>
            <returns>
            A read-only wrapper for the current dictionary.
            </returns>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.ContainsValue(`1)">
            <summary>
            Determines whether the dictionary contains an element with the specified value.
            </summary>
            <param name="value">
            The value in question.
            </param>
            <returns>
            True if the dictionary contains an element with the specified value; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.System#Collections#IDictionary#Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.System#Collections#IDictionary#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.System#Collections#IDictionary#Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.AddItem(`0,`1)">
            <summary>
            Adds the specified key/value pair to the dictionary.
            </summary>
            <param name="key">
            The key of the element to add.
            </param>
            <param name="value">
            The value of the element to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified key is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if an element with the same key already exists in the dictionary.
            </exception>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.ClearItems">
            <summary>
            Removes all key/value pairs from the dictionary.
            </summary>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.GetItem(`0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">
            The key of the element to get.
            </param>
            <returns>
            The value associated with the key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified key is a null reference.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if the specified key does not exist in the collection.
            </exception>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.RemoveItem(`0)">
            <summary>
            Removes the specified key/value pair from the dictionary.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
            <returns>
            True if the element is successfully found and removed; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified key is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.DictionaryBase`2.SetItem(`0,`1)">
            <summary>
            Replaces the specified key/value pair in the dictionary.
            </summary>
            <param name="key">
            The key of the element to replace.
            </param>
            <param name="value">
            The value of the element to replace.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified key is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.Collections.Extensions">
            <summary>
            Extension methods for the Simphony.Collections namespace.
            </summary>
        </member>
        <member name="M:Simphony.Collections.Extensions.AddNew``1(Simphony.Collections.INamedObjectList{``0},System.String)">
            <summary>
            Creates and adds a new named object with a specified name to a named object list.
            </summary>
            <typeparam name="T">
            The type of object to add.
            </typeparam>
            <param name="list">
            The list to which a new named object should be added.
            </param>
            <param name="name">
            The name of the new named object.
            </param>
            <returns>
            The named object that was created and added to the list.
            </returns>
            <exception cref="T:Simphony.Collections.NameNotUniqueException">
            Thrown if a named object with the same name already exists in the list.
            </exception>
        </member>
        <member name="M:Simphony.Collections.Extensions.GenerateUniqueName``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generates a unique name for a named object.
            </summary>
            <typeparam name="T">
            The type of named object.
            </typeparam>
            <param name="obj">
            The named object for which a name is to be generated.
            </param>
            <param name="sequence">
            A sequence of named objects with respect to which the new name must be unique.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.Collections.IManagedDictionary`2">
            <summary>
            Interface implemented by a managed dictionary.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
        </member>
        <member name="E:Simphony.Collections.IManagedDictionary`2.AddedItem">
            <summary>
            Fired after an item has been added to the dictionary.
            </summary>
        </member>
        <member name="E:Simphony.Collections.IManagedDictionary`2.AddingItem">
            <summary>
            Fired before an item has been added to the dictionary.
            </summary>
        </member>
        <member name="E:Simphony.Collections.IManagedDictionary`2.ClearedItems">
            <summary>
            Fired after the dictionary has been cleared.
            </summary>
        </member>
        <member name="E:Simphony.Collections.IManagedDictionary`2.ClearingItems">
            <summary>
            Fired before the list has been cleared.
            </summary>
        </member>
        <member name="E:Simphony.Collections.IManagedDictionary`2.RemovedItem">
            <summary>
            Fired after an item has been removed from the dictionary.
            </summary>
        </member>
        <member name="E:Simphony.Collections.IManagedDictionary`2.RemovingItem">
            <summary>
            Fired before an item has been removed from the dictionary.
            </summary>
        </member>
        <member name="E:Simphony.Collections.IManagedDictionary`2.ReplacedItem">
            <summary>
            Fired after an item in the dictionary has been replaced.
            </summary>
        </member>
        <member name="E:Simphony.Collections.IManagedDictionary`2.ReplacingItem">
            <summary>
            Fired before an item in the dictionary has been replaced.
            </summary>
        </member>
        <member name="T:Simphony.Collections.IManagedList`1">
            <summary>
            Interface implemented by a managed list.
            </summary>
            <typeparam name="T">
            The type of named object stored in the list.
            </typeparam>
        </member>
        <member name="E:Simphony.Collections.IManagedList`1.AddedItem">
            <summary>
            Fired after an element has been added/inserted into the list.
            </summary>
        </member>
        <member name="E:Simphony.Collections.IManagedList`1.AddingItem">
            <summary>
            Fired before an element has been added/inserted into the list.
            </summary>
        </member>
        <member name="E:Simphony.Collections.IManagedList`1.RemovedItem">
            <summary>
            Fired after an element has been removed from the list.
            </summary>
        </member>
        <member name="E:Simphony.Collections.IManagedList`1.RemovingItem">
            <summary>
            Fired before an element has been removed from the list.
            </summary>
        </member>
        <member name="T:Simphony.Collections.INamedObjectDictionary`2">
            <summary>
            Interface implemented by a dictionaries containing named objects.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
        </member>
        <member name="P:Simphony.Collections.INamedObjectDictionary`2.Item(System.String)">
            <summary>
            Gets the named object with the specified name.
            </summary>
            <param name="name">
            The name of the object to get.
            </param>
            <returns>
            The named object with the specified name.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:Simphony.Collections.NameNotFoundException">
            Thrown if an object with the specified name is not in the dictionary.
            </exception>
        </member>
        <member name="M:Simphony.Collections.INamedObjectDictionary`2.ContainsName(System.String)">
            <summary>
            Determines if the dictionary contains a named object with a specific name.
            </summary>
            <param name="name">
            The name in question.
            </param>
            <returns>
            True if the dictionary contains a named object with the specified name; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.Collections.INamedObjectDictionary`2.Remove(System.String)">
            <summary>
            Removes the named object with the specified name.
            </summary>
            <param name="name">
            The name in question.
            </param>
            <returns>
            True if an object with the specified name was successfully found and removed from the
            dictionary; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.Collections.INamedObjectDictionary`2.TryGetValue(System.String,`1@)">
            <summary>
            Gets the named object associated with the specified name.
            </summary>
            <param name="name">
            The name in question.
            </param>
            <param name="value">
            When this method returns, the named object associated with the specified name, if one is found;
            otherwise, the default value for the type of the value parameter. This parameter is passed
            uninitialized.
            </param>
            <returns>
            True if the dictionary contains a named object with the specified name; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="T:Simphony.Collections.INamedObjectList`1">
            <summary>
            Interface implemented by a list containing named objects.
            </summary>
            <typeparam name="T">
            The type of named object stored in the list.
            </typeparam>
        </member>
        <member name="P:Simphony.Collections.INamedObjectList`1.Item(System.Int32)">
            <summary>
            Gets the named object at the specified index.
            </summary>
            <param name="index">
            The index of the object to get.
            </param>
            <returns>
            The named object at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is not a valid index in the list.
            </exception>
        </member>
        <member name="P:Simphony.Collections.INamedObjectList`1.Item(System.String)">
            <summary>
            Gets the named object with the specified name.
            </summary>
            <param name="name">
            The name of the object to get.
            </param>
            <returns>
            The named object with the specified name.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:Simphony.Collections.NameNotFoundException">
            Thrown if an object with the specified name is not in the list.
            </exception>
        </member>
        <member name="M:Simphony.Collections.INamedObjectList`1.Contains(System.String)">
            <summary>
            Determines if the list contains a named object with a specific name.
            </summary>
            <param name="name">
            The name in question.
            </param>
            <returns>
            True if the list contains a named object with the specified name; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.Collections.INamedObjectList`1.GetItemOrDefault(System.String)">
            <summary>
            Gets the named object associated with the specified name if found; otherwise, the default
            value for the type of the item parameter.
            </summary>
            <param name="name">
            The name in question.
            </param>
            <returns>
            The named object associated with the specified name if found; otherwise, the default value
            for the type of the item parameter.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.Collections.INamedObjectList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific named object in the list.
            </summary>
            <param name="item">
            The named object in question.
            </param>
            <returns>
            The index of the named object if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Simphony.Collections.INamedObjectList`1.IndexOf(System.String)">
            <summary>
            Determines the index of the named object with the specified name.
            </summary>
            <param name="name">
            The name in question.
            </param>
            <returns>
            The index of the named object if found in the list; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.Collections.INamedObjectList`1.Remove(System.String)">
            <summary>
            Removes the named object with the specified name.
            </summary>
            <param name="name">
            The name in question.
            </param>
            <returns>
            True if an object with the specified name was successfully found and removed from the
            list; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.Collections.INamedObjectList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the named object at the specified index.
            </summary>
            <param name="index">
            The index in question.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is not a valid index in the list.
            </exception>
        </member>
        <member name="M:Simphony.Collections.INamedObjectList`1.TryGetItem(System.String,`0@)">
            <summary>
            Gets the named object associated with the specified name.
            </summary>
            <param name="name">
            The name in question.
            </param>
            <param name="item">
            When this method returns, the named object associated with the specified name, if one is
            found; otherwise, the default value for the type of the item parameter. This parameter is
            passed uninitialized.
            </param>
            <returns>
            True if the list contains an element with the specified name; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="T:Simphony.Collections.IPriorityQueue`2">
            <summary>
            Interface implemented by priority queues.
            </summary>
            <typeparam name="TPriority">
            The type used to prioritize the queue.
            </typeparam>
            <typeparam name="TValue">
            The type of object to store in the queue.
            </typeparam>
        </member>
        <member name="P:Simphony.Collections.IPriorityQueue`2.Count">
            <summary>
            Gets the number of items contained in the queue.
            </summary>
            <value>
            The number of items contained in the queue.
            </value>
        </member>
        <member name="P:Simphony.Collections.IPriorityQueue`2.Direction">
            <summary>
            Gets a value indicating which direction the queue sorts items.
            </summary>
            <value>
            A value indicating which direction the queue sorts items.
            </value>
        </member>
        <member name="M:Simphony.Collections.IPriorityQueue`2.Clear">
            <summary>
            Removes all items from the queue.
            </summary>
        </member>
        <member name="M:Simphony.Collections.IPriorityQueue`2.Dequeue">
            <summary>
            Removes and returns the item at the head of the queue.
            </summary>
            <returns>
            The item at the head of the queue.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the queue is empty.
            </exception>
        </member>
        <member name="M:Simphony.Collections.IPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Inserts an item into the queue.
            </summary>
            <param name="priority">
            The priority of the item.
            </param>
            <param name="item">
            The item to insert.
            </param>
        </member>
        <member name="M:Simphony.Collections.IPriorityQueue`2.Peek">
            <summary>
            Returns, but does not remove, the item at the head of the queue.
            </summary>
            <returns>
            The item at the head of the queue.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the queue is empty.
            </exception>
        </member>
        <member name="T:Simphony.Collections.NamedObjectDictionary`2">
            <summary>
            A type-safe dictionary of named objects.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.NamedObjectDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NamedObjectDictionary`2"/> class
            that is empty, has the default initial capacity, and uses the default equality comparer for
            the key type.
            </summary>
        </member>
        <member name="M:Simphony.Collections.NamedObjectDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NamedObjectDictionary`2"/> class
            that contains elements copied from the specified dictionary and uses the default equality
            comparer for the key type.
            </summary>
            <param name="dictionary">
            The dictionary whose elements are copied to the new dictionary.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified dictionary is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if one or more of the named objects in the specified dictionary is a null reference,
            or if the named objects do not have unique names.
            </exception>
        </member>
        <member name="P:Simphony.Collections.NamedObjectDictionary`2.Item(System.String)">
            <summary>
            Gets the named object with the specified name.
            </summary>
            <param name="name">
            The name of the object to get.
            </param>
            <returns>
            The named object with the specified name.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:Simphony.Collections.NameNotFoundException">
            Thrown if an object with the specified name is not in the dictionary.
            </exception>
        </member>
        <member name="M:Simphony.Collections.NamedObjectDictionary`2.ContainsName(System.String)">
            <summary>
            Determines if the dictionary contains a named object with a specific name.
            </summary>
            <param name="name">
            The name in question.
            </param>
            <returns>
            True if the dictionary contains a named object with the specified name; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.Collections.NamedObjectDictionary`2.Remove(System.String)">
            <summary>
            Removes the named object with the specified name.
            </summary>
            <param name="name">
            The name in question.
            </param>
            <returns>
            True if an object with the specified name was successfully found and removed from the
            dictionary; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.Collections.NamedObjectDictionary`2.TryGetValue(System.String,`1@)">
            <summary>
            Gets the named object associated with the specified name.
            </summary>
            <param name="name">
            The name in question.
            </param>
            <param name="value">
            When this method returns, the named object associated with the specified name, if one is found;
            otherwise, the default value for the type of the value parameter. This parameter is passed
            uninitialized.
            </param>
            <returns>
            True if the dictionary contains a named object with the specified name; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.Collections.NamedObjectDictionary`2.AddItem(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectDictionary`2.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectDictionary`2.RemoveItem(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectDictionary`2.SetItem(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Collections.NamedObjectDictionary`2.KeyValuePair">
            <summary>
            Defines a key/value pair for a dictionary of named objects.
            </summary>
        </member>
        <member name="M:Simphony.Collections.NamedObjectDictionary`2.KeyValuePair.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NamedObjectDictionary`2.KeyValuePair"/> class.
            </summary>
            <param name="key">
            The key value for the pair.
            </param>
            <param name="value">
            The object associated with the key.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the specified key or the specified value is a null reference.
            </exception>
        </member>
        <member name="E:Simphony.Collections.NamedObjectDictionary`2.KeyValuePair.NameChanged">
            <inheritdoc/>
        </member>
        <member name="E:Simphony.Collections.NamedObjectDictionary`2.KeyValuePair.NameChanging">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.NamedObjectDictionary`2.KeyValuePair.Key">
            <summary>
            Gets the key value for the pair.
            </summary>
            <value>
            The key value for the pair.
            </value>
        </member>
        <member name="P:Simphony.Collections.NamedObjectDictionary`2.KeyValuePair.Name">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.NamedObjectDictionary`2.KeyValuePair.Value">
            <summary>
            Gets or sets the object associated with the key.
            </summary>
            <value>
            The object associated with the key.
            </value>
        </member>
        <member name="M:Simphony.Collections.NamedObjectDictionary`2.KeyValuePair.OnNameChanged(System.EventArgs)">
            <summary>
            Fires the NameChanged event.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="M:Simphony.Collections.NamedObjectDictionary`2.KeyValuePair.OnNameChanging(Simphony.Collections.NameChangingEventArgs)">
            <summary>
            Fires the NameChanging event.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="T:Simphony.Collections.NotifyingNamedObjectBase">
            <summary>
            An implementation of the INamedObject interface that also supports the INotifyPropertyChanged
            and INotifyPropertyChanging interfaces.
            </summary>
            <remarks>
            Derived classes should call the OnPropertyChanging() and OnPropertyChanged() protected methods
            inside property set accessors.
            </remarks>
        </member>
        <member name="M:Simphony.Collections.NotifyingNamedObjectBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NotifyingNamedObjectBase"/> class with an
            empty string as its name.
            </summary>
        </member>
        <member name="M:Simphony.Collections.NotifyingNamedObjectBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NotifyingNamedObjectBase"/> class with a
            specified name.
            </summary>
            <param name="name">
            The name of the object.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the supplied name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the supplied name is an empty string.
            </exception>
        </member>
        <member name="E:Simphony.Collections.NotifyingNamedObjectBase.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="E:Simphony.Collections.NotifyingNamedObjectBase.PropertyChanging">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NotifyingNamedObjectBase.OnNameChanged">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NotifyingNamedObjectBase.OnNameChanging(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NotifyingNamedObjectBase.OnPropertyChanged(System.String)">
            <summary>
            Fires the PropertyChanged event.
            </summary>
            <param name="propertyName">
            The name of the property that changed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified property name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified property name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.Collections.NotifyingNamedObjectBase.OnPropertyChanging(System.String)">
            <summary>
            Fires the PropertyChanging event.
            </summary>
            <param name="propertyName">
            The name of the property that is changing.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified property name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified property name is an empty string.
            </exception>
        </member>
        <member name="T:Simphony.Collections.ReadOnlyNamedObjectList`1">
            <summary>
            A read-only wrapper for a named object list.
            </summary>
            <typeparam name="T">
            The type of elements in the list.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyNamedObjectList`1.#ctor(Simphony.Collections.INamedObjectList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ReadOnlyNamedObjectList`1"/> class to wrap a
            specified named object list.
            </summary>
            <param name="list">
            The named object list in question.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified named object list is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Collections.ReadOnlyNamedObjectList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.ReadOnlyNamedObjectList`1.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyNamedObjectList`1.Contains(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyNamedObjectList`1.GetItemOrDefault(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyNamedObjectList`1.Simphony#Collections#INamedObjectList{T}#Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyNamedObjectList`1.Simphony#Collections#INamedObjectList{T}#RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyNamedObjectList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyNamedObjectList`1.IndexOf(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyNamedObjectList`1.TryGetItem(System.String,`0@)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Collections.ManagedDictionary`2">
            <summary>
            An implementation of the generic IDictionary interface that provides events that a containing
            class can utilize to take actions when the dictionary is changed.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.ManagedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ManagedDictionary`2"/> class that
            is empty, has the default initial capacity, and uses the default equality comparer for the
            key type.
            </summary>
        </member>
        <member name="M:Simphony.Collections.ManagedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ManagedDictionary`2"/> class that
            contains elements copied from the specified dictionary and uses the default equality
            comparer for the key type.
            </summary>
            <param name="dictionary">
            The dictionary whose elements are copied to the new dictionary.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified dictionary is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified dictionary contains one or more duplicate keys.
            </exception>
        </member>
        <member name="E:Simphony.Collections.ManagedDictionary`2.AddedItem">
            <summary>
            Fired after an item has been added to the dictionary.
            </summary>
        </member>
        <member name="E:Simphony.Collections.ManagedDictionary`2.AddingItem">
            <summary>
            Fired before an item has been added to the dictionary.
            </summary>
        </member>
        <member name="E:Simphony.Collections.ManagedDictionary`2.ClearedItems">
            <summary>
            Fired after the dictionary has been cleared.
            </summary>
        </member>
        <member name="E:Simphony.Collections.ManagedDictionary`2.ClearingItems">
            <summary>
            Fired before the list has been cleared.
            </summary>
        </member>
        <member name="E:Simphony.Collections.ManagedDictionary`2.RemovedItem">
            <summary>
            Fired after an item has been removed from the dictionary.
            </summary>
        </member>
        <member name="E:Simphony.Collections.ManagedDictionary`2.RemovingItem">
            <summary>
            Fired before an item has been removed from the dictionary.
            </summary>
        </member>
        <member name="E:Simphony.Collections.ManagedDictionary`2.ReplacedItem">
            <summary>
            Fired after an item in the dictionary has been replaced.
            </summary>
        </member>
        <member name="E:Simphony.Collections.ManagedDictionary`2.ReplacingItem">
            <summary>
            Fired before an item in the dictionary has been replaced.
            </summary>
        </member>
        <member name="M:Simphony.Collections.ManagedDictionary`2.AddItem(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ManagedDictionary`2.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ManagedDictionary`2.OnAddedItem(`0,`1)">
            <summary>
            Fires the AddedItem event.
            </summary>
            <param name="key">
            The key of the element that was added.
            </param>
            <param name="value">
            The value of the element that was added. The value can be a null reference for
            reference types.
            </param>
        </member>
        <member name="M:Simphony.Collections.ManagedDictionary`2.OnAddingItem(`0,`1)">
            <summary>
            Fires the AddingItem event.
            </summary>
            <param name="key">
            The key of the element to be added.
            </param>
            <param name="value">
            The value of the element to be added. The value can be a null reference for
            reference types.
            </param>
        </member>
        <member name="M:Simphony.Collections.ManagedDictionary`2.OnClearedItems">
            <summary>
            Fires the ClearedItems event.
            </summary>
        </member>
        <member name="M:Simphony.Collections.ManagedDictionary`2.OnClearingItems">
            <summary>
            Fires the ClearingItems event.
            </summary>
        </member>
        <member name="M:Simphony.Collections.ManagedDictionary`2.OnRemovedItem(`0,`1)">
            <summary>
            Fires the RemovedItem event.
            </summary>
            <param name="key">
            The key of the element that was removed.
            </param>
            <param name="value">
            The value of the element that was removed. The value can be a null reference for
            reference types.
            </param>
        </member>
        <member name="M:Simphony.Collections.ManagedDictionary`2.OnRemovingItem(`0,`1)">
            <summary>
            Fires the RemovedItem event.
            </summary>
            <param name="key">
            The key of the element to be removed.
            </param>
            <param name="value">
            The value of the element to be removed. The value can be a null reference for
            reference types.
            </param>
        </member>
        <member name="M:Simphony.Collections.ManagedDictionary`2.OnReplacedItem(`0,`1)">
            <summary>
            Fires the ReplacedItem event.
            </summary>
            <param name="key">
            The key of the element that was replaced.
            </param>
            <param name="value">
            The new value of the element that was replaced. The value can be a null reference for
            reference types.
            </param>
        </member>
        <member name="M:Simphony.Collections.ManagedDictionary`2.OnReplacingItem(`0,`1)">
            <summary>
            Fires the ReplacingItem event.
            </summary>
            <param name="key">
            The key of the element to be replaced.
            </param>
            <param name="value">
            The new value of the element to be replaced. The value can be a null reference for
            reference types.
            </param>
        </member>
        <member name="M:Simphony.Collections.ManagedDictionary`2.RemoveItem(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ManagedDictionary`2.SetItem(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Collections.MruList">
            <summary>
            A list of most recently used strings.
            </summary>
        </member>
        <member name="M:Simphony.Collections.MruList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.MruList"/> class with a capacity of 10.
            </summary>
        </member>
        <member name="M:Simphony.Collections.MruList.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.MruList"/> class with a specified capacity.
            </summary>
            <param name="capacity">
            The maximum number of strings the list can contain.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified capacity is less than zero.
            </exception>
        </member>
        <member name="P:Simphony.Collections.MruList.Capacity">
            <summary>
            Gets or sets the maximum number of strings the list can contain.
            </summary>
            <value>
            The maximum number of strings the list can contain.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified capacity is less than zero.
            </exception>
        </member>
        <member name="P:Simphony.Collections.MruList.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.MruList.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.MruList.Item(System.Int32)">
            <summary>
            Gets the string at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the string to get.
            </param>
            <returns>
            The string at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is not a valid index in the list.
            </exception>
        </member>
        <member name="M:Simphony.Collections.MruList.Add(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.MruList.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.MruList.Contains(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.MruList.CopyTo(System.String[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.MruList.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.MruList.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.MruList.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.MruList.IndexOf(System.String)">
            <summary>
            Determines the index of a specific string in the list.
            </summary>
            <param name="item">
            The string to locate in the list.
            </param>
            <returns>
            The index of the string if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Simphony.Collections.MruList.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.MruList.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.MruList.RemoveAt(System.Int32)">
            <summary>
            Removes the string at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the string to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is not a valid index in the list.
            </exception>
        </member>
        <member name="M:Simphony.Collections.MruList.ToArray">
            <summary>
            Copies the elements of the list to a new array.
            </summary>
            <returns>
            An array containing copies of the elements of the list.
            </returns>
        </member>
        <member name="M:Simphony.Collections.MruList.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Collections.PriorityList`2">
            <summary>
            A generic list sorted by priority.
            </summary>
            <typeparam name="TPriority">
            The type used to prioritize the list.
            </typeparam>
            <typeparam name="TValue">
            The type of object to store in the list.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.PriorityList`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.PriorityList`2"/> class that
            is empty, has the default initial capacity, and sorts items in descending order.
            </summary>
        </member>
        <member name="M:Simphony.Collections.PriorityList`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.PriorityList`2"/> class that
            is empty, has the a specified initial capacity, and sorts items in descending order.
            </summary>
            <param name="capacity">
            The number of elements that the new list can initially store.
            </param>
        </member>
        <member name="M:Simphony.Collections.PriorityList`2.#ctor(System.ComponentModel.ListSortDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.PriorityList`2"/> class that
            is empty, has the default initial capacity, and sorts items in a specified order.
            </summary>
            <param name="direction">
            A value indicating in which direction the list should sort the items.
            </param>
        </member>
        <member name="M:Simphony.Collections.PriorityList`2.#ctor(System.ComponentModel.ListSortDirection,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.PriorityList`2"/> class that
            is empty, has the a specified initial capacity, and sorts items in a specified order.
            </summary>
            <param name="direction">
            A value indicating in which direction the list should sort the items.
            </param>
            <param name="capacity">
            The number of elements that the new list can initially store.
            </param>
        </member>
        <member name="P:Simphony.Collections.PriorityList`2.Capacity">
            <summary>
            Gets or sets the total number of items the internal data structure can hold
            without resizing.
            </summary>
            <value>
            The number of items that the list can contain before resizing is required.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the capacity is set to a value less then than the length of the list.
            </exception>
        </member>
        <member name="P:Simphony.Collections.PriorityList`2.Count">
            <summary>
            Gets the number of elements contained in the list.
            </summary>
            <value>
            The number of elements contained in the list.
            </value>
        </member>
        <member name="P:Simphony.Collections.PriorityList`2.Direction">
            <summary>
            Gets a value indicating which direction the list sorts items.
            </summary>
            <value>
            A value indicating which direction the list sorts items.
            </value>
        </member>
        <member name="P:Simphony.Collections.PriorityList`2.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the item to get.
            </param>
            <returns>
            The item at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is not a valid index in the list.
            </exception>
        </member>
        <member name="M:Simphony.Collections.PriorityList`2.Add(`0,`1)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="priority">
            The priority of the item.
            </param>
            <param name="value">
            The item to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified priority is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.PriorityList`2.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:Simphony.Collections.PriorityList`2.FindIndex(System.Predicate{`1})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate,
            and returns the zero-based index of the first occurrence within the list.
            </summary>
            <param name="match">
            The predicate that defines the conditions of the element to search for.
            </param>
            <returns>
            The zero-based index of the first occurrence of an element that matches the conditions
            defined by match, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified predicate is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.PriorityList`2.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through the list.
            </summary>
            <returns>
            An enumerator that can iterate through the list.
            </returns>
        </member>
        <member name="M:Simphony.Collections.PriorityList`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through the collection.
            </summary>
            <returns>
            An enumerator that can iterate through the collection.
            </returns>
        </member>
        <member name="M:Simphony.Collections.PriorityList`2.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
            <returns>
            The item that was removed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is not a valid index in the list.
            </exception>
        </member>
        <member name="T:Simphony.Collections.PriorityList`2.Enumerator">
            <summary>
            An enumerator for enumerating priority lists.
            </summary>
        </member>
        <member name="M:Simphony.Collections.PriorityList`2.Enumerator.#ctor(Simphony.Collections.PriorityList{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.PriorityList`2.Enumerator"/> class.
            </summary>
            <param name="list">
            The priority list to enumerate.
            </param>
        </member>
        <member name="P:Simphony.Collections.PriorityList`2.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>
            The element in the collection at the current position of the enumerator.
            </value>
        </member>
        <member name="P:Simphony.Collections.PriorityList`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value>
            The current element in the collection.
            </value>
        </member>
        <member name="M:Simphony.Collections.PriorityList`2.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Simphony.Collections.PriorityList`2.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; false if the enumerator
            has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Simphony.Collections.PriorityList`2.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:Simphony.Collections.PriorityQueue`2">
            <summary>
            A general purpose priority queue implemented using a binary heap.
            </summary>
            <typeparam name="TPriority">
            The type used to prioritize the queue.
            </typeparam>
            <typeparam name="TValue">
            The type of object to store in the queue.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.PriorityQueue`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.PriorityQueue`2"/> class that
            sorts items in descending order.
            </summary>
        </member>
        <member name="M:Simphony.Collections.PriorityQueue`2.#ctor(System.ComponentModel.ListSortDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.PriorityQueue`2"/> class that
            sorts items in a specified order.
            </summary>
            <param name="direction">
            A value indicating in which direction the queue should sort the items.
            </param>
        </member>
        <member name="P:Simphony.Collections.PriorityQueue`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.PriorityQueue`2.Direction">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.PriorityQueue`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.PriorityQueue`2.Dequeue">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.PriorityQueue`2.Enqueue(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.PriorityQueue`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.PriorityQueue`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.PriorityQueue`2.Peek">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Collections.PriorityValuePair`2">
            <summary>
            Defines a priority/value pair as stored in a priority queue/list.
            </summary>
            <typeparam name="TPriority">
            The type used to prioritize the queue/list.
            </typeparam>
            <typeparam name="TValue">
            The type of object to store in the queue/list.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.PriorityValuePair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.PriorityValuePair`2"/>
            struct.
            </summary>
            <param name="priority">
            The priority of the item.
            </param>
            <param name="value">
            The value of the item.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified priority is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Collections.PriorityValuePair`2.Chronology">
            <summary>
            Gets a unique value indicating the chronology of the item.
            </summary>
            <value>
            A unique value indicating the chronology of the item.
            </value>
            <remarks>
            This value can be used to break priority ties.
            </remarks>
        </member>
        <member name="P:Simphony.Collections.PriorityValuePair`2.Priority">
            <summary>
            Gets the priority of the item.
            </summary>
            <value>
            The priority of the item.
            </value>
        </member>
        <member name="P:Simphony.Collections.PriorityValuePair`2.Value">
            <summary>
            Gets the value of the item.
            </summary>
            <value>
            The value of the item.
            </value>
        </member>
        <member name="T:Simphony.Collections.ReadOnlyDictionary`2">
            <summary>
            Read-only wrapper for a generic dictionary.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ReadOnlyDictionary`2"/> class to
            wrap a specified dictionary.
            </summary>
            <param name="dictionary">
            The dictionary in question.
            </param>
        </member>
        <member name="P:Simphony.Collections.ReadOnlyDictionary`2.Keys">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.ReadOnlyDictionary`2.Values">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.ReadOnlyDictionary`2.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Collections.CalendarQueue`1">
            <summary>
            A fast O(1) priority queue intended for the simulation event set problem.
            </summary>
            <typeparam name="T">
            The type of object to store in the queue.
            </typeparam>
            <remarks>
            See: Brown, R., Calendar Queues: A fast O(1) priority queue implementation for the simulation
            event set problem. Communications of the ACM 31, 10 (Oct 1988), 1220-1227.
            </remarks>
        </member>
        <member name="M:Simphony.Collections.CalendarQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.CalendarQueue`1"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Collections.CalendarQueue`1.Count">
            <summary>
            Gets the number of items contained in the queue.
            </summary>
        </member>
        <member name="P:Simphony.Collections.CalendarQueue`1.Direction">
            <summary>
            Gets a value indicating which direction the queue sorts items.
            </summary>
            <value>
            A value indicating which direction the queue sorts items.
            </value>
        </member>
        <member name="P:Simphony.Collections.CalendarQueue`1.LastPriority">
            <summary>
            Gets the priority of the last item removed from the queue.
            </summary>
            <value>
            The priority of the last item removed from the queue; or zero if an item has never
            been removed from the queue.
            </value>
        </member>
        <member name="P:Simphony.Collections.CalendarQueue`1.NextPriority">
            <summary>
            Gets the priority of the item at the head of the queue.
            </summary>
            <value>
            The priority of the item at the head of the queue.
            </value>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the queue is empty.
            </exception>
        </member>
        <member name="M:Simphony.Collections.CalendarQueue`1.Clear">
            <summary>
            Removes all items from the queue.
            </summary>
        </member>
        <member name="M:Simphony.Collections.CalendarQueue`1.Dequeue">
            <summary>
            Removes and returns the item at the head of the queue.
            </summary>
            <returns>
            The item at the head of the queue.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the queue is empty.
            </exception>
            <remarks>
            On average this is an O(1) operation.
            </remarks>
        </member>
        <member name="M:Simphony.Collections.CalendarQueue`1.Enqueue(System.Double,`0)">
            <summary>
            Inserts an item into the queue.
            </summary>
            <param name="priority">
            The priority of the item.
            </param>
            <param name="item">
            The item to insert.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified priority is less than the priority of the last item
            removed from the queue.
            </exception>
            <remarks>
            On average this is an O(1) operation.
            </remarks>
        </member>
        <member name="M:Simphony.Collections.CalendarQueue`1.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through the list.
            </summary>
            <returns>
            An enumerator that can iterate through the list.
            </returns>
        </member>
        <member name="M:Simphony.Collections.CalendarQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through the collection.
            </summary>
            <returns>
            An enumerator that can iterate through the collection.
            </returns>
        </member>
        <member name="M:Simphony.Collections.CalendarQueue`1.Peek">
            <summary>
            Returns, but does not remove, the item at the head of the queue.
            </summary>
            <returns>
            The item at the head of the queue.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the queue is empty.
            </exception>
            <remarks>
            On average this is an O(1) operation.
            </remarks>
        </member>
        <member name="M:Simphony.Collections.CalendarQueue`1.Remove(`0)">
            <summary>
            Removes the first occurrence of an item from the queue.
            </summary>
            <param name="item">
            The item to remove.
            </param>
            <returns>
            The priority of the item that was removed; or a negative value if the item was not found
            in the queue.
            </returns>
            <remarks>
            On average this is an O(n) operation.
            </remarks>
        </member>
        <member name="M:Simphony.Collections.CalendarQueue`1.Remove(System.Double,`0)">
            <summary>
            Removes an item from the queue.
            </summary>
            <param name="priority">
            The priority of the item.
            </param>
            <param name="item">
            The item to remove.
            </param>
            <returns>
            True if the specified item was found and deleted; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified priority is less than the priority of the last item
            removed from the queue.
            </exception>
            <remarks>
            On average this is an O(1) operation.
            </remarks>
        </member>
        <member name="T:Simphony.Collections.CalendarQueue`1.Node">
            <summary>
            The type of object stored in the buckets.
            </summary>
        </member>
        <member name="M:Simphony.Collections.CalendarQueue`1.Node.#ctor(System.Double,System.Int64,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.CalendarQueue`1.Node"/> class.
            </summary>
            <param name="priority">
            The priority of the node.
            </param>
            <param name="chronology">
            The chronology of the node.
            </param>
            <param name="value">
            The underlying value of the node.
            </param>
        </member>
        <member name="P:Simphony.Collections.CalendarQueue`1.Node.Chronology">
            <summary>
            Gets the chronology of the node.
            </summary>
            <value>
            The chronology of the node.
            </value>
        </member>
        <member name="P:Simphony.Collections.CalendarQueue`1.Node.Next">
            <summary>
            Gets or sets the next node.
            </summary>
            <value>
            The next node.
            </value>
        </member>
        <member name="P:Simphony.Collections.CalendarQueue`1.Node.Priority">
            <summary>
            Gets the priority of the node.
            </summary>
            <value>
            The priority of the node.
            </value>
        </member>
        <member name="P:Simphony.Collections.CalendarQueue`1.Node.Value">
            <summary>
            Gets the underlying value of the node.
            </summary>
            <value>
            The underlying value of the node.
            </value>
        </member>
        <member name="M:Simphony.Collections.CalendarQueue`1.Node.CompareTo(Simphony.Collections.CalendarQueue{`0}.Node)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="that">
            An object to compare with this object.
            </param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            </returns>
        </member>
        <member name="T:Simphony.Collections.ListBase`1">
            <summary>
            Provides the abstract base class for a generic list.
            </summary>
            <typeparam name="T">
            The type of elements in the list.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ListBase`1"/> class that is empty and has the
            default initial capacity.
            </summary>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ListBase`1"/> class that contains elements
            copied from the specified collection and has sufficient capacity to accommodate the number
            of elements copied.
            </summary>
            <param name="collection">
            The collection whose elements are copied to the new list.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the supplied collection is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ListBase`1"/> class that is empty and has the
            specified initial capacity.
            </summary>
            <param name="capacity">
            The number of elements that the new list can initially store.
            </param>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ListBase`1"/> class for the specified list.
            </summary>
            <param name="items">
            The list to be wrapped by the new list.
            </param>
        </member>
        <member name="P:Simphony.Collections.ListBase`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without
            resizing.
            </summary>
            <value>
            The number of elements that the list can contain before resizing is required.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the Capacity is set to a value less then Count.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.AsReadOnly">
            <summary>
            Gets a read-only IList wrapper for the current list.
            </summary>
            <returns>
            A read-only IList wrapper for the current list.
            </returns>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.CopyTo(`0[])">
            <summary>
            Copies the entire list to a compatible one-dimensional array, starting at the beginning
            of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from the list.
            The array must have zero-based indexing.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the number of elements in the source List is greater than the number of
            elements that the destination array can contain.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the list to a compatible one-dimensional array, starting
            at the specified index of the target array.
            </summary>
            <param name="index">
            The zero-based index in the source list at which copying begins.
            </param>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from the list.
            The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index at which copying begins.
            </param>
            <param name="count">
            The number of elements to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified list index is less than zero; or if the specified array index is
            less than zero; or if the specified count is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified list index is greater than or equal to the length of the source
            list; or if the specified array index is greater than or equal to the length of the
            target array; or if the number of elements from the specified list index to the end of
            the source list is greater than the available space from the specified array index to the
            end of the target array.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the list contains elements that match the conditions defined by the
            specified predicate.
            </summary>
            <param name="match">
            The predicate delegate that defines the conditions of the elements to search for.
            </param>
            <returns>
            True if the list contains one or more elements that match the conditions defined by the
            specified predicate; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified predicate is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate,
            and returns the first occurrence within the entire list.
            </summary>
            <param name="match">
            The predicate delegate that defines the conditions of the element to search for.
            </param>
            <returns>
            The first element that matches the conditions defined by the specified predicate, if
            found; otherwise, the default value for type T.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified predicate is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate,
            and returns the zero-based index of the first occurrence within the entire list.
            </summary>
            <param name="match">
            The predicate delegate that defines the conditions of the element to search for.
            </param>
            <returns>
            The zero-based index of the first occurrence of an element that matches the conditions
            defined by match, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified predicate is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate,
            and returns the zero-based index of the first occurrence within the range of elements in
            the list that extends from the specified index to the last element.
            </summary>
            <param name="startIndex">
            The zero-based starting index of the search.
            </param>
            <param name="match">
            The predicate delegate that defines the conditions of the element to search for.
            </param>
            <returns>
            The zero-based index of the first occurrence of an element that matches the conditions
            defined by match, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified predicate is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified starting index is outside the range of valid indexes for the
            list.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate,
            and returns the zero-based index of the first occurrence within the range of elements in
            the list that starts at the specified index and contains the specified number of
            elements.
            </summary>
            <param name="startIndex">
            The zero-based starting index of the search.
            </param>
            <param name="count">
            The number of elements in the section to search.
            </param>
            <param name="match">
            The predicate delegate that defines the conditions of the element to search for.
            </param>
            <returns>
            The zero-based index of the first occurrence of an element that matches the conditions
            defined by match, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified predicate is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified starting index is outside the range of valid indexes for the
            list; if the specified count is less than zero; or if the specified start index and
            the specified count do not specify a valid range in the list.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate,
            and returns the last occurrence within the entire list.
            </summary>
            <param name="match">
            The predicate delegate that defines the conditions of the element to search for.
            </param>
            <returns>
            The last element that matches the conditions defined by the specified predicate, if
            found; otherwise, the default value for type T.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified predicate is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate,
            and returns the zero-based index of the last occurrence within the entire list.
            </summary>
            <param name="match">
            The predicate delegate that defines the conditions of the element to search for.
            </param>
            <returns>
            The zero-based index of the last occurrence of an element that matches the conditions
            defined by match, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified predicate is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate,
            and returns the zero-based index of the last occurrence within the range of elements in
            the list that extends from the first element to the specified index.
            </summary>
            <param name="startIndex">
            The zero-based starting index of the backward search.
            </param>
            <param name="match">
            The predicate delegate that defines the conditions of the element to search for.
            </param>
            <returns>
            The zero-based index of the last occurrence of an element that matches the conditions
            defined by match, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified predicate is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified starting index is outside the range of valid indexes for the
            list.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate,
            and returns the zero-based index of the last occurrence within the range of elements in
            the list that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="startIndex">
            The zero-based starting index of the backward search.
            </param>
            <param name="count">
            The number of elements in the section to search.
            </param>
            <param name="match">
            The predicate delegate that defines the conditions of the element to search for.
            </param>
            <returns>
            The zero-based index of the last occurrence of an element that matches the conditions
            defined by match, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified predicate is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified starting index is outside the range of valid indexes for the
            list; if the specified count is less than zero; or if the specified start index and
            the specified count do not specify a valid range in the list.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the list.
            </summary>
            <param name="action">
            The action delegate to perform on each element of the list.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified action is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first
            occurrence within the range of elements in the list that extends from the specified index
            to the last element.
            </summary>
            <param name="item">
            The object to locate in the list. The value can be a null reference for reference types.
            </param>
            <param name="index">
            The zero-based starting index of the search.
            </param>
            <returns>
            The zero-based index of the first occurrence of item within the range of elements in the
            List that extends from index to the last element, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified starting index is outside the range of valid indexes for the
            list.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first
            occurrence within the range of elements in the list that starts at the specified index
            and contains the specified number of elements.
            </summary>
            <param name="item">
            The object to locate in the list. The value can be a null reference for reference types.
            </param>
            <param name="index">
            The zero-based starting index of the search.
            </param>
            <param name="count">
            The number of elements in the section to search.
            </param>
            <returns>
            The zero-based index of the first occurrence of item within the range of elements in the
            List that starts at index and contains count number of elements, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified starting index is outside the range of valid indexes for the
            list; if the specified count is less than zero; or if the specified start index and
            the specified count do not specify a valid range in the list.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence
            within the entire list.
            </summary>
            <param name="item">
            The object to locate in the list. The value can be a null reference for reference types.
            </param>
            <returns>
            The zero-based index of the last occurrence of item within the entire the list, if found;
            otherwise, –1.
            </returns>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence
            within the range of elements in the list that extends from the first element to the
            specified index.
            </summary>
            <param name="item">
            The object to locate in the list. The value can be a null reference for reference types.
            </param>
            <param name="index">
            The zero-based starting index of the backward search.
            </param>
            <returns>
            The zero-based index of the last occurrence of item within the range of elements in the
            List that extends from the first element to index, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified starting index is outside the range of valid indexes for the
            list.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence
            within the range of elements in the list that contains the specified number of elements
            and ends at the specified index.
            </summary>
            <param name="item">
            The object to locate in the list. The value can be a null reference for reference types.
            </param>
            <param name="index">
            The zero-based starting index of the backward search.
            </param>
            <param name="count">
            The number of elements in the section to search.
            </param>
            <returns>
            The zero-based index of the last occurrence of item within the range of elements in the
            List that contains count number of elements and ends at index, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified starting index is outside the range of valid indexes for the
            list; if the specified count is less than zero; or if the specified start index and
            the specified count do not specify a valid range in the list.
            </exception>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.ToArray">
            <summary>
            Copies the elements of the list to a new array.
            </summary>
            <returns>
            An array containing copies of the elements of the list.
            </returns>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the list, if that number is less
            than a threshold value.
            </summary>
        </member>
        <member name="M:Simphony.Collections.ListBase`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether every element in the list matches the conditions defined by the
            specified predicate.
            </summary>
            <param name="match">
            The predicate delegate that defines the conditions to check against the elements.
            </param>
            <returns>
            True if every element in the list matches the conditions defined by the specified
            predicate; otherwise, false. If the list has no elements, the return value is true.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified predicate is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.Collections.ListChangeEventArgs`1">
            <summary>
            Provides data for events raised by a managed list.
            </summary>
            <typeparam name="T">
            The type of elements in the list.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.ListChangeEventArgs`1.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ListChangeEventArgs`1"/> class.
            </summary>
            <param name="index">
            The zero-based index on the element involved with the event.
            </param>
            <param name="item">
            The element involved with the event.
            </param>
        </member>
        <member name="P:Simphony.Collections.ListChangeEventArgs`1.Index">
            <summary>
            Gets the zero-based index on the element involved with the event.
            </summary>
            <value>
            The zero-based index on the element involved with the event.
            </value>
        </member>
        <member name="P:Simphony.Collections.ListChangeEventArgs`1.Item">
            <summary>
            Gets item involved with the event.
            </summary>
            <value>
            The item involved with the event.
            </value>
        </member>
        <member name="T:Simphony.Collections.ManagedList`1">
            <summary>
            An implementation of the generic IList interface that provides events that a containing class
            can utilize to take actions when the list is changed.
            </summary>
            <typeparam name="T">
            The type of items in the list.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.ManagedList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ManagedList`1"/> class that is empty and has
            the default initial capacity.
            </summary>
        </member>
        <member name="M:Simphony.Collections.ManagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ManagedList`1"/> class that contains elements
            copied from the specified collection and has sufficient capacity to accommodate the number
            of elements copied.
            </summary>
            <param name="collection">
            The collection whose elements are copied to the new list.
            </param>
        </member>
        <member name="M:Simphony.Collections.ManagedList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ManagedList`1"/> class that is empty and has
            the specified initial capacity.
            </summary>
            <param name="capacity">
            The number of elements that the new list can initially store.
            </param>
        </member>
        <member name="E:Simphony.Collections.ManagedList`1.AddedItem">
            <summary>
            Fired after an element has been added/inserted into the list.
            </summary>
        </member>
        <member name="E:Simphony.Collections.ManagedList`1.AddingItem">
            <summary>
            Fired before an element has been added/inserted into the list.
            </summary>
        </member>
        <member name="E:Simphony.Collections.ManagedList`1.RemovedItem">
            <summary>
            Fired after an element has been removed from the list.
            </summary>
        </member>
        <member name="E:Simphony.Collections.ManagedList`1.RemovingItem">
            <summary>
            Fired before an element has been removed from the list.
            </summary>
        </member>
        <member name="M:Simphony.Collections.ManagedList`1.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ManagedList`1.InsertItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ManagedList`1.OnAddedItem(System.Int32,`0)">
            <summary>
            Fires the AddedItem event.
            </summary>
            <param name="index">
            The zero-based index of the element that was inserted.
            </param>
            <param name="item">
            The value of the element that was inserted. The value can be a null reference for
            reference types.
            </param>
        </member>
        <member name="M:Simphony.Collections.ManagedList`1.OnAddingItem(System.Int32,`0)">
            <summary>
            Fires the AddingItem event.
            </summary>
            <param name="index">
            The zero-based index of the element to be inserted.
            </param>
            <param name="item">
            The value of the element to be inserted. The value can be a null reference for
            reference types.
            </param>
        </member>
        <member name="M:Simphony.Collections.ManagedList`1.OnRemovedItem(System.Int32,`0)">
            <summary>
            Fires the RemovedItem event.
            </summary>
            <param name="index">
            The zero-based index of the element that was removed.
            </param>
            <param name="item">
            The value of the element that was removed. The value can be a null reference for
            reference types.
            </param>
        </member>
        <member name="M:Simphony.Collections.ManagedList`1.OnRemovingItem(System.Int32,`0)">
            <summary>
            Fires the RemovingItem event.
            </summary>
            <param name="index">
            The zero-based index of the element to be removed.
            </param>
            <param name="item">
            The value of the element to be removed. The value can be a null reference for
            reference types.
            </param>
        </member>
        <member name="M:Simphony.Collections.ManagedList`1.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ManagedList`1.SetItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Collections.NamedObjectList`1">
            <summary>
            A type-safe list of named objects sorted by name.
            </summary>
            <typeparam name="T">
            The type of elements in the list.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NamedObjectList`1"/> class that is empty and
            has the default initial capacity.
            </summary>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NamedObjectList`1"/> class that contains
            named objects copied from the specified collection and has sufficient capacity to
            accommodate the number of named objects copied.
            </summary>
            <param name="collection">
            The collection whose named objects are copied to the new list.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the supplied collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if one or more of the named objects in the specified collection is a null
            reference; if one or more of the named objects is unnamed; or if one or more of the
            named objects have the same name.
            </exception>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NamedObjectList`1"/> class that is empty and
            has the specified initial capacity.
            </summary>
            <param name="capacity">
            The number of elements that the new list can initially store.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified capacity is less than zero.
            </exception>
        </member>
        <member name="E:Simphony.Collections.NamedObjectList`1.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.NamedObjectList`1.Capacity">
            <summary>
            Gets or sets the total number of named objects the internal data structure can hold
            without resizing.
            </summary>
            <value>
            The number of named objects that the list can contain before resizing is required.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the capacity is set to a value less then than the length of the list.
            </exception>
        </member>
        <member name="P:Simphony.Collections.NamedObjectList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.NamedObjectList`1.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.NamedObjectList`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.NamedObjectList`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.NamedObjectList`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.NamedObjectList`1.System#Collections#IList#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.NamedObjectList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.NamedObjectList`1.Item(System.String)">
            <summary>
            Gets the named object with the specified name.
            </summary>
            <param name="name">
            The name of the object to get.
            </param>
            <returns>
            The named object with the specified name.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:Simphony.Collections.NameNotFoundException">
            Thrown if an object with the specified name is not in the list.
            </exception>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.AsReadOnly">
            <summary>
            Gets a read-only INamedObjectList wrapper for the current list.
            </summary>
            <returns>
            A read-only INamedObjectList wrapper for the current list.
            </returns>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.Contains(System.String)">
            <summary>
            Determines if the list contains a named object with a specific name.
            </summary>
            <param name="name">
            The name in question.
            </param>
            <returns>
            True if the list contains a named object with the specified name; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the list.
            </summary>
            <param name="action">
            The action delegate to perform on each element of the list.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified action is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.GetItemOrDefault(System.String)">
            <summary>
            Gets the named object associated with the specified name if found; otherwise, the default
            value for the type of the item parameter.
            </summary>
            <param name="name">
            The name in question.
            </param>
            <returns>
            The named object associated with the specified name if found; otherwise, the default value
            for the type of the item parameter.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.System#Collections#IList#Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.System#Collections#IList#Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.System#Collections#IList#Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.IndexOf(System.String)">
            <summary>
            Determines the index of the named object with the specified name.
            </summary>
            <param name="name">
            The name in question.
            </param>
            <returns>
            The index of the named object if found in the list; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.Remove(System.String)">
            <summary>
            Removes the named object with the specified name.
            </summary>
            <param name="name">
            The name in question.
            </param>
            <returns>
            True if an object with the specified name was successfully found and removed from the
            list; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.TryGetItem(System.String,`0@)">
            <summary>
            Gets the named object associated with the specified name.
            </summary>
            <param name="name">
            The name in question.
            </param>
            <param name="item">
            When this method returns, the named object associated with the specified name, if one is
            found; otherwise, the default value for the type of the item parameter. This parameter is
            passed uninitialized.
            </param>
            <returns>
            True if the list contains an element with the specified name; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.Collections.NamedObjectList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Simphony.Collections.NamedObjectList`1.CollectionChanged"/> event.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="T:Simphony.Collections.NameNotFoundException">
            <summary>
            An exception indicating that the a name was not found in a named object list.
            </summary>
        </member>
        <member name="M:Simphony.Collections.NameNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NameNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Collections.NameNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NameNotFoundException"/> class with a
            specified error message.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:Simphony.Collections.NameNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NameNotFoundException"/> class with a
            specified error message and a reference to the inner exception that is the cause of this
            exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference if no inner
            exception is specified.
            </param>
        </member>
        <member name="M:Simphony.Collections.NameNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NameNotFoundException"/> class from serialized
            data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or
            destination.
            </param>
        </member>
        <member name="T:Simphony.Collections.ReadOnlyCollection`1">
            <summary>
            A read-only wrapper for a generic collection.
            </summary>
            <typeparam name="T">
            The type of elements in the collection.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ReadOnlyCollection`1"/> class to wrap a
            specified collection.
            </summary>
            <param name="collection">
            The collection in question.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Collections.ReadOnlyCollection`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.ReadOnlyCollection`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.ReadOnlyCollection`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.ReadOnlyCollection`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyCollection`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyCollection`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyCollection`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyCollection`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyCollection`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Collections.ReadOnlyList`1">
            <summary>
            A read-only wrapper for a generic list.
            </summary>
            <typeparam name="T">
            The type of elements in the list.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.ReadOnlyList`1"/> class to wrap a specified
            list.
            </summary>
            <param name="list">
            The list in question.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified list is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Collections.ReadOnlyList`1.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.ReadOnlyList`1.System#Collections#IList#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.ReadOnlyList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyList`1.System#Collections#IList#Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyList`1.System#Collections#IList#Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyList`1.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyList`1.System#Collections#IList#Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.ReadOnlyList`1.ToArray">
            <summary>
            Creates an array of the values in the list.
            </summary>
            <returns>
            An array consisting of the items in the list.
            </returns>
        </member>
        <member name="T:Simphony.Collections.INamedObject">
            <summary>
            Interface implemented by named objects.
            </summary>
        </member>
        <member name="E:Simphony.Collections.INamedObject.NameChanged">
            <summary>
            Fired when the name of the object has changed.
            </summary>
        </member>
        <member name="E:Simphony.Collections.INamedObject.NameChanging">
            <summary>
            Fired when the name of the object is about to change.
            </summary>
            <remarks>
            To cancel the name change, set the Cancel property of the
            <see cref="T:Simphony.Collections.NameChangingEventArgs"/> passed to your event handler to true.
            </remarks>
        </member>
        <member name="T:Simphony.Collections.NameChangingEventArgs">
            <summary>
            Provides data for a NameChanging event.
            </summary>
        </member>
        <member name="M:Simphony.Collections.NameChangingEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NameChangingEventArgs"/> class.
            </summary>
            <param name="name">
            The new name of the object.
            </param>
        </member>
        <member name="P:Simphony.Collections.NameChangingEventArgs.Name">
            <summary>
            Gets the new name of the object.
            </summary>
            <value>
            The new name of the object.
            </value>
        </member>
        <member name="T:Simphony.Collections.NamedObjectBase">
            <summary>
            An abstract base class that provides an implementation of the <see cref="T:Simphony.Collections.INamedObject"/>
            interface.
            </summary>
        </member>
        <member name="M:Simphony.Collections.NamedObjectBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NamedObjectBase"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Collections.NamedObjectBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NamedObjectBase"/> class with a specified
            name.
            </summary>
            <param name="name">
            The name of the object.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the supplied name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the supplied name is an empty string.
            </exception>
        </member>
        <member name="E:Simphony.Collections.NamedObjectBase.NameChanged">
            <inheritdoc/>
        </member>
        <member name="E:Simphony.Collections.NamedObjectBase.NameChanging">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.NamedObjectBase.Name">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Collections.NamedObjectBase.Tag">
            <summary>
            Gets or sets the object that contains user defined data about the object.
            </summary>
            <value>
            The object that contains user defined data about the object.
            </value>
        </member>
        <member name="M:Simphony.Collections.NamedObjectBase.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectBase.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectBase.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectBase.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectBase.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectBase.OnNameChanged">
            <summary>
            Fires the <see cref="E:Simphony.Collections.NamedObjectBase.NameChanged"/> event.
            </summary>
        </member>
        <member name="M:Simphony.Collections.NamedObjectBase.OnNameChanging(System.String)">
            <summary>
            Fires the <see cref="E:Simphony.Collections.NamedObjectBase.NameChanging"/> event.
            </summary>
            <param name="name">
            The new name of the object.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="T:Simphony.Collections.NamedObjectComparer`1">
            <summary>
            Represents a named object comparison operation.
            </summary>
            <typeparam name="T">
            The type of named objects to compare.
            </typeparam>
        </member>
        <member name="M:Simphony.Collections.NamedObjectComparer`1.Compare(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Collections.NamedObjectComparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Collections.NameNotUniqueException">
            <summary>
            An exception indicating that the an attempt was made to change the name of a named object
            contained in a named object list to a name that was not unique.
            </summary>
        </member>
        <member name="M:Simphony.Collections.NameNotUniqueException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NameNotUniqueException"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Collections.NameNotUniqueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NameNotUniqueException"/> class with a
            specified error message.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:Simphony.Collections.NameNotUniqueException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NameNotUniqueException"/> class with a
            specified error message and a reference to the inner exception that is the cause of this
            exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference if no inner
            exception is specified.
            </param>
        </member>
        <member name="M:Simphony.Collections.NameNotUniqueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Collections.NameNotUniqueException"/> class from
            serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or
            destination.
            </param>
        </member>
        <member name="T:Simphony.ColorHelper">
            <summary>
            Helper class for colors.
            </summary>
        </member>
        <member name="M:Simphony.ColorHelper.FromHsb(System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:System.Drawing.Color"/> structure from the specified HSB (hue, saturation, brightness) values.
            </summary>
            <param name="hue">
            The hue component value (in the range 0.0 to 360.0) for the new <see cref="T:System.Drawing.Color"/>.
            </param>
            <param name="saturation">
            The saturation component value (in the range 0.0 to 1.0) for the new <see cref="T:System.Drawing.Color"/>.
            </param>
            <param name="brightness">
            The brightness component value (in the range 0.0 to 1.0) for the new <see cref="T:System.Drawing.Color"/>.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Color"/> that this method creates.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if any of the specified components are outside the valid range.
            </exception>
        </member>
        <member name="T:Simphony.ComponentModel.ExcelColumnConverter">
            <summary>
            A type converter for listing the columns in an Excel workbook.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ExcelColumnConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExcelColumnConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExcelColumnConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExcelColumnConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExcelColumnConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExcelColumnConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.ExcelColumnConverterWithHeaders">
            <summary>
            A type converter for listing the columns in an Excel workbook.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ExcelColumnConverterWithHeaders.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExcelColumnConverterWithHeaders.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.ExcelRowConverter">
            <summary>
            A type converter for listing the rows in an Excel workbook.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ExcelRowConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExcelRowConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExcelRowConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.ExcelWorksheetConverter">
            <summary>
            A type converter for listing the worksheets in an Excel workbook.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ExcelWorksheetConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExcelWorksheetConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExcelWorksheetConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.FriendlyTimeSpanConverter">
            <summary>
            A custom type converter to display time spans as easy-to-read strings.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.FriendlyTimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.BigImageAttribute">
            <summary>
            Custom attribute for associating a 32x32 image with an application element.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.BigImageAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.BigImageAttribute"/> class.
            </summary>
            <param name="resourceName">
            The name of the resource containing the image.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="P:Simphony.ComponentModel.BigImageAttribute.ResourceName">
            <summary>
            Gets the name of the resource containing the image.
            </summary>
            <value>
            The name of the resource containing the image.
            </value>
        </member>
        <member name="T:Simphony.ComponentModel.NotifyingObjectBase">
            <summary>
            An abstract base class that provides a default implementation of the
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </summary>
        </member>
        <member name="E:Simphony.ComponentModel.NotifyingObjectBase.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.NotifyingObjectBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Simphony.ComponentModel.NotifyingObjectBase.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property that changed.
            </param>
            <remarks>
            An empty or null value for <paramref name="propertyName"/> indicates that all of the
            properties have changed.
            </remarks>
        </member>
        <member name="T:Simphony.ComponentModel.RichTextColumnAttribute">
            <summary>
            A custom attribute used to specify that a column in a table editor should be a rich text
            column.
            </summary>
        </member>
        <member name="T:Simphony.ComponentModel.MemberComparer">
            <summary>
            A comparer that sorts members of a type by display index and/or name while taking the
            ParenthesizePropertyName attribute into account.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.MemberComparer.Compare(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.MemberComparer.Compare(System.ComponentModel.MemberDescriptor,System.ComponentModel.MemberDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.MemberComparer.Compare(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.CustomizableDateTimeEditor">
            <summary>
            A custom editor for visually editing <see cref="T:System.DateTime"/> objects.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.CustomizableDateTimeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.CustomizableDateTimeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.CustomizableDateTimeEditor.InitializeMonthCalendar(System.ComponentModel.ITypeDescriptorContext,System.Windows.Forms.MonthCalendar)">
            <summary>
            Initializes the month calendar control prior to editing.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context
            information.
            </param>
            <param name="monthCalendar">
            The month calendar control.
            </param>
        </member>
        <member name="T:Simphony.ComponentModel.DisplayIndexAttribute">
            <summary>
            A custom attribute used to specify the display index of a property.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.DisplayIndexAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.DisplayIndexAttribute"/> class.
            </summary>
            <param name="displayIndex">
            The zero-based display index for the property.
            </param>
        </member>
        <member name="P:Simphony.ComponentModel.DisplayIndexAttribute.DisplayIndex">
            <summary>
            Gets the zero-based display index for the property.
            </summary>
            <value>
            The zero-based display index for the property.
            </value>
        </member>
        <member name="T:Simphony.ComponentModel.DisplayFormatAttribute">
            <summary>
            A custom attribute used to specify the format of a property.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.DisplayFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.DisplayFormatAttribute"/> class.
            </summary>
            <param name="format">
            The format for the column.
            </param>
        </member>
        <member name="P:Simphony.ComponentModel.DisplayFormatAttribute.Format">
            <summary>
            Gets the format for the column.
            </summary>
            <value>
            The format for the column.
            </value>
        </member>
        <member name="T:Simphony.ComponentModel.NumericCollectionEditor`1">
            <summary>
            A design value editor that edits of a collection of numeric values.
            </summary>
            <typeparam name="T">
            The type of numeric value stored in the collection.
            </typeparam>
        </member>
        <member name="M:Simphony.ComponentModel.NumericCollectionEditor`1.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.NumericCollectionEditor`1.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.NumericCollectionEditor`1.NumericCollectionForm.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.NumericCollectionEditor`1.NumericCollectionForm"/> class.
            </summary>
            <param name="collection">
            The collection to edit.
            </param>
        </member>
        <member name="T:Simphony.ComponentModel.PrimitiveTypesAdapter">
            <summary>
            A type descriptor adapter that filters for primitive types.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.PrimitiveTypesAdapter.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.PrimitiveTypesAdapter"/> class.
            </summary>
            <param name="adaptedObject">
            The object to be wrapped by the adapter.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.PrimitiveTypesAdapter.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.PrimitiveTypesAdapter"/> class.
            </summary>
            <param name="adaptedObject">
            The object to be wrapped by the adapter.
            </param>
            <param name="category">
            The category to filter for; or a null reference if the adapter should not filter by category.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.PrimitiveTypesAdapter.CommitChanges">
            <summary>
            Commits changes made to the underlying object.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.PrimitiveTypesAdapter.GetProperties(System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.PrimitiveTypesAdapter.PrimitiveTypesDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.PrimitiveTypesAdapter.PrimitiveTypesDescriptor"/> class.
            </summary>
            <param name="property">
            The property descriptor to wrap.
            </param>
            <param name="values">
            A dictionary containing the values keyed by property name.
            </param>
        </member>
        <member name="M:Simphony.ComponentModel.PrimitiveTypesAdapter.PrimitiveTypesDescriptor.GetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.PrimitiveTypesAdapter.PrimitiveTypesDescriptor.SetValue(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.SaveFileNameEditor">
            <summary>
            Provides a user interface for selecting a file name to save to.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.SaveFileNameEditor.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Simphony.ComponentModel.SaveFileNameEditor"/> class.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.SaveFileNameEditor.Dispose">
            <summary>
            Releases all resources used by the object.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.SaveFileNameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.SaveFileNameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.SaveFileNameEditor.Dispose(System.Boolean)">
            <inheritdoc cref="M:Simphony.DisposableObjectBase.Dispose(System.Boolean)"/>
        </member>
        <member name="M:Simphony.ComponentModel.SaveFileNameEditor.InitializeDialog(System.Windows.Forms.SaveFileDialog)">
            <summary>
            Initializes the save file dialog when it is created.
            </summary>
            <param name="saveFileDialog">
            The <see cref="T:System.Windows.Forms.SaveFileDialog"/> to use to select a file name.
            </param>
        </member>
        <member name="T:Simphony.ComponentModel.TypeComparer">
            <summary>
            An <see cref="T:System.Collections.Generic.IComparer`1"/> that compares two types using the display name.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.TypeComparer.Compare(System.Type,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.YesNoConverter">
            <summary>
            A type converter for displaying a boolean value as a yes/no option in a property grid.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.YesNoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.YesNoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.PropertyComparer">
            <summary>
            A comparer that sorts properties by display index and/or name while taking the
            <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute"/> into account.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.PropertyComparer.Compare(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.PropertyComparer.Compare(System.ComponentModel.PropertyDescriptor,System.ComponentModel.PropertyDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.PropertyComparer.Compare(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.ReadOnlyProvider">
            <summary>
            A type description provider that makes an object read-only.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ReadOnlyProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.ReadOnlyProvider"/> class.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ReadOnlyProvider.GetTypeDescriptor(System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ReadOnlyProvider.ReadOnlyDescriptor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.ReadOnlyProvider.ReadOnlyDescriptor"/> class.
            </summary>
            <param name="objectType">
            The type of object being made read-only.
            </param>
        </member>
        <member name="M:Simphony.ComponentModel.ReadOnlyProvider.ReadOnlyDescriptor.GetAttributes">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.SortedExpandableObjectConverter">
            <summary>
            An expandable object converter that sorts its properties by display index/name.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.SortedExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.ReadOnlyPropertyDescriptor">
            <summary>
            A custom property descriptor that wraps an existing property descriptor and makes it
            read-only.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ReadOnlyPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.ReadOnlyPropertyDescriptor"/> class.
            </summary>
            <param name="property">
            The property descriptor to wrap.
            </param>
            <param name="isReadOnly">
            A value indicating whether the property should be read-only.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified property descriptor is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.ReadOnlyPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.ReadOnlyPropertyDescriptor"/> class.
            </summary>
            <param name="property">
            The property descriptor to wrap.
            </param>
            <param name="isReadOnly">
            A value indicating whether the property should be read-only.
            </param>
            <param name="shouldSerialize">
            A value indicating whether the value of this property needs to be persisted.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified property descriptor is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.ComponentModel.ReadOnlyPropertyDescriptor.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ReadOnlyPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.WrappedPropertyDescriptor">
            <summary>
            Abstract base class for property descriptors that override the behaviour of another property
            descriptor.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.WrappedPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.WrappedPropertyDescriptor"/> class.
            </summary>
            <param name="propertyDescriptor">
            The property descriptor to be wrapped.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified property descriptor is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.ComponentModel.WrappedPropertyDescriptor.Attributes">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.WrappedPropertyDescriptor.Category">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.WrappedPropertyDescriptor.ComponentType">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.WrappedPropertyDescriptor.Converter">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.WrappedPropertyDescriptor.Description">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.WrappedPropertyDescriptor.DesignTimeOnly">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.WrappedPropertyDescriptor.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.WrappedPropertyDescriptor.IsBrowsable">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.WrappedPropertyDescriptor.IsLocalizable">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.WrappedPropertyDescriptor.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.WrappedPropertyDescriptor.Name">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.WrappedPropertyDescriptor.PropertyType">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.WrappedPropertyDescriptor.SupportsChangeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.WrappedPropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.WrappedPropertyDescriptor.CanResetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.WrappedPropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.WrappedPropertyDescriptor.GetEditor(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.WrappedPropertyDescriptor.GetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.WrappedPropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.WrappedPropertyDescriptor.ResetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.WrappedPropertyDescriptor.SetValue(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.WrappedPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.UITypeEditorLauncher">
            <summary>
            A class that allows type editors to be invoked from code.
            </summary>
            <summary>
            A class that allows type editors to be invoked from code.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.UITypeEditorLauncher.Edit(System.Object)">
            <summary>
            Opens the type editor for the specified object.
            </summary>
            <param name="component">
            The object to be edited.
            </param>
            <returns>
            The new value of the object.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.UITypeEditorLauncher.Edit(System.Object,System.Object)">
            <summary>
            Opens the type editor for the specified object.
            </summary>
            <param name="component">
            The object to be edited.
            </param>
            <param name="instance">
            The object containing the object to be edited.
            </param>
            <returns>
            The new value of the object.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object or the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.UITypeEditorLauncher.Edit(System.Object,System.Object,System.Type)">
            <summary>
            Opens the type editor for the specified object.
            </summary>
            <param name="component">
            The object to be edited.
            </param>
            <param name="instance">
            The object containing the object to be edited.
            </param>
            <param name="editorBaseType">
            The base type of the editor you want to launch.
            </param>
            <returns>
            The new value of the object.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object or the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.UITypeEditorLauncher.Edit(System.Object,System.Type)">
            <summary>
            Opens the type editor for the specified object.
            </summary>
            <param name="component">
            The object to be edited.
            </param>
            <param name="editorBaseType">
            The base type of the editor you want to launch.
            </param>
            <returns>
            The new value of the object.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object or the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.UITypeEditorLauncher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.UITypeEditorLauncher"/> class. Prevents a
            default instance of the UITypeEditorLauncher class from being created.
            </summary>
        </member>
        <member name="P:Simphony.ComponentModel.UITypeEditorLauncher.Container">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.UITypeEditorLauncher.Instance">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.UITypeEditorLauncher.PropertyDescriptor">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.UITypeEditorLauncher.Edit(System.ComponentModel.IContainer,System.Object,System.String)">
            <summary>
            Opens the type editor for the specified property of an object.
            </summary>
            <param name="container">
            The container of the object containing the property to be edited.
            </param>
            <param name="instance">
            The object containing the property to be edited.
            </param>
            <param name="propertyName">
            The name of the property to be edited.
            </param>
            <returns>
            The new value of the object.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object or the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified object does not have a property of the specified name.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.UITypeEditorLauncher.Edit(System.ComponentModel.IContainer,System.Object,System.String,System.Type)">
            <summary>
            Opens the type editor for the specified property of an object.
            </summary>
            <param name="container">
            The container of the object containing the property to be edited.
            </param>
            <param name="instance">
            The object containing the property to be edited.
            </param>
            <param name="propertyName">
            The name of the property to be edited.
            </param>
            <param name="editorBaseType">
            The base type of the editor you want to launch.
            </param>
            <returns>
            The new value of the object.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object, the specified name, or the specified type is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified object does not have a property of the specified name.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.UITypeEditorLauncher.Edit(System.Object,System.String)">
            <summary>
            Opens the type editor for the specified property of an object.
            </summary>
            <param name="instance">
            The object containing the property to be edited.
            </param>
            <param name="propertyName">
            The name of the property to be edited.
            </param>
            <returns>
            The new value of the object.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object or the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified object does not have a property of the specified name.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.UITypeEditorLauncher.Edit(System.Object,System.String,System.Type)">
            <summary>
            Opens the type editor for the specified property of an object.
            </summary>
            <param name="instance">
            The object containing the property to be edited.
            </param>
            <param name="propertyName">
            The name of the property to be edited.
            </param>
            <param name="editorBaseType">
            The base type of the editor you want to launch.
            </param>
            <returns>
            The new value of the object.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object, the specified name, or the specified type is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified object does not have a property of the specified name.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.UITypeEditorLauncher.CloseDropDown">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.UITypeEditorLauncher.DropDownControl(System.Windows.Forms.Control)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.UITypeEditorLauncher.GetService(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.UITypeEditorLauncher.OnComponentChanged">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.UITypeEditorLauncher.OnComponentChanging">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.UITypeEditorLauncher.ShowDialog(System.Windows.Forms.Form)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.AssemblyExpiredException">
            <summary>
            An exception indicating that the an assembly has expired.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.AssemblyExpiredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.AssemblyExpiredException"/> class.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.AssemblyExpiredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.AssemblyExpiredException"/> class with a
            specified error message.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:Simphony.ComponentModel.AssemblyExpiredException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.AssemblyExpiredException"/> class with a
            specified error message and a reference to the inner exception that is the cause of this
            exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference if no inner
            exception is specified.
            </param>
        </member>
        <member name="M:Simphony.ComponentModel.AssemblyExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.AssemblyExpiredException"/> class from
            serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or
            destination.
            </param>
        </member>
        <member name="T:Simphony.ComponentModel.CollectionEditor`1">
            <summary>
            A design value editor that provides a better collection editor than that of the .NET
            framework.
            </summary>
            <typeparam name="T">
            The type of item stored in the collection.
            </typeparam>
        </member>
        <member name="P:Simphony.ComponentModel.CollectionEditor`1.Component">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.CollectionEditor`1.Container">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.CollectionEditor`1.DesignMode">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.CollectionEditor`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.CollectionEditor`1.Context">
            <summary>
            Gets a type descriptor context that indicates the current context.
            </summary>
            <value>
            A type descriptor context that indicates the current context.
            </value>
        </member>
        <member name="M:Simphony.ComponentModel.CollectionEditor`1.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.CollectionEditor`1.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.CollectionEditor`1.GetService(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.CollectionEditor`1.CollectionEditorAdapter">
            <summary>
            The list-item type stored in the collection editor's list box.
            </summary>
            <remarks>
            The purpose of this class is to wrap the actual collection item, and ensure
            that the ToString() method does not return null or throw an exception.
            </remarks>
        </member>
        <member name="M:Simphony.ComponentModel.CollectionEditor`1.CollectionEditorAdapter.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.CollectionEditor`1.CollectionEditorAdapter"/> class.
            </summary>
            <param name="adaptedObject">
            The object to be wrapped by the adapter.
            </param>
            <param name="isReadOnly">
            A value indicating whether the properties of the adapted object should be read-only.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.CollectionEditor`1.CollectionEditorAdapter.ToString">
            <summary>
            Generates a string representation of the current object.
            </summary>
            <returns>
            A string representation for the current object.
            </returns>
        </member>
        <member name="T:Simphony.ComponentModel.CollectionEditor`1.CollectionEditorForm">
            <summary>
            The form displayed by the collection editor.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.CollectionEditor`1.CollectionEditorForm.#ctor(System.ComponentModel.ISite,System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.CollectionEditor`1.CollectionEditorForm"/> class.
            </summary>
            <param name="site">
            The site of the editor.
            </param>
            <param name="collection">
            The collection to edit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified site or the specified collection is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.CollectionEditor`1.NamedObjectListEditorForm.#ctor(System.ComponentModel.ISite,System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.CollectionEditor`1.NamedObjectListEditorForm"/> class.
            </summary>
            <param name="site">
            The site of the editor.
            </param>
            <param name="collection">
            The collection to edit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified site or the specified collection is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.ComponentModel.ColumnAlignmentAttribute">
            <summary>
            A custom attribute used to specify the alignment of a column in the table editor.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ColumnAlignmentAttribute.#ctor(System.Windows.Forms.DataGridViewContentAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.ColumnAlignmentAttribute"/> class.
            </summary>
            <param name="alignment">
            The alignment for the column.
            </param>
        </member>
        <member name="P:Simphony.ComponentModel.ColumnAlignmentAttribute.Alignment">
            <summary>
            Gets the alignment for the column.
            </summary>
            <value>
            The alignment for the column.
            </value>
        </member>
        <member name="T:Simphony.ComponentModel.ColumnDisplayIndexAttribute">
            <summary>
            A custom attribute used to specify the display index of a column in the table editor.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ColumnDisplayIndexAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.ColumnDisplayIndexAttribute"/> class.
            </summary>
            <param name="displayIndex">
            The zero-based display index for the column.
            </param>
        </member>
        <member name="P:Simphony.ComponentModel.ColumnDisplayIndexAttribute.DisplayIndex">
            <summary>
            Gets the zero-based display index for the column.
            </summary>
            <value>
            The zero-based display index for the column.
            </value>
        </member>
        <member name="T:Simphony.ComponentModel.ColumnWidthAttribute">
            <summary>
            A custom attribute used to specify the width of a column in the table editor.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ColumnWidthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.ColumnWidthAttribute"/> class.
            </summary>
            <param name="width">
            The width for the column.
            </param>
        </member>
        <member name="M:Simphony.ComponentModel.ColumnWidthAttribute.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.ColumnWidthAttribute"/> class.
            </summary>
            <param name="width">
            The width for the column.
            </param>
            <param name="canExpand">
            True if the column can grow to fill the available space; otherwise false.
            </param>
        </member>
        <member name="P:Simphony.ComponentModel.ColumnWidthAttribute.CanExpand">
            <summary>
            Gets a value indicating whether the column can grow to fill the available space.
            </summary>
            <value>
            True if the column can grow to fill the available space; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.ComponentModel.ColumnWidthAttribute.Width">
            <summary>
            Gets the width for the column.
            </summary>
            <value>
            The width for the column.
            </value>
        </member>
        <member name="T:Simphony.ComponentModel.ConnectionStringEditor">
            <summary>
            A design value editor for database connection strings.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ConnectionStringEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the GetEditStyle method.
            </summary>
            <param name="context">
            An object that can be used to gain additional context information.
            </param>
            <param name="provider">
            An object that this editor can use to obtain services.
            </param>
            <param name="value">
            The object to edit.
            </param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the
            same object it was passed.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.ConnectionStringEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the EditValue method.
            </summary>
            <param name="context">
            An object that can be used to gain additional context information.
            </param>
            <returns>
            A value that indicates the style of editor used by the EditValue method if
            supported; otherwise UITypeEditorEditStyle.None.
            </returns>
        </member>
        <member name="T:Simphony.ComponentModel.ColumnFormatAttribute">
            <summary>
            A custom attribute used to specify the format of a column in the table editor.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ColumnFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.ColumnFormatAttribute"/> class.
            </summary>
            <param name="format">
            The format for the column.
            </param>
        </member>
        <member name="P:Simphony.ComponentModel.ColumnFormatAttribute.Format">
            <summary>
            Gets the format for the column.
            </summary>
            <value>
            The format for the column.
            </value>
        </member>
        <member name="T:Simphony.ComponentModel.ImageAttribute">
            <summary>
            Custom attribute for associating a 16x16 image with an application element.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ImageAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.ImageAttribute"/> class.
            </summary>
            <param name="resourceName">
            The name of the resource containing the image.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="P:Simphony.ComponentModel.ImageAttribute.ResourceName">
            <summary>
            Gets the name of the resource containing the image.
            </summary>
            <value>
            The name of the resource containing the image.
            </value>
        </member>
        <member name="T:Simphony.ComponentModel.PercentageConverter">
            <summary>
            A custom type converter to be used for properties that represent percentages.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.PercentageConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.PercentageConverter"/> class.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.PercentageConverter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.PercentageConverter"/> class.
            </summary>
            <param name="decimalPlaces">
            The number of decimal places to round to.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the number of decimal places is outside the range of 0 to 14.
            </exception>
        </member>
        <member name="P:Simphony.ComponentModel.PercentageConverter.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places the converter should display.
            </summary>
            <value>
            The number of decimal places the converter should display.
            </value>
        </member>
        <member name="P:Simphony.ComponentModel.PercentageConverter.ExcelFormat">
            <summary>
            Gets the Excel format string that is equivalent to the current converter.
            </summary>
            <value>
            The Excel format string that is equivalent to the current converter.
            </value>
        </member>
        <member name="P:Simphony.ComponentModel.PercentageConverter.FormatString">
            <summary>
            Gets the format string that is equivalent to the current converter.
            </summary>
            <value>
            The format string that is equivalent to the current converter.
            </value>
        </member>
        <member name="M:Simphony.ComponentModel.PercentageConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.PercentageConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.PercentageConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.SpinBoxColumnAttribute">
            <summary>
            A custom attribute used to specify that a column in a table editor should be
            a spin box column.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.SpinBoxColumnAttribute.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.SpinBoxColumnAttribute"/> class.
            </summary>
            <param name="minimum">
            The minimum allowed value for the spin box.
            </param>
            <param name="maximum">
            The maximum allowed value for the spin box.
            </param>
            <param name="increment">
            The value to increment or decrement the spin box when the up or down buttons
            are clicked.
            </param>
            <param name="decimalPlaces">
            The number of decimal places to display in the spin box.
            </param>
            <param name="thousandsSeparator">
            True if the thousands separator should be displayed; otherwise false.
            </param>
        </member>
        <member name="P:Simphony.ComponentModel.SpinBoxColumnAttribute.DecimalPlaces">
            <summary>
            Gets the number of decimal places to display in the spin box.
            </summary>
            <value>
            The number of decimal places to display in the spin box.
            </value>
        </member>
        <member name="P:Simphony.ComponentModel.SpinBoxColumnAttribute.Increment">
            <summary>
            Gets the value to increment or decrement the spin box when the up or
            down buttons are clicked.
            </summary>
            <value>
            The value to increment or decrement the spin box when the up or down buttons
            are clicked.
            </value>
        </member>
        <member name="P:Simphony.ComponentModel.SpinBoxColumnAttribute.Maximum">
            <summary>
            Gets the maximum allowed value for the spin box.
            </summary>
            <value>
            The maximum allowed value for the spin box.
            </value>
        </member>
        <member name="P:Simphony.ComponentModel.SpinBoxColumnAttribute.Minimum">
            <summary>
            Gets the minimum allowed value for the spin box.
            </summary>
            <value>
            The minimum allowed value for the spin box.
            </value>
        </member>
        <member name="P:Simphony.ComponentModel.SpinBoxColumnAttribute.ThousandsSeparator">
            <summary>
            Gets a value indicating whether a thousands separator is displayed in
            the spin box when appropriate.
            </summary>
            <value>
            True if the thousands separator should be displayed; otherwise false.
            </value>
        </member>
        <member name="T:Simphony.ComponentModel.DialogConverter">
            <summary>
            A custom type converter to be used in conjunction with a dialog editor.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.DialogConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">
            A format context.
            </param>
            <param name="culture">
            The culture to use as the current culture.
            </param>
            <param name="value">
            The object to convert.
            </param>
            <param name="destinationType">
            The type to convert to.
            </param>
            <returns>
            An object that represents the converted value.
            </returns>
        </member>
        <member name="T:Simphony.ComponentModel.ExtendedCollectionConverter">
            <summary>
            A custom type converter to be used in conjunction with the ExtendedCollectionEditor.
            </summary>
            <remarks>
            This class can be used to generate the "(Collection)" effect in the property grid if
            it is not appearing.
            </remarks>
        </member>
        <member name="M:Simphony.ComponentModel.ExtendedCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.EditorSizeAttribute">
            <summary>
            A custom attribute used to specify the size of a collection or table editor.
            </summary>
        </member>
        <member name="F:Simphony.ComponentModel.EditorSizeAttribute.DefaultSize">
            <summary>
            Gets the default size for an editor.
            </summary>
        </member>
        <member name="F:Simphony.ComponentModel.EditorSizeAttribute.MinimumSize">
            <summary>
            Gets the minimum size for an editor.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.EditorSizeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.EditorSizeAttribute"/> class.
            </summary>
            <param name="width">
            The width of the table.
            </param>
            <param name="height">
            The height of the table.
            </param>
        </member>
        <member name="P:Simphony.ComponentModel.EditorSizeAttribute.Size">
            <summary>
            Gets the size of the editor.
            </summary>
            <value>
            The size of the editor.
            </value>
        </member>
        <member name="T:Simphony.ComponentModel.SortableDateTimeConverter">
            <summary>
            A custom type converter that formats date and times using the sortable format specifier.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.SortableDateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.CurrencyConverter">
            <summary>
            A custom type converter to be used for properties that represent monetary amounts.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.CurrencyConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.CurrencyConverter"/> class.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.CurrencyConverter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.CurrencyConverter"/> class.
            </summary>
            <param name="decimalPlaces">
            The number of decimal places to round to.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the number of decimal places is outside the range of 0 to 16.
            </exception>
        </member>
        <member name="P:Simphony.ComponentModel.CurrencyConverter.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places the converter should display.
            </summary>
            <value>
            The number of decimal places the converter should display.
            </value>
        </member>
        <member name="P:Simphony.ComponentModel.CurrencyConverter.ExcelFormat">
            <summary>
            Gets the Excel format string that is equivalent to the current converter.
            </summary>
            <value>
            The Excel format string that is equivalent to the current converter.
            </value>
        </member>
        <member name="P:Simphony.ComponentModel.CurrencyConverter.FormatString">
            <summary>
            Gets the format string that is equivalent to the current converter.
            </summary>
            <value>
            The format string that is equivalent to the current converter.
            </value>
        </member>
        <member name="M:Simphony.ComponentModel.CurrencyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.CurrencyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.CurrencyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.DataTableConverter">
            <summary>
            A custom type converter that prevents the default expandable object behaviour of
            data tables in the property grid.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.DataTableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">
            A format context.
            </param>
            <param name="destinationType">
            The type in question.
            </param>
            <returns>
            True if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.DataTableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">
            A format context.
            </param>
            <param name="culture">
            The culture to use as the current culture.
            </param>
            <param name="value">
            The object to convert.
            </param>
            <param name="destinationType">
            The type to convert to.
            </param>
            <returns>
            An object that represents the converted value.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.DataTableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context">
            An ITypeDescriptorContext that provides a format context.
            </param>
            <returns>
            True if GetProperties should be called to find the properties of this
            object; otherwise, false.
            </returns>
        </member>
        <member name="T:Simphony.ComponentModel.DialogEditor`1">
            <summary>
            A design value editor that can provide a user interface for representing
            and editing the values of formulas.
            </summary>
            <typeparam name="T">
            The type of form used to edit the property.
            </typeparam>
            <remarks>
            The type of form specified must provide a constructor that takes as a parameter the
            object being edited.
            </remarks>
        </member>
        <member name="M:Simphony.ComponentModel.DialogEditor`1.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.DialogEditor`1.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.ExtendedCollectionEditor">
            <summary>
            Extends the CollectionEditor so the descriptions in the EditorForm's PropertyGrid is visible,
            and making the collection of new item types include all concrete types that derive from the
            base type of the collection.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ExtendedCollectionEditor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.ExtendedCollectionEditor"/> class using the
            specified collection type.
            </summary>
            <param name="type">
            The type of the collection for this editor to edit.
            </param>
        </member>
        <member name="M:Simphony.ComponentModel.ExtendedCollectionEditor.CreateCollectionForm">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExtendedCollectionEditor.CreateCollectionItemType">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExtendedCollectionEditor.CreateNewItemTypes">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExtendedCollectionEditor.ShowDescription(System.Windows.Forms.Control)">
            <summary>
            This method recursively looks for the PropertyGrid residing in the CollectionForm and
            sets the description of the said PropertyGrid visible.
            </summary>
            <param name="control">The current control.</param>
        </member>
        <member name="T:Simphony.ComponentModel.HashSetEditor`1">
            <summary>
            A custom type editor for editing a HashSet&lt;T&gt; with a CollectionEditor.
            </summary>
            <typeparam name="T">
            The type of objects contained within the HashSet&lt;T&gt; to be edited.
            </typeparam>
        </member>
        <member name="M:Simphony.ComponentModel.HashSetEditor`1.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.HashSetEditor`1"/> class using the specified
            collection type.
            </summary>
            <param name="type">
            The type of the collection for this editor to edit.
            </param>
        </member>
        <member name="M:Simphony.ComponentModel.HashSetEditor`1.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.LimitedListConverter`1">
            <summary>
            Abstract base class for type converters that limit a selection to a list.
            </summary>
            <typeparam name="T">
            The type of values the in the list.
            </typeparam>
        </member>
        <member name="P:Simphony.ComponentModel.LimitedListConverter`1.Names">
            <summary>
            Gets a sequence of display names corresponding to the values in the list.
            </summary>
            <value>
            A sequence of display names corresponding to the values in the list.
            </value>
            <remarks>
            Derived classes can override this property and return a sequence of display names
            for the items in the list.  The default behaviour is to simply return the items
            in the Values sequence converted to strings.
            </remarks>
        </member>
        <member name="P:Simphony.ComponentModel.LimitedListConverter`1.Values">
            <summary>
            Gets a sequence describing the possible values in the list.
            </summary>
            <value>
            A sequence describing the possible values in the list.
            </value>
            <remarks>
            Derived classes should override this property and return a sequence a valid values.
            </remarks>
        </member>
        <member name="M:Simphony.ComponentModel.LimitedListConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type
            of this converter, using the specified context.
            </summary>
            <param name="context">
            A format context.
            </param>
            <param name="sourceType">
            The type to be converted from.
            </param>
            <returns>
            True if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.LimitedListConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">
            A format context.
            </param>
            <param name="destinationType">
            The type in question.
            </param>
            <returns>
            True if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.LimitedListConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context
            and culture information.
            </summary>
            <param name="context">
            A format context.
            </param>
            <param name="culture">
            The culture to use as the current culture.
            </param>
            <param name="value">
            The object to convert.
            </param>
            <returns>
            An object that represents the converted value.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.LimitedListConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">
            A format context.
            </param>
            <param name="culture">
            The culture to use as the current culture.
            </param>
            <param name="value">
            The object to convert.
            </param>
            <param name="destinationType">
            The type to convert to.
            </param>
            <returns>
            An object that represents the converted value.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.LimitedListConverter`1.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is
            designed for when provided with a format context.
            </summary>
            <param name="context">
            The format context.
            </param>
            <returns>
            A collection of standard values for the data type this type converter is designed for.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.LimitedListConverter`1.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values is an exclusive list of possible
            values, using the specified context.
            </summary>
            <param name="context">
            The format context.
            </param>
            <returns>
            True if the collection of standard values is an exclusive list of possible values;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.LimitedListConverter`1.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked
            from a list, using the specified context.
            </summary>
            <param name="context">
            The format context.
            </param>
            <returns>
            True if this object supports a standard set of values that can be picked from a list;
            otherwise, false.
            </returns>
        </member>
        <member name="T:Simphony.ComponentModel.ReadOnlyDataTableEditor">
            <summary>
            Represents a read-only <see cref="T:Simphony.ComponentModel.DialogEditor`1"/> for viewing output
            tabular data. Extension methods for modifying how DataColumns are displayed in the
            <see cref="T:Simphony.ComponentModel.DataTableEditorForm"/> are in the Simphony.Windows.Forms namespace.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ReadOnlyDataTableEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.TableConverter">
            <summary>
            A custom type converter to be used in conjunction with the table editor.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.TableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.TableEditor`1">
            <summary>
            A design value editor that provides a table-like interface for editing lists.
            </summary>
            <typeparam name="T">
            The type of item stored in the list.
            </typeparam>
        </member>
        <member name="M:Simphony.ComponentModel.TableEditor`1.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TableEditor`1.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.TableEditor`1.TableEditorForm">
            <summary>
            The form displayed by the table editor.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.TableEditor`1.TableEditorForm.#ctor(System.ComponentModel.IBindingList,System.ComponentModel.ITypeDescriptorContext,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.TableEditor`1.TableEditorForm"/> class.
            </summary>
            <param name="list">
            The binding list to edit.
            </param>
            <param name="context">
            The type descriptor context that was passed to the editor.
            </param>
            <param name="isReadOnly">
            A value indicating whether the form should be read-only.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified list is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.TableEditor`1.TableEditorForm.System#IServiceProvider#GetService(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TableEditor`1.TableEditorForm.GetService(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.Vector3DConverter">
            <summary>
            Custom type converter for two-dimensional vectors.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.Vector3DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.Vector3DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.Vector3DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.Vector3DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.Vector3DConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.Vector3DConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.RoundingConverter">
            <summary>
            Custom type converter to round floating-point values to a certain number of decimal places.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.RoundingConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.RoundingConverter"/> class.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.RoundingConverter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.RoundingConverter"/> class.
            </summary>
            <param name="decimalPlaces">
            The number of decimal places to round to.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the number of decimal places is outside the range of 0 to 16.
            </exception>
        </member>
        <member name="P:Simphony.ComponentModel.RoundingConverter.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places the converter should display.
            </summary>
            <value>
            The number of decimal places the converter should display.
            </value>
        </member>
        <member name="P:Simphony.ComponentModel.RoundingConverter.ExcelFormat">
            <summary>
            Gets the Excel format string that is equivalent to the current converter.
            </summary>
            <value>
            The Excel format string that is equivalent to the current converter.
            </value>
        </member>
        <member name="P:Simphony.ComponentModel.RoundingConverter.FormatString">
            <summary>
            Gets the format string that is equivalent to the current converter.
            </summary>
            <value>
            The format string that is equivalent to the current converter.
            </value>
        </member>
        <member name="M:Simphony.ComponentModel.RoundingConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.RoundingConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.RoundingConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.Vector2DConverter">
            <summary>
            Custom type converter for two-dimensional vectors.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.Vector2DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.Vector2DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.Vector2DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.Vector2DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.Vector2DConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.Vector2DConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.EnumeratedStatisticExplodedAttribute">
            <summary>
            An attribute for specifying an exploded pie wedge in an enumerated statistic.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.EnumeratedStatisticExplodedAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.EnumeratedStatisticExplodedAttribute"/> class.
            </summary>
            <param name="isExploded">
            A value indicating whether or not the pie wedge should be exploded.
            </param>
        </member>
        <member name="P:Simphony.ComponentModel.EnumeratedStatisticExplodedAttribute.IsExploded">
            <summary>
            Gets a value indicating whether or not the pie wedge should be exploded.
            </summary>
            <value>
            True if the pie wedge should be exploded; otherwise false.
            </value>
        </member>
        <member name="T:Simphony.ComponentModel.EnumeratedStatisticColorAttribute">
            <summary>
            An attribute for associating colors with the enumerators of an enumerated statistic.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.EnumeratedStatisticColorAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.EnumeratedStatisticColorAttribute"/> class.
            </summary>
            <param name="red">
            The red component value for the color.
            </param>
            <param name="green">
            The green component value for the color.
            </param>
            <param name="blue">
            The blue component value for the color.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the any of the specified red, green, or blue values is less than 0 or greater than 255.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.EnumeratedStatisticColorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.EnumeratedStatisticColorAttribute"/> class.
            </summary>
            <param name="name">
            A string that is the name of a predefined color.
            </param>
        </member>
        <member name="P:Simphony.ComponentModel.EnumeratedStatisticColorAttribute.Color">
            <summary>
            Gets the color.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="T:Simphony.ComponentModel.PointFConverter">
            <summary>
            Custom type converter for the PointF structure.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.PointFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.PointFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.PointFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.PointFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.PointFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.DataTableEditorForm">
            <summary>
            A form to use with the DialogEditor for editing a DataTable.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.DataTableEditorForm.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.DataTableEditorForm"/> class.
            </summary>
            <param name="dataTable">
            The DataTable to edit.
            </param>
        </member>
        <member name="M:Simphony.ComponentModel.DataTableEditorForm.#ctor(System.Data.DataTable,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.DataTableEditorForm"/> class and sets up the
            UI to display a DataTable.
            </summary>
            <param name="dataTable">The DataTable to display.</param>
            <param name="readOnly">Determines whether the DataTable contents will be editable.</param>
        </member>
        <member name="F:Simphony.ComponentModel.DataTableEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.DataTableEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.ComponentModel.DataTableEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.ComponentModel.IconAttribute">
            <summary>
            Class level attribute for associating an icon with a class.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.IconAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.IconAttribute"/> class.
            </summary>
            <param name="resourceName">
            The name of the resource containing the icon.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="P:Simphony.ComponentModel.IconAttribute.ResourceName">
            <summary>
            Gets the name of the resource containing the icon.
            </summary>
            <value>
            The name of the resource containing the icon.
            </value>
        </member>
        <member name="T:Simphony.ComponentModel.XmlIncludeAssemblyQualifiedNameAttribute">
            <summary>
            Class level attribute indicating whether or not to read/write type information when
            performing XML serialization/deserialization.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.XmlIncludeAssemblyQualifiedNameAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.XmlIncludeAssemblyQualifiedNameAttribute"/>
            class.
            </summary>
            <param name="includeAssemblyQualifiedName">
            A value indicating whether or not to read/write type information.
            </param>
        </member>
        <member name="P:Simphony.ComponentModel.XmlIncludeAssemblyQualifiedNameAttribute.IncludeAssemblyQualifiedName">
            <summary>
            Gets a value indicating whether or not to read/write type information.
            </summary>
            <value>
            A value indicating whether or not to read/write type information.
            </value>
        </member>
        <member name="T:Simphony.ComponentModel.AssemblyExpiryDateAttribute">
            <summary>
            Assembly level attribute for storing an assembly's expiry date.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.AssemblyExpiryDateAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.AssemblyExpiryDateAttribute"/> class.
            </summary>
            <param name="year">
            The year (1 through 9999).
            </param>
            <param name="month">
            The month (1 through 12).
            </param>
            <param name="day">
            The day (1 through the number of days in month).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters do not correspond to a valid date.
            </exception>
        </member>
        <member name="P:Simphony.ComponentModel.AssemblyExpiryDateAttribute.Day">
            <summary>
            Gets the day on which the assembly expires.
            </summary>
            <value>
            The day on which the assembly expires.
            </value>
        </member>
        <member name="P:Simphony.ComponentModel.AssemblyExpiryDateAttribute.Month">
            <summary>
            Gets the month on which the assembly expires.
            </summary>
            <value>
            The month on which the assembly expires.
            </value>
        </member>
        <member name="P:Simphony.ComponentModel.AssemblyExpiryDateAttribute.Year">
            <summary>
            Gets the year on which the assembly expires.
            </summary>
            <value>
            The year on which the assembly expires.
            </value>
        </member>
        <member name="T:Simphony.ComponentModel.ReadOnlyAdapter">
            <summary>
            A type descriptor adapter that can make all properties of an object read-only.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ReadOnlyAdapter.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.ReadOnlyAdapter"/> class.
            </summary>
            <param name="adaptedObject">
            The object to be wrapped by the adapter.
            </param>
            <param name="isReadOnly">
            A value indicating whether the properties of the adapted object should be read-only.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.ReadOnlyAdapter.GetProperties(System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.ExpandableCollectionConverter">
            <summary>
            A custom type converter for expandable collections.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableCollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableCollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.ExpandableCollectionConverter.ExpandableCollectionPropertyDescriptor">
            <summary>
            A custom property descriptor that represents an item in a list.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableCollectionConverter.ExpandableCollectionPropertyDescriptor.#ctor(System.Collections.IList,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.ExpandableCollectionConverter.ExpandableCollectionPropertyDescriptor"/>
            class.
            </summary>
            <param name="list">
            The list the item is contained in.
            </param>
            <param name="index">
            The index of the item the property descriptor is representing.
            </param>
        </member>
        <member name="P:Simphony.ComponentModel.ExpandableCollectionConverter.ExpandableCollectionPropertyDescriptor.ComponentType">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.ExpandableCollectionConverter.ExpandableCollectionPropertyDescriptor.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.ExpandableCollectionConverter.ExpandableCollectionPropertyDescriptor.PropertyType">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableCollectionConverter.ExpandableCollectionPropertyDescriptor.CanResetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableCollectionConverter.ExpandableCollectionPropertyDescriptor.GetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableCollectionConverter.ExpandableCollectionPropertyDescriptor.ResetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableCollectionConverter.ExpandableCollectionPropertyDescriptor.SetValue(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableCollectionConverter.ExpandableCollectionPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.ExpandableCollectionEditor">
            <summary>
            A custom type editor for expandable collections.
            </summary>
            <remarks>
            This editor is used to suppress the [...] button in property grid.
            </remarks>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableCollectionEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.ExpandableDictionaryConverter">
            <summary>
            A custom type converter for expandable dictionaries.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableDictionaryConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableDictionaryConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableDictionaryConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableDictionaryConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.ExpandableDictionaryConverter.ExpandableDictionaryPropertyDescriptor">
            <summary>
            A custom property descriptor that represents an item in a dictionary.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableDictionaryConverter.ExpandableDictionaryPropertyDescriptor.#ctor(System.Collections.IDictionary,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.ExpandableDictionaryConverter.ExpandableDictionaryPropertyDescriptor"/>
            class.
            </summary>
            <param name="dictionary">
            The dictionary the item is contained in.
            </param>
            <param name="key">
            The key of the item the property descriptor is representing.
            </param>
            <param name="isReadOnly">
            True if the property descriptor is read-only; otherwise false.
            </param>
        </member>
        <member name="P:Simphony.ComponentModel.ExpandableDictionaryConverter.ExpandableDictionaryPropertyDescriptor.ComponentType">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.ExpandableDictionaryConverter.ExpandableDictionaryPropertyDescriptor.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.ExpandableDictionaryConverter.ExpandableDictionaryPropertyDescriptor.Name">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.ExpandableDictionaryConverter.ExpandableDictionaryPropertyDescriptor.PropertyType">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableDictionaryConverter.ExpandableDictionaryPropertyDescriptor.CanResetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableDictionaryConverter.ExpandableDictionaryPropertyDescriptor.GetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableDictionaryConverter.ExpandableDictionaryPropertyDescriptor.ResetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableDictionaryConverter.ExpandableDictionaryPropertyDescriptor.SetValue(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.ExpandableDictionaryConverter.ExpandableDictionaryPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ComponentModel.TypeDescriptorAdapter">
            <summary>
            Abstract base class for type descriptor adapters.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.TypeDescriptorAdapter"/> class.
            </summary>
            <param name="adaptedObject">
            The object to be wrapped by the adapter.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.ComponentModel.TypeDescriptorAdapter.AdaptedObject">
            <summary>
            Gets the object being wrapped by the adapter.
            </summary>
            <value>
            The object being wrapped by the adapter.
            </value>
        </member>
        <member name="P:Simphony.ComponentModel.TypeDescriptorAdapter.AdaptedType">
            <summary>
            Gets the type of object being wrapped by the adapter.
            </summary>
            <value>
            The type of object being wrapped by the adapter.
            </value>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.GetAttributes">
            <summary>
            Returns a collection of custom attributes for the adapted object.
            </summary>
            <returns>
            A collection containing the attributes for the adapted object.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.GetClassName">
            <summary>
            Returns the class name of the adapted object.
            </summary>
            <returns>
            The class name of the adapted object, or a null reference if the class does not have a name.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.GetComponentName">
            <summary>
            Returns the name of the adapted object.
            </summary>
            <returns>
            The name of the adapted object, or a null reference if the adapted object does not have a name.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.GetConverter">
            <summary>
            Returns a type converter for the adapted object.
            </summary>
            <returns>
            A type converter that is the converter for the adapted object, or a null reference if there
            is no type converter for the adapted object.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.GetDefaultEvent">
            <summary>
            Returns the default event for the adapted object.
            </summary>
            <returns>
            An event descriptor that represents the default event for the adapted object, or a null
            reference if the adapted object does not have events.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.GetDefaultProperty">
            <summary>
            Returns the default property for the adapted object.
            </summary>
            <returns>
            A property descriptor that represents the default property for the adapted object, or a null
            reference if the adapted object does not have properties.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for the adapted object.
            </summary>
            <param name="editorBaseType">
            A type that represents the editor for the adapted object.
            </param>
            <returns>
            An object of the specified type that is the editor for the adapted object, or a null
            reference if the editor cannot be found.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.GetEvents">
            <summary>
            Returns the events for the adapted object.
            </summary>
            <returns>
            A collection containing the events for the adapted object.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.GetEvents(System.Attribute[])">
            <summary>
            Returns the events for the adapted object using an attribute array as a filter.
            </summary>
            <param name="attributes">
            An attribute array to be used as a filter.
            </param>
            <returns>
            A collection containing the filtered events for the adapted object.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.GetProperties">
            <summary>
            Returns the properties for the adapted object.
            </summary>
            <returns>
            A collection containing the properties for the adapted object.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for the adapted object using an attribute array as a filter.
            </summary>
            <param name="attributes">
            An attribute array to be used as a filter.
            </param>
            <returns>
            A collection containing the filtered properties for the adapted object.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
            <param name="pd">
            A property descriptor that represents the property whose owner is to be found.
            </param>
            <returns>
            An object that represents the owner of the specified property.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterContext.#ctor(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterContext"/> class.
            </summary>
            <param name="context">
            The type descriptor context to wrap.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type descriptor context is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterContext.Container">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterContext.Instance">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterContext.PropertyDescriptor">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterContext.GetService(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterContext.OnComponentChanged">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterContext.OnComponentChanging">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterConverter.#ctor(System.ComponentModel.TypeConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterConverter"/> class.
            </summary>
            <param name="typeConverter">
            The type converter to wrap.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type converter is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.ComponentModel.TypeDescriptorAdapter.AdapterConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.DisposableBindableObjectBase">
            <summary>
            An abstract base class that provides an implementation of both the
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> and <see cref="T:System.IDisposable"/> interfaces.
            </summary>
        </member>
        <member name="M:Simphony.DisposableBindableObjectBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Simphony.DisposableBindableObjectBase"/> class.
            </summary>
        </member>
        <member name="E:Simphony.DisposableBindableObjectBase.Disposed">
            <inheritdoc cref="E:Simphony.DisposableObjectBase.Disposed"/>
        </member>
        <member name="P:Simphony.DisposableBindableObjectBase.IsDisposed">
            <inheritdoc cref="P:Simphony.DisposableObjectBase.IsDisposed"/>
        </member>
        <member name="M:Simphony.DisposableBindableObjectBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.DisposableBindableObjectBase.Dispose(System.Boolean)">
            <inheritdoc cref="M:Simphony.DisposableObjectBase.Dispose(System.Boolean)"/>
        </member>
        <member name="M:Simphony.DisposableBindableObjectBase.ExceptionIfDisposed">
            <inheritdoc cref="M:Simphony.DisposableObjectBase.ExceptionIfDisposed"/>
        </member>
        <member name="T:Simphony.Mathematics.LogLogistic">
            <summary>
            Represents a log-logistic distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.LogLogistic"/> class with the standard
            parameters.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.LogLogistic"/> class.
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.LogLogistic.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogLogistic.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogLogistic.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogLogistic.Median">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogLogistic.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogLogistic.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogLogistic.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogLogistic.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogLogistic.Scale">
            <summary>
            Gets or sets the scale parameter of the distribution.
            </summary>
            <value>
            The scale parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.LogLogistic.Shape">
            <summary>
            Gets or sets the shape parameter of the distribution.
            </summary>
            <value>
            The shape parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.LogLogistic.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogLogistic.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified log-logistic distribution at a specified point.
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Log Logistic distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Log Logistic distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Log Logistic distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Log Logistic distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Log Logistic distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Log Logistic distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.ProbabilityDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability density function of a specified log-logistic distribution at a specified point.
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.QuantileFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified log-logistic distribution at a specified point.
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.Sample(System.Double,System.Double)">
            <summary>
            Samples a specified log-logistic distribution.
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified Log Logistic distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.LogLogistic.ProbabilityDensityFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the probability density function of a specified Log Logistic distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the maximum likelihood fitting method.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.Pearson5">
            <summary>
            Represents an inverse-gamma (Pearson 5) distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Pearson5"/> class with default parameter
            values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Pearson5"/> class.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Pearson5.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pearson5.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pearson5.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pearson5.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pearson5.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pearson5.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pearson5.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pearson5.Scale">
            <summary>
            Gets or sets the scale parameter of the distribution.
            </summary>
            <value>
            The scale parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Pearson5.Shape">
            <summary>
            Gets or sets the shape parameter of the distribution.
            </summary>
            <value>
            The shape parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Pearson5.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pearson5.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified inverse-gamma distribution at
            a specified point.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Pearson 5 distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Pearson 5 distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Pearson 5 distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Pearson 5 distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Pearson 5 distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Pearson5 distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.ProbabilityDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability density function of a specified inverse-gamma distribution at a specified point.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.QuantileFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified inverse-gamma distribution at a specified point.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.Sample(System.Double,System.Double)">
            <summary>
            Samples a specified inverse-gamma distribution.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified Pearson 5 distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Pearson5.ProbabilityDensityFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the probability density function of a specified Pearson 5 distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the maximum likelihood fitting method.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.Pearson6">
            <summary>
            Represents a Pearson Type 6 (Beta prime) distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Pearson6.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Pearson6"/> class with default parameter
            values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Pearson6.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Pearson6"/> class.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Pearson6.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pearson6.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pearson6.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pearson6.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pearson6.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pearson6.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pearson6.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pearson6.Scale">
            <summary>
            Gets or sets the scale of the distribution.
            </summary>
            <value>
            The scale of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Pearson6.Shape1">
            <summary>
            Gets or sets the first shape parameter of the distribution.
            </summary>
            <value>
            The first shape parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Pearson6.Shape2">
            <summary>
            Gets or sets the second shape parameter of the distribution.
            </summary>
            <value>
            The second shape parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Pearson6.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pearson6.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson6.CumulativeDistributionFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified Pearson 6 distribution at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pearson6.ProbabilityDensityFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability density function of a specified Pearson 6 distribution at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pearson6.QuantileFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified Pearson 6 distribution at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pearson6.Sample(System.Double,System.Double,System.Double)">
            <summary>
            Samples a specified Pearson 6 distribution.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pearson6.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson6.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson6.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson6.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson6.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson6.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson6.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson6.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson6.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pearson6.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.Pert">
            <summary>
            Represents a pert distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Pert.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Pert"/> class with default parameter values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Pert.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Pert"/> class.
            </summary>
            <param name="low">
            The lower bound of the pert distribution.
            </param>
            <param name="high">
            The upper bound of the pert distribution.
            </param>
            <param name="mode">
            The mode of the pert distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Pert.High">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pert.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pert.Low">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pert.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pert.Mode">
            <summary>
            Gets or sets the mode of the distribution.
            </summary>
            <value>
            The mode of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Pert.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pert.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pert.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pert.CumulativeDistributionFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Evaluates the cumulative distribution function of a pert distribution at a specified point.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <param name="mode">
            The mode of the pert distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pert.ProbabilityDensityFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Evaluates the probability density function of a pert distribution at a specified point.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <param name="mode">
            The mode of the pert distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pert.QuantileFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Evaluates the quantile function of a pert distribution at a specified point.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <param name="mode">
            The mode of the pert distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pert.Sample(System.Double,System.Double,System.Double)">
            <summary>
            Samples a specified pert distribution.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <param name="mode">
            The mode of the pert distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pert.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pert.GetBeta">
            <summary>
            Gets the underlying <see cref="T:Simphony.Mathematics.Beta"/> distribution that the Pert distribution represents.
            </summary>
            <returns>
            The underlying <see cref="T:Simphony.Mathematics.Beta"/> distribution that the Pert distribution represents.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Pert.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pert.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pert.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pert.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pert.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pert.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pert.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pert.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pert.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.Bernoulli">
            <summary>
            Represents a bernoulli distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Bernoulli.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Bernoulli"/> class with default parameter
            values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Bernoulli.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Bernoulli"/> class.
            </summary>
            <param name="probability">
            The success probability in the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Bernoulli.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Bernoulli.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Bernoulli.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Bernoulli.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <value>
            The median of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Bernoulli.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Bernoulli.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
            <value>
            The mode of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Bernoulli.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Bernoulli.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Bernoulli.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Bernoulli.Probability">
            <summary>
            Gets or sets the probability of the distribution.
            </summary>
            <value>
            The probability of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Bernoulli.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Bernoulli.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Bernoulli.CumulativeDistributionFunction(System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified bernoulli distribution at a specified point.
            </summary>
            <param name="probability">
            The success probability in the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Bernoulli.ProbabilityMassFunction(System.Double,System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified bernoulli distribution at a specified point.
            </summary>
            <param name="probability">
            The success probability in the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Bernoulli.QuantileFunction(System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified bernoulli distribution at a specified point.
            </summary>
            <param name="probability">
            The success probability in the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Bernoulli.Sample(System.Double)">
            <summary>
            Samples a specified bernoulli distribution.
            </summary>
            <param name="probability">
            The success probability in the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Bernoulli.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Bernoulli.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Bernoulli.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Bernoulli.ProbabilityMassFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Bernoulli.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Bernoulli.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Bernoulli.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Bernoulli.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.Binomial">
            <summary>
            Represents a binomial distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Binomial.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Binomial"/> class with the standard parameters.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Binomial.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Binomial"/> class.
            </summary>
            <param name="trailNumber">
            The number of trials of the binomial distribution.
            </param>
            <param name="probability">
            The success probability in each trial of the binomial distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Binomial.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Binomial.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Binomial.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Binomial.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <value>
            The median of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Binomial.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Binomial.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
            <value>
            The mode of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Binomial.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Binomial.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Binomial.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Binomial.Probability">
            <summary>
            Gets or sets the probability of the distribution.
            </summary>
            <value>
            The probability of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Binomial.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Binomial.TrailNumber">
            <summary>
            Gets or sets the trail number of the distribution.
            </summary>
            <value>
            The trail number of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Binomial.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Binomial.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified binomial distribution at a specified point.
            </summary>
            <param name="trailNumber">
            The number of trials of the binomial distribution.
            </param>
            <param name="probability">
            The success probability in each trial of the binomial distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Binomial.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a binomial distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A binomial distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Binomial.ProbabilityMassFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability mass function of a specified binomial distribution at a specified
            point.
            </summary>
            <param name="trailNumber">
            The number of trials of the binomial distribution.
            </param>
            <param name="probability">
            The success probability in each trial of the binomial distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Binomial.QuantileFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified binomial distribution at a specified point.
            </summary>
            <param name="trailNumber">
            The number of trials of the binomial distribution.
            </param>
            <param name="probability">
            The success probability in each trial of the binomial distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Binomial.Sample(System.Double,System.Double)">
            <summary>
            Samples a specified binomial distribution.
            </summary>
            <param name="trailNumber">
            The number of trials of the binomial distribution.
            </param>
            <param name="probability">
            The success probability in each trial of the binomial distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Binomial.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Binomial.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Binomial.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Binomial.ProbabilityMassFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Binomial.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Binomial.Sample">
            <summary>
            Samples the current distribution.
            </summary>
            <returns>
            A random variate sampled from the current distribution.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Binomial.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Binomial.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.ContinuousDistribution">
            <summary>
            Abstract base class for continuous distributions.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.ContinuousDistribution.KolmogorovSmirnovTable">
            <summary>
            Lookup table for the Kolmogorov-Smirnov critical value when n &lt;= 20.
            </summary>
        </member>
        <member name="P:Simphony.Mathematics.ContinuousDistribution.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <value>
            The median of the distribution.
            </value>
        </member>
        <member name="M:Simphony.Mathematics.ContinuousDistribution.BayesianUpdate(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Generates a new distribution that represents the prior (current) distribution updated with
            new data using Bayesian techniques.
            </summary>
            <param name="data">
            A collection containing the new data.
            </param>
            <returns>
            The posterior distribution.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the length of the specified collection is less than two.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.ContinuousDistribution.KolmogorovSmirnovTest(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Uses the Kolmogorov-Smirnov test to assess the goodness of fit between the current distribution
            and a specified collection of data at a default significance level of 0.05.
            </summary>
            <param name="data">
            A collection containing the data to test against the current distribution.
            </param>
            <returns>
            True if the null hypothesis is not rejected at the significance level of alpha (i.e. the
            data passes the test); otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.ContinuousDistribution.KolmogorovSmirnovTest(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Uses the Kolmogorov-Smirnov test to assess the goodness of fit between the current
            distribution and a specified collection of data.
            </summary>
            <param name="data">
            A collection containing the data to test against the current distribution.
            </param>
            <param name="alpha">
            The significance level of the test.
            </param>
            <returns>
            True if the null hypothesis is not rejected at the significance level of alpha (i.e. the
            data passes the test); otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified significance level is not between 0.01 and 0.20.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.ContinuousDistribution.KolmogorovSmirnovTest(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double@)">
            <summary>
            Uses the Kolmogorov-Smirnov test to assess the goodness of fit between the current
            distribution and a specified collection of data.
            </summary>
            <param name="data">
            A collection containing the data to test against the current distribution.
            </param>
            <param name="alpha">
            The significance level of the test.
            </param>
            <param name="testStatistic">
            When the method returns, the value of the test statistic.
            </param>
            <returns>
            True if the null hypothesis is not rejected at the significance level of alpha (i.e. the
            data passes the test); otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified significance level is not between 0.01 and 0.20.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.ContinuousDistribution.KolmogorovSmirnovTest(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double@,System.Double@)">
            <summary>
            Uses the Kolmogorov-Smirnov test to assess the goodness of fit between the current
            distribution and a specified collection of data.
            </summary>
            <param name="data">
            A collection containing the data to test against the current distribution.
            </param>
            <param name="alpha">
            The significance level of the test.
            </param>
            <param name="testStatistic">
            When the method returns, the value of the test statistic.
            </param>
            <param name="criticalValue">
            When the method returns, the critical value for the test.
            </param>
            <returns>
            True if the null hypothesis is not rejected at the significance level of alpha (i.e. the
            data passes the test); otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified significance level is not between 0.01 and 0.20.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="T:Simphony.Mathematics.DiscreteDistribution">
            <summary>
            Abstract base class for discrete distributions.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteDistribution.ChiSquaredTest(System.Double[],System.Int32[],System.Double)">
            <summary>
            Uses Pearson's chi-square test to assess the goodness of fit between the current
            distribution and a specified collection of data grouped into a specified number
            of bins.
            </summary>
            <param name="data">
            A collection containing the data to test against the current distribution.
            </param>
            <param name="sampleData">
            A collection containing the data that generated by other software based on current distribution.
            </param>
            <param name="alpha">
            The significance level of the test.
            </param>
            <returns>
            True if the null hypothesis is not rejected at the significance level of alpha
            (i.e. the data passes the test); otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteDistribution.LogProbabilityMassFunction(System.Double)">
            <summary>
            Evaluates the natural logorithm of the distribution's probability mass function at a
            specified point.
            </summary>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The natural logorithm of the distribution's probability mass function at the specified
            point.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteDistribution.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteDistribution.ProbabilityMassFunction(System.Double)">
            <summary>
            Evaluates the distribution's probability mass function at a specified point.
            </summary>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
        </member>
        <member name="T:Simphony.Mathematics.DiscreteUniform">
            <summary>
            Represents a discrete uniform distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteUniform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.DiscreteUniform"/> class with default
            parameter values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteUniform.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.DiscreteUniform"/> class.
            </summary>
            <param name="high">
            The upper bound of the discrete uniform distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteUniform.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.DiscreteUniform"/> class.
            </summary>
            <param name="low">
            The lower bound of the discrete uniform distribution.
            </param>
            <param name="high">
            The upper bound of the discrete uniform distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.DiscreteUniform.High">
            <summary>
            Gets or sets the upper bound of the distribution.
            </summary>
            <value>
            The upper bound of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.DiscreteUniform.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DiscreteUniform.Low">
            <summary>
            Gets or sets the lower bound of the distribution.
            </summary>
            <value>
            The lower bound of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.DiscreteUniform.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DiscreteUniform.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DiscreteUniform.Median">
            <summary>
            Gets the median on the distribution.
            </summary>
            <value>
            The median of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.DiscreteUniform.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DiscreteUniform.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
            <value>
            The mode of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.DiscreteUniform.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DiscreteUniform.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DiscreteUniform.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DiscreteUniform.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DiscreteUniform.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteUniform.CumulativeDistributionFunction(System.Int32,System.Int32,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified discrete uniform distribution at a specified point.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteUniform.ProbabilityMassFunction(System.Int32,System.Int32,System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified discrete uniform distribution at a specified point.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteUniform.QuantileFunction(System.Int32,System.Int32,System.Double)">
            <summary>
            Evaluates the quantile function of a specified discrete uniform distribution at a specified point.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteUniform.Sample(System.Int32,System.Int32)">
            <summary>
            Samples a specified discrete uniform distribution.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteUniform.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteUniform.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteUniform.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteUniform.ProbabilityMassFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteUniform.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteUniform.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteUniform.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DiscreteUniform.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.Geometric">
            <summary>
            Represents a geometric distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Geometric.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Geometric"/> class with the standard
            parameters.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Geometric.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Geometric"/> class.
            </summary>
            <param name="probability">
            The probability of the geometric distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Geometric.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Geometric.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Geometric.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
            <value>
            The mean of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Geometric.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <value>
            The median of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Geometric.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Geometric.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
            <value>
            The mode of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Geometric.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Geometric.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Geometric.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Geometric.Probability">
            <summary>
            Gets or sets the probability parameter of the distribution.
            </summary>
            <value>
            The probability parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Geometric.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Geometric.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Geometric.CumulativeDistributionFunction(System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified geometric distribution at a
            specified point.
            </summary>
            <param name="probability">
            The probability of the geometric distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Geometric.ProbabilityMassFunction(System.Double,System.Double)">
            <summary>
            Evaluates the probability mass function of a specified geometric distribution at a
            specified point.
            </summary>
            <param name="probability">
            The probability of the geometric distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Geometric.QuantileFunction(System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified geometric distribution at a specified point.
            </summary>
            <param name="probability">
            The probability of the geometric distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range
            0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Geometric.Sample(System.Double)">
            <summary>
            Samples a specified geometric distribution.
            </summary>
            <param name="probability">
            The probability of the geometric distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Geometric.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Geometric.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Geometric.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Geometric.ProbabilityMassFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Geometric.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Geometric.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Geometric.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Geometric.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.Hypergeometric">
            <summary>
            Represents a hypergeometric distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Hypergeometric.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Hypergeometric"/> class with the standard
            parameters.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Hypergeometric.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Hypergeometric"/> class.
            </summary>
            <param name="populationSize">
            The population size in the hypergeometric distribution.
            </param>
            <param name="sampleSize">
            The number of draws of the hypergeometric distribution.
            </param>
            <param name="successNumber">
            The  number of successes in the hypergeometric distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Hypergeometric.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Hypergeometric.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Hypergeometric.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Hypergeometric.Median">
            <summary>
            Gets the median on the distribution.
            </summary>
            <value>
            The median of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Hypergeometric.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Hypergeometric.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
            <value>
            The mode of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Hypergeometric.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Hypergeometric.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Hypergeometric.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Hypergeometric.PopulationSize">
            <summary>
            Gets or sets the population size of the distribution.
            </summary>
            <value>
            The populationSize of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Hypergeometric.SampleSize">
            <summary>
            Gets or sets the number of draws of the distribution.
            </summary>
            <value>
            The trail number of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Hypergeometric.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Hypergeometric.SuccessNumber">
            <summary>
            Gets or sets the number of successes of the distribution.
            </summary>
            <value>
            The populationSize of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Hypergeometric.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Hypergeometric.CumulativeDistributionFunction(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified hypergeometric distribution at a specified point.
            </summary>
            <param name="populationSize">
            The population size in the distribution.
            </param>
            <param name="sampleSize">
            The number of draws of the distribution.
            </param>
            <param name="successNumber">
            The  number of successes in the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Hypergeometric.ProbabilityMassFunction(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Evaluates the populationSize mass function of a specified hypergeometric distribution at a
            specified point.
            </summary>
            <param name="populationSize">
            The population size in the distribution.
            </param>
            <param name="sampleSize">
            The number of draws of the distribution.
            </param>
            <param name="successNumber">
            The  number of successes in the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Hypergeometric.QuantileFunction(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Evaluates the quantile function of a specified hypergeometric distribution at a specified point.
            </summary>
            <param name="populationSize">
            The population size in the distribution.
            </param>
            <param name="sampleSize">
            The number of draws of the distribution.
            </param>
            <param name="successNumber">
            The  number of successes in the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Hypergeometric.Sample(System.Int32,System.Int32,System.Int32)">
            <summary>
            Samples a specified hypergeometric distribution.
            </summary>
            <param name="populationSize">
            The population size in the distribution.
            </param>
            <param name="sampleSize">
            The number of draws of the distribution.
            </param>
            <param name="successNumber">
            The  number of successes in the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Hypergeometric.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Hypergeometric.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Hypergeometric.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Hypergeometric.ProbabilityMassFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Hypergeometric.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Hypergeometric.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Hypergeometric.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Hypergeometric.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.NegativeBinomial">
            <summary>
            Represents a negative binomial distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.NegativeBinomial.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.NegativeBinomial"/> class with the standard
            parameters.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.NegativeBinomial.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.NegativeBinomial"/> class.
            </summary>
            <param name="trailNumber">
            The number of trials of the negative binomial distribution.
            </param>
            <param name="probability">
            The success probability in each trial of the negative binomial distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.NegativeBinomial.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.NegativeBinomial.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.NegativeBinomial.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.NegativeBinomial.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <value>
            The median of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.NegativeBinomial.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.NegativeBinomial.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
            <value>
            The mode of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.NegativeBinomial.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.NegativeBinomial.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.NegativeBinomial.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.NegativeBinomial.Probability">
            <summary>
            Gets or sets the probability parameter of the distribution.
            </summary>
            <value>
            The probability parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.NegativeBinomial.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.NegativeBinomial.TrailNumber">
            <summary>
            Gets or sets the trail number parameter of the distribution.
            </summary>
            <value>
            The trail number parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.NegativeBinomial.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.NegativeBinomial.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified negative binomial distribution at a specified point.
            </summary>
            <param name="trailNumber">
            The number of trials of the negative binomial distribution.
            </param>
            <param name="probability">
            The success probability in each trial of the negative binomial distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.NegativeBinomial.ProbabilityMassFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability mass function of a specified negative binomial distribution at a
            specified point.
            </summary>
            <param name="trailNumber">
            The number of trials of the negative binomial distribution.
            </param>
            <param name="probability">
            The success probability in each trial of the negative binomial distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.NegativeBinomial.QuantileFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified negative distribution at a specified point.
            </summary>
            <param name="trailNumber">
            The number of trials of the negative binomial distribution.
            </param>
            <param name="probability">
            The success probability in each trial of the negative binomial distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.NegativeBinomial.Sample(System.Double,System.Double)">
            <summary>
            Samples a specified negative binomial distribution.
            </summary>
            <param name="trailNumber">
            The number of trials of the negative binomial distribution.
            </param>
            <param name="probability">
            The success probability in each trial of the negative binomial distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.NegativeBinomial.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.NegativeBinomial.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.NegativeBinomial.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.NegativeBinomial.ProbabilityMassFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.NegativeBinomial.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.NegativeBinomial.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.NegativeBinomial.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.NegativeBinomial.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.Poisson">
            <summary>
            Represents a poisson distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Poisson.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Poisson"/> class with the standard parameters.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Poisson.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Poisson"/> class.
            </summary>
            <param name="rate">
            The rate of the poisson distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Poisson.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Poisson.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Poisson.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
            <value>
            The mean of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Poisson.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <value>
            The median of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Poisson.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Poisson.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
            <value>
            The mode of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Poisson.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Poisson.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Poisson.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Poisson.Rate">
            <summary>
            Gets or sets the rate of the distribution.
            </summary>
            <value>
            The rate of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Poisson.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Poisson.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Poisson.CumulativeDistributionFunction(System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified poisson distribution at a specified point.
            </summary>
            <param name="rate">
            The rate of the poisson distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Poisson.ProbabilityMassFunction(System.Double,System.Double)">
            <summary>
            Evaluates the probability mass function of a specified poisson distribution at a specified
            point.
            </summary>
            <param name="rate">
            The rate of the poisson distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Poisson.QuantileFunction(System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified poisson distribution at a specified point.
            </summary>
            <param name="rate">
            The rate of the poisson distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Poisson.Sample(System.Double)">
            <summary>
            Samples a specified poisson distribution.
            </summary>
            <param name="rate">
            The rate of the poisson distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Poisson.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Poisson.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Poisson.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Poisson.ProbabilityMassFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Poisson.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Poisson.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Poisson.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Poisson.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.DistributionFittingForm">
            <summary>
            A user interface for distribution fitting.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.DistributionFittingForm.#ctor(Simphony.Mathematics.Distribution)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.DistributionFittingForm"/> class.
            </summary>
            <param name="distribution">
            The previously fit <see cref="P:Simphony.Mathematics.DistributionFittingForm.Distribution"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="P:Simphony.Mathematics.DistributionFittingForm.Distribution"/> is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.DistributionFittingForm.Distribution">
            <summary>
            Gets the currently selected distribution.
            </summary>
            <value>
            The currently selected distribution.
            </value>
        </member>
        <member name="M:Simphony.Mathematics.DistributionFittingForm.OnLoad(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionFittingForm.DistributionInfo.#ctor(Simphony.Mathematics.ContinuousDistribution)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.DistributionFittingForm.DistributionInfo"/> class.
            </summary>
            <param name="distribution">
            The distribution the class is providing information about.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified distribution is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.DistributionFittingForm.DistributionInfo.ChiSquared">
            <summary>
            Gets the chi-squared test statistic.
            </summary>
            <value>
            The chi-squared test statistic.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.DistributionFittingForm.DistributionInfo.Distribution">
            <summary>
            Gets the distribution the class is providing information about.
            </summary>
            <value>
            The distribution the class is providing information about.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.DistributionFittingForm.DistributionInfo.KolmogorovSmirnov">
            <summary>
            Gets the Kolmogorov-Smirnov test statistic.
            </summary>
            <value>
            The Kolmogorov-Smirnov test statistic.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.DistributionFittingForm.DistributionInfo.Name">
            <summary>
            Gets the distribution name of the distribution.
            </summary>
            <value>
            The distribution name of the distribution.
            </value>
        </member>
        <member name="F:Simphony.Mathematics.DistributionFittingForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.DistributionFittingForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Mathematics.DistributionFittingForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Mathematics.DistributionListConverter">
            <summary>
            A type converter for the type property of a distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.DistributionListConverter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Simphony.Mathematics.DistributionListConverter"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Mathematics.DistributionListConverter.Values">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.DirichletDistribution">
            <summary>
            Represents a Dirichlet distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.DirichletDistribution.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.DirichletDistribution"/> class.
            </summary>
            <param name="concentrationParameters">
            The concentration parameters of the distribution.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified concentration parameters are a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if any of the concentration parameters is infinite or non-positive.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the dimension of the specifed <see cref="T:Simphony.Mathematics.Vector"/> is less than two.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.DirichletDistribution.#ctor(Simphony.Mathematics.Vector)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.DirichletDistribution"/> class.
            </summary>
            <param name="concentrationParameters">
            A <see cref="T:Simphony.Mathematics.Vector"/> representing the concentration parameters of the distribution.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Mathematics.Vector"/> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if any of the concentration parameters is infinite or non-positive.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the dimension of the specifed <see cref="T:Simphony.Mathematics.Vector"/> is less than two.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.DirichletDistribution.ConcentrationParameters">
            <summary>
            Gets the concentration parameters of the distribution.
            </summary>
            <value>
            A <see cref="T:Simphony.Mathematics.Vector"/> containing the concentration parameters of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.DirichletDistribution.Covariance">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DirichletDistribution.Dimension">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DirichletDistribution.Mean">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DirichletDistribution.GetMarginalDistribution(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DirichletDistribution.ProbabilityDensityFunction(Simphony.Mathematics.Vector)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DirichletDistribution.Sample">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.MultivariateDistribution">
            <summary>
            Abstract base class for multivariate distributions.
            </summary>
        </member>
        <member name="P:Simphony.Mathematics.MultivariateDistribution.Covariance">
            <summary>
            Gets the covariance matrix of the distribution.
            </summary>
            <value>
            The covariance matrix of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MultivariateDistribution.Dimension">
            <summary>
            Gets the number of variables.
            </summary>
            <value>
            The number of variables.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MultivariateDistribution.IsBivariate">
            <summary>
            Gets a value indicating whether the distribution is a bivariate distribution.
            </summary>
            <value>
            True if the distribution is a bivariate distribution; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MultivariateDistribution.IsUnivariate">
            <summary>
            Gets a value indicating whether the distribution is a univariate distribution.
            </summary>
            <value>
            True if the distribution is a univariate distribution; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MultivariateDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
            <value>
            The mean of the distribution.
            </value>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateDistribution.GetMarginalDistribution(System.Int32)">
            <summary>
            Gets the marginal distribution for a specified variable.
            </summary>
            <param name="index">
            The zero-based index of the variable.
            </param>
            <returns>
            The marginal distribution for thespecified variable.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateDistribution.LogProbabilityDensityFunction(System.Double[])">
            <summary>
            Evaluates the natural logorithm of the distribution's probability density function at a
            specified point.
            </summary>
            <param name="x">
            The coordinates of the point at which to evaluate the function.
            </param>
            <returns>
            The natural logorithm of the distribution's probability density function at the specified
            point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified coordinates are a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the number of coordinates does not match the dimension of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateDistribution.LogProbabilityDensityFunction(Simphony.Mathematics.Vector)">
            <summary>
            Evaluates the natural logorithm of the distribution's probability density function at a
            specified point.
            </summary>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The natural logorithm of the distribution's probability density function at the specified
            point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified point is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the dimension of the specified point does not match that of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateDistribution.ProbabilityDensityFunction(System.Double[])">
            <summary>
            Evaluates the distribution's probability density function at a specified point.
            </summary>
            <param name="x">
            The coordinates of the point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified coordinates are a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the number of coordinates does not match the dimension of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateDistribution.ProbabilityDensityFunction(Simphony.Mathematics.Vector)">
            <summary>
            Evaluates the distribution's probability density function at a specified point.
            </summary>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified point is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the dimension of the specified point does not match that of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateDistribution.Sample">
            <summary>
            Samples the current distribution.
            </summary>
            <returns>
            A random variate sampled from the current distribution.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateDistribution.ExceptionIfNullOrDimensionMismatch(Simphony.Mathematics.Vector,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the dimension of a specified
            <see cref="T:Simphony.Mathematics.Vector"/> does not match that of the distribution.
            </summary>
            <param name="x">
            The <see cref="T:Simphony.Mathematics.Vector"/>.
            </param>
            <param name="paramName">
            The name of the parameter the <see cref="T:Simphony.Mathematics.Vector"/> represents.
            </param>
        </member>
        <member name="T:Simphony.Mathematics.MultivariateLogNormal">
            <summary>
            Represents a multivariate log-normal distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateLogNormal.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MultivariateLogNormal"/> class.
            </summary>
            <param name="dimension">
            The number of variables.
            </param>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateLogNormal.#ctor(Simphony.Mathematics.Vector,Simphony.Mathematics.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MultivariateLogNormal"/> class.
            </summary>
            <param name="location">
            The location vector of the distribution.
            </param>
            <param name="covariance">
            The covariance matrix of the distribution.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the location vector or the covariance matrix is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the covariance matrix is not a square matrix.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the covariance matrix is not positive semi-definite; or if the dimensions of the
            location vector and the covariance matrix do not match.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MultivariateLogNormal.Covariance">
            <summary>
            Gets the covariance matrix of the distribution.
            </summary>
            <value>
            The covariance matrix of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MultivariateLogNormal.Dimension">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.MultivariateLogNormal.Mean">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateLogNormal.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{Simphony.Mathematics.Vector})">
            <summary>
            Fits a multivariate log-normal distribution to a set of data using the maximum likelihood
            method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A log-normal distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty or if the specified collection contains vectors
            whose dimensions differ.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateLogNormal.GetMarginalDistribution(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateLogNormal.ProbabilityDensityFunction(Simphony.Mathematics.Vector)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateLogNormal.Sample">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.MultivariateNormal">
            <summary>
            Represents a multivariate normal distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateNormal.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MultivariateNormal"/> class.
            </summary>
            <param name="dimension">
            The number of variables.
            </param>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateNormal.#ctor(Simphony.Mathematics.Vector,Simphony.Mathematics.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MultivariateNormal"/> class.
            </summary>
            <param name="location">
            The location vector of the distribution.
            </param>
            <param name="covariance">
            The covariance matrix of the distribution.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the location vector or the covariance matrix is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the covariance matrix is not a square matrix.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the covariance matrix is not positive definite; or if the dimensions of the
            location vector and the covariance matrix do not match.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MultivariateNormal.Covariance">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.MultivariateNormal.Dimension">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.MultivariateNormal.Location">
            <summary>
            Gets or sets the location vector of the distribution.
            </summary>
            <value>
            The location vector of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MultivariateNormal.Mean">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateNormal.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{Simphony.Mathematics.Vector})">
            <summary>
            Fits a multivariate normal distribution to a set of data using the maximum likelihood
            method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A normal distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty or if the specified collection contains vectors
            whose dimensions differ.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateNormal.GetMarginalDistribution(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateNormal.ProbabilityDensityFunction(Simphony.Mathematics.Vector)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MultivariateNormal.Sample">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.JointIndependentDistribution">
            <summary>
            A multivariate distribution in which each of the variables is mutually independent.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.JointIndependentDistribution.#ctor(Simphony.Mathematics.ContinuousDistribution[])">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.JointIndependentDistribution"/> class.
            </summary>
            <param name="distributions">
            The underlying univariate distributions that the new distribution will represent.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified univariate distribution is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.JointIndependentDistribution.Covariance">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.JointIndependentDistribution.Dimension">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.JointIndependentDistribution.Mean">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.JointIndependentDistribution.GetMarginalDistribution(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.JointIndependentDistribution.ProbabilityDensityFunction(Simphony.Mathematics.Vector)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.JointIndependentDistribution.Sample">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.FrequencyPolygon">
            <summary>
            Represents the frequency polygon density estimate.
            </summary>
            <remarks>
            See: Scott D.W., 1985. Frequency polygons: Theory and application. Journal of the American
            Statistical Association, 80(390), 348–354.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.FrequencyPolygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.FrequencyPolygon"/> class in preparation for
            deserialization.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.FrequencyPolygon.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.FrequencyPolygon"/> class.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the length of the specified collection is less than two.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.FrequencyPolygon.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.FrequencyPolygon"/> class.
            </summary>
            <param name="x">
            A sequences providing the x-values of the coordinates defining the polygon.
            </param>
            <param name="y">
            A sequences providing the y-values of the coordinates defining the polygon.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the two sequences is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if either of the sequences has a length of less than three; or if the length of the
            two sequences differs.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.FrequencyPolygon.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.FrequencyPolygon.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.FrequencyPolygon.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.FrequencyPolygon.Median">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.FrequencyPolygon.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.FrequencyPolygon.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.FrequencyPolygon.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.FrequencyPolygon.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.FrequencyPolygon.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.FrequencyPolygon.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.FrequencyPolygon.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.FrequencyPolygon.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.FrequencyPolygon.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.FrequencyPolygon.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.FrequencyPolygon.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.FrequencyPolygon.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.KernelDensity">
            <summary>
            Abstract base class for non-parametric kernel densities.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.KernelDensity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.KernelDensity"/> class in preparation for
            deserialization.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.KernelDensity.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.KernelDensity"/> class.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the length of the specified collection is less than two.
            </exception>
            <remarks>
            Silverman's rule of thumb is used for the bandwidth.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.KernelDensity.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.KernelDensity"/> class.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <param name="bandwidth">
            The bandwidth of the kernel density.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified bandwidth is negative, zero, or infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the length of the specified collection is less than two.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.KernelDensity.Bandwidth">
            <summary>
            Gets or sets the bandwidth of the kernel density.
            </summary>
            <value>
            The bandwidth of the kernel density.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.KernelDensity.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.KernelDensity.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.KernelDensity.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.KernelDensity.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.KernelDensity.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.KernelDensity.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.KernelDensity.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.KernelDensity.Variance">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.KernelDensity.FittingDataMaximum">
            <summary>
            Gets the largest point in the data the density is based on.
            </summary>
            <value>
            The largest point in the data the density is based on.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.KernelDensity.FittingDataMinimum">
            <summary>
            Gets the smallest point in the data the density is based on.
            </summary>
            <value>
            The smallest point in the data the density is based on.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.KernelDensity.Kernel">
            <summary>
            Gets a continuous probability distribution that represents the kernel.
            </summary>
            <value>
            A continuous probability distribution that represents the kernel.
            </value>
        </member>
        <member name="M:Simphony.Mathematics.KernelDensity.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.KernelDensity.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.KernelDensity.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.KernelDensity.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.KernelDensity.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.KernelDensity.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.NonParametricDistribution">
            <summary>
            Abstract base class for non-parametric distributions.
            </summary>
        </member>
        <member name="P:Simphony.Mathematics.NonParametricDistribution.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.NonParametricDistribution.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.NonParametricDistribution.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.NonParametricDistribution.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.TriangularKernelDensity">
            <summary>
            Represents a kernel density estimate with a triangular kernel.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.TriangularKernelDensity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.TriangularKernelDensity"/> class in preparation
            for deserialization.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.TriangularKernelDensity.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.TriangularKernelDensity"/> class.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the length of the specified collection is less than two.
            </exception>
            <remarks>
            Silverman's rule of thumb is used for the bandwidth.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.TriangularKernelDensity.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.TriangularKernelDensity"/> class.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <param name="bandwidth">
            The bandwidth of the kernel density.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified bandwidth is negative, zero, or infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the length of the specified collection is less than two.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.TriangularKernelDensity.Kernel">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.TriangularKernelDensity.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.EpanechnikovKernelDensity">
            <summary>
            Represents a kernel density estimate with an Epanechnikov kernel.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.EpanechnikovKernelDensity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.EpanechnikovKernelDensity"/> class in preparation
            for deserialization.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.EpanechnikovKernelDensity.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.EpanechnikovKernelDensity"/> class.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the length of the specified collection is less than two.
            </exception>
            <remarks>
            Silverman's rule of thumb is used for the bandwidth.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.EpanechnikovKernelDensity.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.EpanechnikovKernelDensity"/> class.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <param name="bandwidth">
            The bandwidth of the kernel density.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified bandwidth is negative, zero, or infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the length of the specified collection is less than two.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.EpanechnikovKernelDensity.Kernel">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.EpanechnikovKernelDensity.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.UniformKernelDensity">
            <summary>
            Represents a kernel density estimate with a uniform kernel.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.UniformKernelDensity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.UniformKernelDensity"/> class in preparation
            for deserialization.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.UniformKernelDensity.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.UniformKernelDensity"/> class.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the length of the specified collection is less than two.
            </exception>
            <remarks>
            Silverman's rule of thumb is used for the bandwidth.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.UniformKernelDensity.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.UniformKernelDensity"/> class.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <param name="bandwidth">
            The bandwidth of the kernel density.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified bandwidth is negative, zero, or infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the length of the specified collection is less than two.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.UniformKernelDensity.Kernel">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.UniformKernelDensity.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.NormalKernelDensity">
            <summary>
            Represents a kernel density estimate with a normal kernel.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.NormalKernelDensity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.NormalKernelDensity"/> class in preparation
            for deserialization.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.NormalKernelDensity.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.NormalKernelDensity"/> class.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the length of the specified collection is less than two.
            </exception>
            <remarks>
            Silverman's rule of thumb is used for the bandwidth.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.NormalKernelDensity.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.NormalKernelDensity"/> class.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <param name="bandwidth">
            The bandwidth of the kernel density.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified bandwidth is negative, zero, or infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the length of the specified collection is less than two.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.NormalKernelDensity.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.NormalKernelDensity.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.NormalKernelDensity.Kernel">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.NormalKernelDensity.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.DistributionForm">
            <summary>
            A form for editing <see cref="P:Simphony.Mathematics.DistributionForm.Distribution"/> objects.
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.DistributionForm.#ctor(Simphony.Mathematics.Distribution)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.DistributionForm"/> class.
            </summary>
            <param name="distribution">
            The <see cref="P:Simphony.Mathematics.DistributionForm.Distribution"/> to edit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="P:Simphony.Mathematics.DistributionForm.Distribution"/> is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.DistributionForm.Distribution">
            <summary>
            Gets the distribution currently being edited by the form.
            </summary>
            <value>
            The distribution currently being edited by the form.
            </value>
        </member>
        <member name="F:Simphony.Mathematics.DistributionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.DistributionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Mathematics.DistributionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Mathematics.BigDecimal">
            <summary>
            An arbitrary precision decimal. All operations are exact, except for division. Division never
            determines more digits than the given precision.
            </summary>
            <remarks>
            Source: https://gist.github.com/JcBernack/0b4eef59ca97ee931a2f45542b9ff06d
            Based on: https://stackoverflow.com/a/4524254
            Author: Jan Christoph Bernack (contact: jc.bernack at gmail.com)
            License: Public Domain.
            </remarks>
        </member>
        <member name="F:Simphony.Mathematics.BigDecimal.AlwaysTruncate">
            <summary>
            Specifies whether the significant digits should be truncated to the given precision after
            each operation.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.BigDecimal.Precision">
            <summary>
            Sets the maximum precision of division operations.
            </summary>
            <value>
            The maximum precision of division operations.
            </value>
            <remarks>
            If <see cref="F:Simphony.Mathematics.BigDecimal.AlwaysTruncate"/> is set to true all operations are affected.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.#ctor(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.BigDecimal"/> struct.
            </summary>
            <param name="mantissa">
            The fractional part of the number.
            </param>
            <param name="exponent">
            The exponent part of the number.
            </param>
        </member>
        <member name="P:Simphony.Mathematics.BigDecimal.Mantissa">
            <summary>
            Gets or sets the fractional part of the number.
            </summary>
            <value>
            The fractional part of the number.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.BigDecimal.Exponent">
            <summary>
            Gets or sets the exponent part of the number.
            </summary>
            <value>
            The exponent part of the number.
            </value>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Explicit(Simphony.Mathematics.BigDecimal)~System.Numerics.BigInteger">
            <summary>
            Defines an explicit conversion of a <see cref="T:Simphony.Mathematics.BigDecimal"/> to a <see cref="T:System.Numerics.BigInteger"/>.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            A <see cref="T:System.Numerics.BigInteger"/> that represents the converted <see cref="T:Simphony.Mathematics.BigDecimal"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Explicit(Simphony.Mathematics.BigDecimal)~System.Decimal">
            <summary>
            Defines an explicit conversion of a <see cref="T:Simphony.Mathematics.BigDecimal"/> to a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            A <see cref="T:System.Decimal"/> that represents the converted <see cref="T:Simphony.Mathematics.BigDecimal"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Explicit(Simphony.Mathematics.BigDecimal)~System.Double">
            <summary>
            Defines an explicit conversion of a <see cref="T:Simphony.Mathematics.BigDecimal"/> to a double-precision
            floating-point number.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            A double-precision floating-point number that represents the converted
            <see cref="T:Simphony.Mathematics.BigDecimal"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Explicit(Simphony.Mathematics.BigDecimal)~System.Single">
            <summary>
            Defines an explicit conversion of a <see cref="T:Simphony.Mathematics.BigDecimal"/> to a single-precision
            floating-point number.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            A single-precision floating-point number that represents the converted
            <see cref="T:Simphony.Mathematics.BigDecimal"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Explicit(Simphony.Mathematics.BigDecimal)~System.Int32">
            <summary>
            Defines an explicit conversion of a <see cref="T:Simphony.Mathematics.BigDecimal"/> to a 32-bit signed integer.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            A 32-bit signed integer that represents the converted <see cref="T:Simphony.Mathematics.BigDecimal"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Explicit(Simphony.Mathematics.BigDecimal)~System.UInt32">
            <summary>
            Defines an explicit conversion of a <see cref="T:Simphony.Mathematics.BigDecimal"/> to a 32-bit unsigned integer.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            A 32-bit unsigned integer that represents the converted <see cref="T:Simphony.Mathematics.BigDecimal"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Implicit(System.Decimal)~Simphony.Mathematics.BigDecimal">
            <summary>
            Defines an implicit conversion of a <see cref="T:System.Decimal"/> integer to a
            <see cref="T:Simphony.Mathematics.BigDecimal"/>.
            </summary>
            <param name="value">
            The <see cref="T:System.Decimal"/> to convert.
            </param>
            <returns>
            The converted <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Implicit(System.Double)~Simphony.Mathematics.BigDecimal">
            <summary>
            Defines an implicit conversion of a double-precision floating-point number to a
            <see cref="T:Simphony.Mathematics.BigDecimal"/>.
            </summary>
            <param name="value">
            The double-precision floating-point number to convert.
            </param>
            <returns>
            The converted double-precision floating-point number.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Implicit(System.Int32)~Simphony.Mathematics.BigDecimal">
            <summary>
            Defines an implicit conversion of a 32-bit signed integer to a <see cref="T:Simphony.Mathematics.BigDecimal"/>.
            </summary>
            <param name="value">
            The 32-bit signed integer to convert.
            </param>
            <returns>
            The converted 32-bit signed integer.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Inequality(Simphony.Mathematics.BigDecimal,Simphony.Mathematics.BigDecimal)">
            <summary>
            Returns a value that indicates whether two <see cref="T:Simphony.Mathematics.BigDecimal"/> objects have different
            values.
            </summary>
            <param name="left">
            The first value to compare.
            </param>
            <param name="right">
            The second value to compare.
            </param>
            <returns>
            True if <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise,
            false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Modulus(Simphony.Mathematics.BigDecimal,Simphony.Mathematics.BigDecimal)">
            <summary>
            Returns the remainder resulting from dividing two specified <see cref="T:Simphony.Mathematics.BigDecimal"/>
            values.
            </summary>
            <param name="dividend">
            The dividend.
            </param>
            <param name="divisor">
            The divisor.
            </param>
            <returns>
            The remainder resulting from dividing <paramref name="dividend"/> by
            <paramref name="divisor"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Subtraction(Simphony.Mathematics.BigDecimal,Simphony.Mathematics.BigDecimal)">
            <summary>
            Subtracts two specified <see cref="T:Simphony.Mathematics.BigDecimal"/> values.
            </summary>
            <param name="left">
            The minuend.
            </param>
            <param name="right">
            The subtrahend.
            </param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_UnaryNegation(Simphony.Mathematics.BigDecimal)">
            <summary>
            Negates the value of the specified <see cref="T:Simphony.Mathematics.BigDecimal"/> operand.
            </summary>
            <param name="value">
            The value to negate.
            </param>
            <returns>
            The result of <paramref name="value"/> multiplied by negative one (-1).
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Decrement(Simphony.Mathematics.BigDecimal)">
            <summary>
            Increments the <see cref="T:Simphony.Mathematics.BigDecimal"/> operand by one.
            </summary>
            <param name="value">
            The value to decrement.
            </param>
            <returns>
            The value of <paramref name="value"/> decremented by one.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Multiply(Simphony.Mathematics.BigDecimal,Simphony.Mathematics.BigDecimal)">
            <summary>
            Multiplies two specified <see cref="T:Simphony.Mathematics.BigDecimal"/> values.
            </summary>
            <param name="left">
            The first value to multiply.
            </param>
            <param name="right">
            The second value to multiply.
            </param>
            <returns>
            The result of multiplying <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Division(Simphony.Mathematics.BigDecimal,Simphony.Mathematics.BigDecimal)">
            <summary>
            Divides two specified <see cref="T:Simphony.Mathematics.BigDecimal"/> values.
            </summary>
            <param name="dividend">
            The dividend.
            </param>
            <param name="divisor">
            The divisor.
            </param>
            <returns>
            The result of dividing <paramref name="dividend"/> by <paramref name="divisor"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Addition(Simphony.Mathematics.BigDecimal,Simphony.Mathematics.BigDecimal)">
            <summary>
            Adds two specified <see cref="T:Simphony.Mathematics.BigDecimal"/> values.
            </summary>
            <param name="left">
            The first value to add.
            </param>
            <param name="right">
            The second value to add.
            </param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_UnaryPlus(Simphony.Mathematics.BigDecimal)">
            <summary>
            Returns the value of the <see cref="T:Simphony.Mathematics.BigDecimal"/> operand (the sign of the operand is
            unchanged).
            </summary>
            <param name="value">
            The operand to return.
            </param>
            <returns>
            The value of the operand, <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Increment(Simphony.Mathematics.BigDecimal)">
            <summary>
            Increments the <see cref="T:Simphony.Mathematics.BigDecimal"/> operand by one.
            </summary>
            <param name="value">
            The value to increment.
            </param>
            <returns>
            The value of <paramref name="value"/> incremented by one.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_LessThan(Simphony.Mathematics.BigDecimal,Simphony.Mathematics.BigDecimal)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Simphony.Mathematics.BigDecimal"/> is less than
            another specified <see cref="T:Simphony.Mathematics.BigDecimal"/>.
            </summary>
            <param name="left">
            The first value to compare.
            </param>
            <param name="right">
            The second value to compare.
            </param>
            <returns>
            True if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_LessThanOrEqual(Simphony.Mathematics.BigDecimal,Simphony.Mathematics.BigDecimal)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Simphony.Mathematics.BigDecimal"/> is less than or
            equal to another specified <see cref="T:Simphony.Mathematics.BigDecimal"/>.
            </summary>
            <param name="left">
            The first value to compare.
            </param>
            <param name="right">
            The second value to compare.
            </param>
            <returns>
            True if <paramref name="left"/> is less than or equal to <paramref name="right"/>;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_Equality(Simphony.Mathematics.BigDecimal,Simphony.Mathematics.BigDecimal)">
            <summary>
            Returns a value that indicates whether two <see cref="T:Simphony.Mathematics.BigDecimal"/> objects are equal.
            </summary>
            <param name="left">
            The first value to compare.
            </param>
            <param name="right">
            The second value to compare.
            </param>
            <returns>
            True if <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_GreaterThan(Simphony.Mathematics.BigDecimal,Simphony.Mathematics.BigDecimal)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Simphony.Mathematics.BigDecimal"/> is greater than
            another specified <see cref="T:Simphony.Mathematics.BigDecimal"/>.
            </summary>
            <param name="left">
            The first value to compare.
            </param>
            <param name="right">
            The second value to compare.
            </param>
            <returns>
            True if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.op_GreaterThanOrEqual(Simphony.Mathematics.BigDecimal,Simphony.Mathematics.BigDecimal)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Simphony.Mathematics.BigDecimal"/> is greater than or
            equal to another specified <see cref="T:Simphony.Mathematics.BigDecimal"/>.
            </summary>
            <param name="left">
            The first value to compare.
            </param>
            <param name="right">
            The second value to compare.
            </param>
            <returns>
            True if <paramref name="left"/> is greater than or equal to <paramref name="right"/>;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.Exp(System.Double)">
            <summary>
            Returns e raised to the specified power as a <see cref="T:Simphony.Mathematics.BigDecimal"/>.
            </summary>
            <param name="exponent">
            A number specifying a power.
            </param>
            <returns>
            The number e raised to the power <paramref name="exponent"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.Pow(System.Double,System.Double)">
            <summary>
            Returns a specified number raised to the specified power as a <see cref="T:Simphony.Mathematics.BigDecimal"/>.
            </summary>
            <param name="basis">
            A double-precision floating-point number to be raised to a power.
            </param>
            <param name="exponent">
            A double-precision floating-point number that specifies a power.
            </param>
            <returns>
            The number <paramref name="basis"/> raised to the power <paramref name="exponent"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.CompareTo(Simphony.Mathematics.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.Equals(Simphony.Mathematics.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.Normalize">
            <summary>
            Removes trailing zeros on the mantissa.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.Round(System.Int32)">
            <summary>
            Rounds the number to the given precision by removing the least significant digits.
            </summary>
            <param name="precision">
            The precision to round to.
            </param>
            <returns>
            The round number.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.Truncate(System.Int32)">
            <summary>
            Truncate the number to the given precision by removing the least significant digits.
            </summary>
            <param name="precision">
            The precision to truncate to.
            </param>
            <returns>
            The truncated number.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.BigDecimal.AlignExponent(Simphony.Mathematics.BigDecimal,Simphony.Mathematics.BigDecimal)">
            <summary>
            Returns the mantissa of value, aligned to the exponent of reference.
            Assumes the exponent of value is larger than of reference.
            </summary>
        </member>
        <member name="T:Simphony.Mathematics.MathEx">
            <content>
            Mathematical functions above and beyond those provided by the System.Math class.
            </content>
            <content>
            Implementation of the Metropolis–Hastings algorithm.
            </content>
            <content>
            Mathematical functions above and beyond those provided by the System.Math class.
            </content>
            <content>
            Mathematical functions above and beyond those provided by the System.Math class.
            </content>
            <content>
            Mathematical functions above and beyond those provided by the System.Math class.
            </content>
            <content>
            Mathematical functions above and beyond those provided by the System.Math class.
            </content>
            <content>
            Mathematical functions above and beyond those provided by the System.Math class.
            </content>
            <content>
            Mathematical functions above and beyond those provided by the System.Math class.
            </content>
            <summary>
            Mathematical functions above and beyond those provided by the System.Math class.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.LagrangePolynomial(System.Double[],System.Double[],System.Double)">
            <summary>
            Evaluates the Lagrange polynomial passing through a set of (x,y)-coordinates at a specified
            point using Neville's algorithm.
            </summary>
            <param name="x">
            An array containing the x-values.
            </param>
            <param name="y">
            An array containing the corresponding y-values.
            </param>
            <param name="c">
            The point at which to evaluate the polynomial.
            </param>
            <returns>
            The value of the polynomial at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified arrays is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if either of the arrays is empty or if the two arrays have different lengths.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.MetropolisHastings(System.Func{System.Double,System.Double},System.Int32,System.Double,System.Double)">
            <summary>
            Implementation of the Metropolis-Hastings algorithm that generates a sequence of random
            deviates from a probability distribution whose density is proportional to a specified
            function.
            </summary>
            <param name="f">
            The function that is proportional to the density of the probability distribution.
            </param>
            <param name="iterations">
            The number of samples to generate.
            </param>
            <param name="start">
            An arbitrary starting point that will be the beginning of the random walk.
            </param>
            <param name="variance">
            The variance of the normal distribution to be used to generate the random walk.
            </param>
            <returns>
            An array containing the samples.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified function is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified starting point is infinite or NaN; if the specified number of
            iterations is zero or negative; or if the specified variance is zero, negative, infinite,
            or NaN.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.MetropolisHastings(System.Func{System.Double,System.Double},System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Implementation of the Metropolis-Hastings algorithm that generates a sequence of random
            deviates from a probability distribution whose density is proportional to a specified
            function.
            </summary>
            <param name="f">
            The function that is proportional to the density of the probability distribution.
            </param>
            <param name="iterations">
            The number of samples to generate.
            </param>
            <param name="start">
            An arbitrary starting point that will be the beginning of the random walk.
            </param>
            <param name="variance">
            The variance of the normal distribution to be used to generate the random walk.
            </param>
            <param name="log">
            True if the function <paramref name="f"/> returns the natural logarithm of the function
            that is proportional to the density of the probability distribution; otherwise, false.
            </param>
            <returns>
            An array containing the samples.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified function is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified starting point is infinite or NaN; if the specified number of
            iterations is zero or negative; or if the specified variance is zero, negative, infinite,
            or NaN.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.MetropolisHastings(System.Func{System.Double,System.Double},System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Implementation of the Metropolis-Hastings algorithm that generates a sequence of random
            deviates from a probability distribution whose density is proportional to a specified
            function.
            </summary>
            <param name="f">
            The function that is proportional to the density of the probability distribution.
            </param>
            <param name="iterations">
            The number of samples to generate.
            </param>
            <param name="start">
            An arbitrary starting point that will be the beginning of the random walk.
            </param>
            <param name="variance">
            The variance of the normal distribution to be used to generate the random walk.
            </param>
            <param name="burnin">
            The number of samples to skip prior to beginning collection.
            </param>
            <returns>
            An array containing the samples.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified function is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified starting point is infinite or NaN; if the specified number of
            iterations is zero or negative; if the specified variance is zero, negative, infinite, or
            NaN; or if the specified burnin is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.MetropolisHastings(System.Func{System.Double,System.Double},System.Int32,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Implementation of the Metropolis-Hastings algorithm that generates a sequence of random
            deviates from a probability distribution whose density is proportional to a specified
            function.
            </summary>
            <param name="f">
            The function that is proportional to the density of the probability distribution.
            </param>
            <param name="iterations">
            The number of samples to generate.
            </param>
            <param name="start">
            An arbitrary starting point that will be the beginning of the random walk.
            </param>
            <param name="variance">
            The variance of the normal distribution to be used to generate the random walk.
            </param>
            <param name="burnin">
            The number of samples to skip prior to beginning collection.
            </param>
            <param name="log">
            True if the function <paramref name="f"/> returns the natural logarithm of the function
            that is proportional to the density of the probability distribution; otherwise, false.
            </param>
            <returns>
            An array containing the samples.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified function is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified starting point is infinite or NaN; if the specified number of
            iterations is zero or negative; if the specified variance is zero, negative, infinite, or
            NaN; or if the specified burnin is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.MetropolisHastings(System.Func{Simphony.Mathematics.Vector,System.Double},System.Int32,Simphony.Mathematics.Vector,Simphony.Mathematics.Matrix)">
            <summary>
            Implementation of the Metropolis-Hastings algorithm that generates a sequence of random
            deviates from a multivariate probability distribution whose density is proportional to a
            specified function.
            </summary>
            <param name="f">
            The function that is proportional to the density of the probability distribution.
            </param>
            <param name="iterations">
            The number of samples to generate.
            </param>
            <param name="start">
            An arbitrary starting vector that will be the beginning of the random walk.
            </param>
            <param name="covariance">
            The covariance matrix of the multivariate normal distribution to be used to generate the
            random walk.
            </param>
            <returns>
            An array containing the samples.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified function, the specified starting vector, or the specified
            covariance matrix is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of iterations is zero or negative or if the covariance
            matrix is not a square matrix.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the covariance matrix is not positive semi-definite; or if the dimensions of the
            starting vector and the covariance matrix do not match.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.MetropolisHastings(System.Func{Simphony.Mathematics.Vector,System.Double},System.Int32,Simphony.Mathematics.Vector,Simphony.Mathematics.Matrix,System.Boolean)">
            <summary>
            Implementation of the Metropolis-Hastings algorithm that generates a sequence of random
            deviates from a multivariate probability distribution whose density is proportional to a
            specified function.
            </summary>
            <param name="f">
            The function that is proportional to the density of the probability distribution.
            </param>
            <param name="iterations">
            The number of samples to generate.
            </param>
            <param name="start">
            An arbitrary starting vector that will be the beginning of the random walk.
            </param>
            <param name="covariance">
            The covariance matrix of the multivariate normal distribution to be used to generate the
            random walk.
            </param>
            <param name="log">
            True if the function <paramref name="f"/> returns the natural logarithm of the function
            that is proportional to the density of the probability distribution; otherwise, false.
            </param>
            <returns>
            An array containing the samples.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified function, the specified starting vector, or the specified
            covariance matrix is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of iterations is zero or negative or if the covariance
            matrix is not a square matrix.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the covariance matrix is not positive semi-definite; or if the dimensions of the
            starting vector and the covariance matrix do not match.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.MetropolisHastings(System.Func{Simphony.Mathematics.Vector,System.Double},System.Int32,Simphony.Mathematics.Vector,Simphony.Mathematics.Matrix,System.Int32)">
            <summary>
            Implementation of the Metropolis-Hastings algorithm that generates a sequence of random
            deviates from a multivariate probability distribution whose density is proportional to a
            specified function.
            </summary>
            <param name="f">
            The function that is proportional to the density of the probability distribution.
            </param>
            <param name="iterations">
            The number of samples to generate.
            </param>
            <param name="start">
            An arbitrary starting vector that will be the beginning of the random walk.
            </param>
            <param name="covariance">
            The covariance matrix of the multivariate normal distribution to be used to generate the
            random walk.
            </param>
            <param name="burnin">
            The number of samples to skip prior to beginning collection.
            </param>
            <returns>
            An array containing the samples.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified function, the specified starting vector, or the specified
            covariance matrix is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of iterations is zero or negative; if the covariance matrix
            is not a square matrix; or if the specified burnin is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the covariance matrix is not positive semi-definite; or if the dimensions of the
            starting vector and the covariance matrix do not match.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.MetropolisHastings(System.Func{Simphony.Mathematics.Vector,System.Double},System.Int32,Simphony.Mathematics.Vector,Simphony.Mathematics.Matrix,System.Int32,System.Boolean)">
            <summary>
            Implementation of the Metropolis-Hastings algorithm that generates a sequence of random
            deviates from a multivariate probability distribution whose density is proportional to a
            specified function.
            </summary>
            <param name="f">
            The function that is proportional to the density of the probability distribution.
            </param>
            <param name="iterations">
            The number of samples to generate.
            </param>
            <param name="start">
            An arbitrary starting vector that will be the beginning of the random walk.
            </param>
            <param name="covariance">
            The covariance matrix of the multivariate normal distribution to be used to generate the
            random walk.
            </param>
            <param name="burnin">
            The number of samples to skip prior to beginning collection.
            </param>
            <param name="log">
            True if the function <paramref name="f"/> returns the natural logarithm of the function
            that is proportional to the density of the probability distribution; otherwise, false.
            </param>
            <returns>
            An array containing the samples.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified function, the specified starting vector, or the specified
            covariance matrix is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of iterations is zero or negative; if the covariance matrix
            is not a square matrix; or if the specified burnin is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the covariance matrix is not positive semi-definite; or if the dimensions of the
            starting vector and the covariance matrix do not match.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.ShapiroWilk(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Uses the Shapiro-Wilk test to assess the normality of a collection of data.
            </summary>
            <param name="data">
            A collection containing the data to test.
            </param>
            <returns>
            True if the null hypothesis is rejected at the significance level of alpha (i.e. the
            data does not pass the test); otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified collection length is not inclusively between 3 and 5000.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.ShapiroWilk(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Uses the Shapiro-Wilk test to assess the normality of a collection of data.
            </summary>
            <param name="data">
            A collection containing the data to test.
            </param>
            <param name="alpha">
            The significance level of the test.
            </param>
            <returns>
            True if the null hypothesis is rejected at the significance level of alpha (i.e. the
            data does not pass the test); otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified collection length is not inclusively between 3 and 5000
            or if alpha is not inclusively between 0 and 1.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.ShapiroWilk(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double@)">
            <summary>
            Uses the Shapiro-Wilk test to assess the normality of a collection of data.
            </summary>
            <param name="data">
            A collection containing the data to test.
            </param>
            <param name="alpha">
            The significance level of the test.
            </param>
            <param name="testStatistic">
            When the method returns, the value of the test statistic; W.
            </param>
            <returns>
            True if the null hypothesis is rejected at the significance level of alpha (i.e. the
            data does not pass the test); otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified collection length is not inclusively between 3 and 5000
            or if alpha is not inclusively between 0 and 1.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.ShapiroWilk(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double@,System.Double@)">
            <summary>
            Uses the Shapiro-Wilk test to assess the normality of a collection of data.
            </summary>
            <param name="data">
            A collection containing the data to test.
            </param>
            <param name="alpha">
            The significance level of the test.
            </param>
            <param name="testStatistic">
            When the method returns, the value of the test statistic; W.
            </param>
            <param name="pValue">
            When the method returns, the p-value for the test.
            </param>
            <returns>
            True if the null hypothesis is rejected at the significance level of alpha (i.e. the
            data does not pass the test); otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified collection length is not inclusively between 3 and 5000
            or if alpha is not inclusively between 0 and 1.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.RungeKuttaFehlberg(System.Action{System.Double,System.Double[],System.Double[]},System.Double[],System.Double[],System.Double@,System.Double,System.Double@,System.Double,Simphony.Mathematics.IntegrationFlag@)">
            <summary>
            Carries out Runge-Kutta-Fehlberg integration.
            </summary>
            <param name="f">
            A user-supplied method of the form f(t, y, yp) used to evaluate the derivatives.
            </param>
            <param name="y">
            The current solution vector at <paramref name="t"/>.
            </param>
            <param name="yp">
            The derivative of the current solution vector at <paramref name="t"/>. The user should not
            set or alter this information.
            </param>
            <param name="t">
            The current value of the independent variable.
            </param>
            <param name="tout">
            The output point at which a solution is desired. A value equal to <paramref name="t"/> is
            permitted on the first call only, in which case the routine will return with a
            <paramref name="flag"/> of <see cref="F:Simphony.Mathematics.IntegrationFlag.NormalModeContinuation"/> if
            continuation is possible.
            </param>
            <param name="relerr">
            The relative error tolerance.
            </param>
            <param name="abserr">
            The absolute error tolerance.
            </param>
            <param name="flag">
            A value indicating the status of integration.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the user-supplied method, the solution vector, or the vector containing the
            derivatives is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified relative or absolute error tolerance is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if:
            <list type="bullet">
            <item><description>The solution vector or the vector containing the derivatives is empty;</description></item>
            <item><description>The solution vector and the vector containing the derivatives have different lengths;</description></item>
            <item><description>The values of <paramref name="t"/> and <paramref name="tout"/> are equal and a continuation flag has been specified; or</description></item>
            <item><description>For other possible reasons &#x2014; see the exception message for details.</description></item>
            </list>
            </exception>
            <remarks>
            <para>
            This routine is primarily designed to solve non-stiff and mildly stiff differential
            equations when derivative evaluations are inexpensive. It should generally not be used
            when the user is demanding high accuracy.
            </para>
            <para>
            This routine integrates a system of first-order ordinary differential equations of the
            form:
            <blockquote>dy(i)/dt = f(t, y(1), y(2), ... ,y(n))</blockquote>
            where the y(1) ... y(n) are given at t.
            </para>
            <para>
            Typically the subroutine is used to integrate from <paramref name="t"/> to
            <paramref name="tout"/> but it can be used as a one-step integrator to advance the
            solution a single step in the direction of <paramref name="tout"/>. On return, the
            parameters in the call list are set for continuing the integration.  The user has only
            to call again (and perhaps define a new value for <paramref name="tout"/>).
            </para>
            <para>
            Before the first call, the user must:
            <list type="bullet">
            <item><description>Supply the subroutine f(t, y, yp) to evaluate the right hand side;
            and</description></item>
            <item><description>Initialize the parameters. In particular, <paramref name="t"/> should
            be set to the starting point for integration, <paramref name="y"/> should contain the
            value of the initial conditions, <paramref name="yp"/> should be allocated to have the
            same length as <paramref name="y"/>, and <paramref name="flag"/> should be set to either
            <see cref="F:Simphony.Mathematics.IntegrationFlag.NormalMode"/> or <see cref="F:Simphony.Mathematics.IntegrationFlag.SingleStepMode"/>.
            </description></item>
            </list>
            </para>
            <para>
            Normally, the user only sets the value of <paramref name="flag"/> before the first call, and
            thereafter the algorithm manages the value. On the first call, <paramref name="flag"/> should
            be set to <see cref="F:Simphony.Mathematics.IntegrationFlag.NormalMode"/> or <see cref="F:Simphony.Mathematics.IntegrationFlag.SingleStepMode"/>.
            On normal return, <paramref name="flag"/> will have been reset to
            <see cref="F:Simphony.Mathematics.IntegrationFlag.NormalModeContinuation"/> or
            <see cref="F:Simphony.Mathematics.IntegrationFlag.SingleStepModeContinuation"/>, and the user can continue to call
            the routine with that value of <paramref name="flag"/>.
            </para>
            <para>
            The routine returns with all the information needed to continue the integration. If the
            integration reached <paramref name="tout"/>, the user need only define a new <paramref name="tout"/>
            And call again. In the one-step integrator mode, returning with a <paramref name="flag"/> of
            <see cref="F:Simphony.Mathematics.IntegrationFlag.SingleStepModeContinuation"/>, the user must keep in mind that each
            step taken is in the direction of the current <paramref name="tout"/>. Upon reaching
            <paramref name="tout"/>, indicated by the output value of <paramref name="flag"/> switching to
            <see cref="F:Simphony.Mathematics.IntegrationFlag.NormalModeContinuation"/>, the user must define a new
            <paramref name="tout"/> and reset the flag to <see cref="F:Simphony.Mathematics.IntegrationFlag.SingleStepModeContinuation"/>
            to continue in the one-step integrator mode.
            </para>
            <para>
            In some cases, an error or difficulty occurs during a call. In that case, the output value of
            <paramref name="flag"/> is used to indicate that there is a problem that the user must address.
            These values include:
            <list type="bullet">
            <item>
            <term><see cref="F:Simphony.Mathematics.IntegrationFlag.WarningRelativeErrorTooSmall"/></term>
            <description>Integration was not completed because the specified relative error tolerance
            was too small. The relative error tolerance has been increased appropriately for continuing.
            If the new value is acceptable, recall with either the
            <see cref="F:Simphony.Mathematics.IntegrationFlag.NormalModeContinuation"/> or
            <see cref="F:Simphony.Mathematics.IntegrationFlag.SingleStepModeContinuation"/> flags.</description>
            </item>
            <item>
            <term><see cref="F:Simphony.Mathematics.IntegrationFlag.WarningTooManySteps"/></term>
            <description>Integration was not completed because more than 3,000 derivative evaluations
            were needed. This is approximately 500 steps. The user may continue by simply calling again.
            The function counter will be reset to 0, and another 3,000 function evaluations are allowed.
            </description>
            </item>
            <item>
            <term><see cref="F:Simphony.Mathematics.IntegrationFlag.WarningSolutionVanished"/></term>
            <description>Integration was not completed because the solution vanished, making a pure
            relative error test impossible. The user must use a non-zero absolute error tolerance to
            continue. Using the one-step integration mode for one step is a good way to proceed.
            </description>
            </item>
            <item>
            <term><see cref="F:Simphony.Mathematics.IntegrationFlag.WarningPossibleSingularity"/></term>
            <description>Integration was not completed because the requested accuracy could not be
            achieved, even using the smallest allowable step size. The user must increase the absolute
            or relative error tolerances before continuing. It is also necessary to reset the flag to
            either <see cref="F:Simphony.Mathematics.IntegrationFlag.NormalModeContinuation"/> or
            <see cref="F:Simphony.Mathematics.IntegrationFlag.SingleStepModeContinuation"/>. This result indicates a trouble
            spot &#x2014; the solution is changing rapidly, or a singularity may be present. It often
            is inadvisable to continue.</description>
            </item>
            <item>
            <term><see cref="F:Simphony.Mathematics.IntegrationFlag.WarningInefficient"/></term>
            <description>It is likely that the Runge-Kutta-Fehlberg method is inefficient for solving
            this particular problem. Too much output is restricting the natural step size choice. The
            user should use the one-step integration mode with the step size determined by the code.
            If the user insists upon continuing the integration, reset the flag to either
            <see cref="F:Simphony.Mathematics.IntegrationFlag.NormalModeContinuation"/> or
            <see cref="F:Simphony.Mathematics.IntegrationFlag.SingleStepModeContinuation"/> before calling again.</description>
            </item>
            </list>
            </para>
            <para>
            References:
            <list type="bullet">
            <item><description>Erwin Fehlberg, Low-order Classical Runge-Kutta Formulas with Stepsize
            Control, NASA Technical Report R-315, 1969.</description></item>
            <item><description>Lawrence Shampine, Herman Watts, S Davenport, Solving Non-stiff Ordinary
            Differential Equations - The State of the Art, SIAM Review, Volume 18, pages 376-411, 1976.
            </description></item>
            </list>
            </para>
            <para>
            Based on the original FORTRAN77 version by Herman Watts and Lawrence Shampine; and on the C++
            version by John Burkardt released under the LGPL license.
            </para>
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.IncompleteBeta(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the regularized incomplete beta function for real arguments a, b > 0 and x in [0, 1].
            </summary>
            <param name="a">
            The real argument a > 0.
            </param>
            <param name="b">
            The real argument b > 0.
            </param>
            <param name="x">
            The real argument x in [0, 1].
            </param>
            <returns>
            The value of the function at (a, b, x).
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.InverseIncompleteBeta(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the inverse of the regularized incomplete beta function for real arguments a, b > 0 and y in [0, 1].
            </summary>
            <param name="a">
            The real argument a > 0.
            </param>
            <param name="b">
            The real argument b > 0.
            </param>
            <param name="y">
            The real argument y in [0, 1].
            </param>
            <returns>
            The value of the function at (a, b, y).
            </returns>
            <remarks>
            See: Cran, G. W., Martin, K. J. and Thomas, G. E., Remark AS R19 and Algorithm AS 109,
            Applied Statistics, 26(1), 111-114.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.LogBeta(System.Double,System.Double)">
            <summary>
            Evaluates the natural logarithm of the Beta function for real arguments a, b > 0.
            </summary>
            <param name="a">
            The real argument a > 0.
            </param>
            <param name="b">
            The real argument b > 0.
            </param>
            <returns>
            The value of the function at (a, b).
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.BetaCore(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates continued fraction for incomplete beta function by modified Lentz's method.
            </summary>
            <param name="a">
            The first shape parameter.
            </param>
            <param name="b">
            The second shape parameter.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if the continued
            fraction failed to converge.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.ZeroIn(System.Double,System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Finds the root of a function f known to lie near a real argument x.
            </summary>
            <param name="x">
            The starting point for the search.
            </param>
            <param name="f">
            The function under investigation.
            </param>
            <param name="tol">
            The acceptable tolerance.
            </param>
            <returns>
            An estimate of the root.
            </returns>
            <remarks>
            This method is an implementation of the Van Wijngaarden-Dekker-Brent algorithm.  For
            details see Section 9.3 of: Press, W.H., Teukolsky, S.A., Vetterling, W.T., and
            Flannery, B.P., (1992) Numerical Recipes in C, 2nd Edition, Cambridge University Press.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified starting point is infinite or NaN.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified function is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the function is undefined at the specified starting point; or if an interval
            containing the starting point and the root cannot be found.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.ZeroIn(System.Double,System.Double,System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Finds the root of a function f known to lie between real arguments a and b.
            </summary>
            <param name="a">
            The left-most point of the interval to search.
            </param>
            <param name="b">
            The right-most point of the interval to search.
            </param>
            <param name="f">
            The function under investigation.
            </param>
            <param name="tol">
            The acceptable tolerance.
            </param>
            <returns>
            An estimate of the root.
            </returns>
            <remarks>
            This method is an implementation of the Van Wijngaarden-Dekker-Brent algorithm.  For
            details see Section 9.3 of: Press, W.H., Teukolsky, S.A., Vetterling, W.T., and
            Flannery, B.P., (1992) Numerical Recipes in C, 2nd Edition, Cambridge University Press.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified endpoints is infinite or NaN.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified function is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the function is undefined at either of the endpoints or if the values of the
            function at the endpoints do not have opposite signs; i.e. if the specified interval
            cannot be guaranteed to contain a root.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.IncompleteGamma(System.Double,System.Double,System.Boolean)">
            <summary>
            Evaluates the regularized incomplete gamma function for real arguments a, x >= 0.
            </summary>
            <param name="a">
            The real argument a >= 0.
            </param>
            <param name="x">
            The real argument x >= 0.
            </param>
            <param name="complement">
            False if the incomplete gamma function should be evaluated; true if the complementary
            incomplete gamma function should be evaluated.
            </param>
            <returns>
            The value of the function at (a, x).
            </returns>
            <remarks>
            See: Press, W.H., Teukolsky, S.A., Vetterling, W.T., and Flannery, B.P., (1992) Numerical
            Recipes in C, 2nd Edition, Cambridge University Press.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.InverseIncompleteGamma(System.Double,System.Double)">
            <summary>
            Evaluates the inverse incomplete gamma function for a real arguments a, y.
            </summary>
            <param name="a">
            The real argument a.
            </param>
            <param name="y">
            The real argument y.
            </param>
            <returns>
            The value of the function at (a, y).
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.LogGamma(System.Double)">
            <summary>
            Evaluates the natural logarithm of the Gamma function for real argument x > 0.
            </summary>
            <param name="x">
            The real argument x > 0.
            </param>
            <returns>
            The value of the function at x.
            </returns>
            <remarks>
            See: Cody, W. J., Chebyshev approximations for the natural logarithm of the gamma function.
            Mathematics of Computation, 21, 198-203.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Error(System.Double,System.Boolean)">
            <summary>
            Evaluates erf(x) or erfc(x) for a real argument x.
            </summary>
            <param name="x">
            The real argument x.
            </param>
            <param name="complement">
            Set to false to evaluate erf(x) or true to evaluate erfc(x).
            </param>
            <returns>
            The value of the function at x.
            </returns>
            <remarks>
            See: Cody, W. J., Rational chebyshev approximations for the error function. Mathematics of
            Computation, 23, 631-637.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.InverseError(System.Double,System.Boolean)">
            <summary>
            Evaluates the inverse error function or inverse complementary error function for a real
            argument y.
            </summary>
            <param name="y">
            The real argument y.
            </param>
            <param name="complement">
            Set to false to evaluate the inverse error function or true to evaluate the inverse
            complementary error function.
            </param>
            <returns>
            The value of the inverse function at y.
            </returns>
        </member>
        <member name="F:Simphony.Mathematics.MathEx.APERY">
            <summary>
            Represents Apéry's constant.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.MathEx.EPS">
            <summary>
            Represents machine epsilon; i.e. the smallest x such that 1 + x > 1 to machine precision.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.MathEx.EULER">
            <summary>
            Represents the Euler–Mascheroni constant.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.MathEx.SQRT2">
            <summary>
            Represents the square root of 2.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.MathEx.SQRTPI">
            <summary>
            Represents the square root of PI.
            </summary>
        </member>
        <member name="P:Simphony.Mathematics.MathEx.BinningMethod">
            <summary>
            Gets or sets the method used to calculate the number of bins in a histogram.
            </summary>
            <value>
            The method used to calculate the number of bins in a histogram.
            </value>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Acosh(System.Double)">
            <summary>
            Returns the angle whose hyperbolic cosine is the specified number.
            </summary>
            <param name="x">
            A number representing a hyperbolic cosine.
            </param>
            <returns>
            An angle measured in radians or Double.NaN if the specified number is not a valid
            hyperbolic cosine.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Arclength(Simphony.Mathematics.Vector3D,Simphony.Mathematics.Vector3D,Simphony.Mathematics.Vector3D)">
            <summary>
            Calculates the length of an arc defined by three vectors in 3-dimensional space.
            </summary>
            <param name="u">
            The first vector.
            </param>
            <param name="v">
            The second vector.
            </param>
            <param name="w">
            The third vector.
            </param>
            <returns>
            The length of the arc defined by the three vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the specified vectors is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Arclength(Simphony.Mathematics.Vector2D,Simphony.Mathematics.Vector2D,Simphony.Mathematics.Vector2D)">
            <summary>
            Calculates the length of an arc defined by three vectors in 2-dimensional space.
            </summary>
            <param name="u">
            The first vector.
            </param>
            <param name="v">
            The second vector.
            </param>
            <param name="w">
            The third vector.
            </param>
            <returns>
            The length of the arc defined by the three vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the specified vectors is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Asinh(System.Double)">
            <summary>
            Returns the angle whose hyperbolic sine is the specified number.
            </summary>
            <param name="x">
            A number representing a hyperbolic sine.
            </param>
            <returns>
            An angle measured in radians.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Atanh(System.Double)">
            <summary>
            Returns the angle whose hyperbolic tangent is the specified number.
            </summary>
            <param name="x">
            A number representing a hyperbolic tangent.
            </param>
            <returns>
            An angle measured in radians or Double.NaN if the specified number is not a valid
            hyperbolic tangent.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.CentralMoments(System.Nullable{System.Decimal}[],System.Int32)">
            <summary>
            Two pass calculation of the central moments of a set of data ignoring null values.
            </summary>
            <param name="data">
            The data to calculate the central moments of.
            </param>
            <param name="k">
            The highest order central moment to return.
            </param>
            <returns>
            An array containing the central moments of the data.
            </returns>
            <remarks>
            The j-th element in the returned array will contain the j-th central moment, which is
            defined to be <sup>1</sup>/<sub>n</sub><big>&#8721;</big>(x<sub>i</sub>-&#956;)<sup>j</sup>.
            Note that this method will return the size of the data set in the 0-th position rather
            than the correct value of 1, and it will return the mean of the data set in the 1-st
            position rather than the correct value of 0.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of data is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value of the parameter k is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the array contains no non-null values.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.CentralMoments(System.Decimal[],System.Int32)">
            <summary>
            Two pass calculation of the central moments of a set of data.
            </summary>
            <param name="data">
            The data to calculate the central moments of.
            </param>
            <param name="k">
            The highest order central moment to return.
            </param>
            <returns>
            An array containing the central moments of the data.
            </returns>
            <remarks>
            The j-th element in the returned array will contain the j-th central moment, which is
            defined to be <sup>1</sup>/<sub>n</sub><big>&#8721;</big>(x<sub>i</sub>-&#956;)<sup>j</sup>.
            Note that this method will return the size of the data set in the 0-th position rather
            than the correct value of 1, and it will return the mean of the data set in the 1-st
            position rather than the correct value of 0.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of data is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value of the parameter k is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified array is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.CentralMoments(System.Nullable{System.Double}[],System.Int32)">
            <summary>
            Two pass calculation of the central moments of a set of data ignoring null values.
            </summary>
            <param name="data">
            The data to calculate the central moments of.
            </param>
            <param name="k">
            The highest order central moment to return.
            </param>
            <returns>
            An array containing the central moments of the data.
            </returns>
            <remarks>
            The j-th element in the returned array will contain the j-th central moment, which is
            defined to be <sup>1</sup>/<sub>n</sub><big>&#8721;</big>(x<sub>i</sub>-&#956;)<sup>j</sup>.
            Note that this method will return the size of the data set in the 0-th position rather
            than the correct value of 1, and it will return the mean of the data set in the 1-st
            position rather than the correct value of 0.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of data is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value of the parameter k is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.CentralMoments(System.Double[],System.Int32)">
            <summary>
            Two pass calculation of the central moments of a set of data.
            </summary>
            <param name="data">
            The data to calculate the central moments of.
            </param>
            <param name="k">
            The highest order central moment to return.
            </param>
            <returns>
            An array containing the central moments of the data; if the data set is empty, all entries
            in the array will be NaN.
            </returns>
            <remarks>
            The j-th element in the returned array will contain the j-th central moment, which is
            defined to be <sup>1</sup>/<sub>n</sub><big>&#8721;</big>(x<sub>i</sub>-&#956;)<sup>j</sup>.
            Note that this method will return the size of the data set in the 0-th position rather
            than the correct value of 1, and it will return the mean of the data set in the 1-st
            position rather than the correct value of 0.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of data is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value of the parameter k is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.CentralMoments(System.Double[],System.Int32,System.Double@,System.Double@)">
            <summary>
            Two pass calculation of the central moments of a set of data.
            </summary>
            <param name="data">
            The data to calculate the central moments of.
            </param>
            <param name="k">
            The highest order central moment to return.
            </param>
            <param name="min">
            When this method returns, the minimum value in the data set; or NaN if the data set is
            empty.
            </param>
            <param name="max">
            When this method returns, the maximum value in the data set; or NaN if the data set is
            empty.
            </param>
            <returns>
            An array containing the central moments of the data; if the data set is empty, all entries
            in the array will be NaN.
            </returns>
            <remarks>
            The j-th element in the returned array will contain the j-th central moment, which is
            defined to be <sup>1</sup>/<sub>n</sub><big>&#8721;</big>(x<sub>i</sub>-&#956;)<sup>j</sup>.
            Note that this method will return the size of the data set in the 0-th position rather
            than the correct value of 1, and it will return the mean of the data set in the 1-st
            position rather than the correct value of 0.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of data is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value of the parameter k is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.ChiSquaredBins(System.Int32)">
            <summary>
            Gets the number of bins to use for chi-squared binning for a specified number of data points.
            </summary>
            <param name="n">
            The number of data points.
            </param>
            <returns>
            The number of bins.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the number of data points is not strictly positive.
            </exception>
            <remarks>
            See: http://kb.palisade.com/index.php?pg=kb.page&amp;id=57.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Correlation(System.Double[],System.Double[])">
            <summary>
            Calculates the Pearson correlation coefficient between two sets of data.
            </summary>
            <param name="x">
            The first set of data.
            </param>
            <param name="y">
            The second set of data.
            </param>
            <returns>
            The Pearson correlation coefficient between the two sets of data; or NaN if the two sets of
            data have different lengths or if the two sets of data are empty.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the data sets is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Cos(System.Single)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="x">
            The angle, measured in radians.
            </param>
            <returns>
            The cosine of <paramref name="x"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.CosD(System.Double)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="x">
            The angle, measured in degrees.
            </param>
            <returns>
            The cosine of <paramref name="x"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.CosD(System.Single)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="x">
            The angle, measured in degrees.
            </param>
            <returns>
            The cosine of <paramref name="x"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Covariance(System.Double[],System.Double[])">
            <summary>
            Calculates the covariance between two sets of data.
            </summary>
            <param name="x">
            The first set of data.
            </param>
            <param name="y">
            The second set of data.
            </param>
            <returns>
            The covariance between the two sets of data; or NaN if the two sets of data have different
            lengths or if the two sets of data are empty.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the data sets is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.CubeRoot(System.Double)">
            <summary>
            Returns the cube root of a specified number.
            </summary>
            <param name="x">
            A number in question.
            </param>
            <returns>
            The cube root of the specified number.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.DifferentiatePolynomial(System.Double[])">
            <summary>
            Differentiates a polynomial.
            </summary>
            <param name="coef">
            An array containing the coefficients of the polynomial.
            </param>
            <returns>
            An array containing the coefficients of the derivative.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified array is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.EmpiricalDistribution(System.Double[],System.Double)">
            <summary>
            Evaluates the empirical distribution function of a <b>sorted</b> array of data at a
            specified point.
            </summary>
            <param name="data">
            A <b>sorted</b> array of data whose empirical distribution function is to be evaluated.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array is empty.
            </exception>
            <remarks>
            It is important that the array of data be sorted, as this method makes use of a binary
            search as part of its calculations.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Epsilon(System.Double)">
            <summary>
            Returns the distance from |x| to the next largest floating point number.
            </summary>
            <param name="x">
            The real argument x.
            </param>
            <returns>
            The distance from |x| to the next largest floating point number.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.EvaluatePolynomial(System.Double[],System.Double)">
            <summary>
            Evaluates a polynomial.
            </summary>
            <param name="coef">
            An array containing the coefficients of the polynomial.
            </param>
            <param name="x">
            The point at which to evaluate the polynomial.
            </param>
            <returns>
            The value of the polynomial at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified array is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.EvaluateStepFunction(System.Double[],System.Double[],System.Double)">
            <summary>
            Evaluates a step function defined by a set of (x,y)-coordinates.
            </summary>
            <param name="x">
            A <b>sorted</b> array of x-values.
            </param>
            <param name="y">
            An array containing the corresponding y-values.
            </param>
            <param name="c">
            The point at which the step function is to be evaluated.
            </param>
            <returns>
            The value of the step function at the point c.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified arrays is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if either of the specified arrays is empty or if they do not have the same length.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.FitPolynomial(System.Double[],System.Double[],System.Int32)">
            <summary>
            Fits a polynomial to a set of (x,y)-coordinates.
            </summary>
            <param name="x">
            A <b>sorted</b> array of x-values.
            </param>
            <param name="y">
            An array containing the corresponding y-values.
            </param>
            <param name="k">
            The degree of the polynomial to fit.
            </param>
            <returns>
            The coefficients of the polynomial.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified arrays is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified degree is zero or negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if either of the arrays is empty or if the two arrays have different lengths.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.FitPolynomial(System.Double[],System.Double[],System.Int32,System.Double[]@)">
            <summary>
            Fits a polynomial to a set of (x,y)-coordinates.
            </summary>
            <param name="x">
            A <b>sorted</b> array of x-values.
            </param>
            <param name="y">
            An array containing the corresponding y-values.
            </param>
            <param name="k">
            The degree of the polynomial to fit.
            </param>
            <param name="coef">
            When the method exits, the coefficients of the polynomial.
            </param>
            <returns>
            True if the simplex converged; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified arrays is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified degree is zero or negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if either of the arrays is empty or if the two arrays have different lengths.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.HistogramBins(System.Int32)">
            <summary>
            Gets the number of bins to use when constructing a histogram for a specified number
            of data points.
            </summary>
            <param name="n">
            The number of data points.
            </param>
            <returns>
            The number of bins.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the number of data points is not strictly positive.
            </exception>
            <remarks>
            This method uses the static .
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.IntPow(System.Int32,System.Int32)">
            <summary>
            Returns a specified integer raised to the specified power.
            </summary>
            <param name="x">
            An integer to be raised to a power.
            </param>
            <param name="y">
            An integer that specifies a power.
            </param>
            <returns>
            The integer x raised to the power y.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified power is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.LinearInterpolation(System.Double[],System.Double[],System.Double)">
            <summary>
            Approximates a function using linear interpolation.
            </summary>
            <param name="x">
            A <b>sorted</b> array of x-values for which the value of the function is known.
            </param>
            <param name="y">
            An array containing the corresponding y-values of the function.
            </param>
            <param name="c">
            The point at which the function is to be approximated.
            </param>
            <returns>
            The approximate value of the function at the point c; or Double.NaN if the point c is
            outside the range of specified x-values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified arrays is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if either of the specified arrays has a length of less than 2 or if the specified
            arrays do not have the same length.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Log1p(System.Double)">
            <summary>
            Evaluates log(1 + x) for real argument x > -1.
            </summary>
            <param name="x">
            The real argument x > -1.
            </param>
            <returns>
            The value of the function at x.
            </returns>
            <remarks>
            This method eliminates the rounding error that would otherwise occur for small x.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Log2(System.Double)">
            <summary>
            Returns the base 2 logarithm for real argument x > 0.
            </summary>
            <param name="x">
            The real argument x > 0.
            </param>
            <returns>
            The value of the function at x.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Max(System.Nullable{System.Decimal}[])">
            <summary>
            Returns the largest number in a set of decimal numbers ignoring null values.
            </summary>
            <param name="values">
            An array of decimal numbers representing the set.
            </param>
            <returns>
            The largest number in the set.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the set contains no non-null values.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Max(System.Decimal[])">
            <summary>
            Returns the largest number in a set of decimal numbers numbers.
            </summary>
            <param name="values">
            An array of decimal numbers representing the set.
            </param>
            <returns>
            The largest number in the set.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified array is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Max(System.Nullable{System.Double}[])">
            <summary>
            Returns the largest number in a set of double-precision floating-point numbers
            ignoring null values.
            </summary>
            <param name="values">
            An array of double-precision floating-point numbers representing the set.
            </param>
            <returns>
            The largest number in the set; or Double.NaN if the set contains no non-null values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Max(System.Double[])">
            <summary>
            Returns the largest number in a set of double-precision floating-point numbers.
            </summary>
            <param name="values">
            An array of double-precision floating-point numbers representing the set.
            </param>
            <returns>
            The largest number in the set; or Double.NaN if the set is empty.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Max(System.Nullable{System.Int32}[])">
            <summary>
            Returns the largest number in a set of 32-bit signed integers ignoring null values.
            </summary>
            <param name="values">
            An array of 32-bit signed integers numbers representing the set.
            </param>
            <returns>
            The largest number in the set.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified array is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Max(System.Int32[])">
            <summary>
            Returns the largest number in a set of 32-bit signed integers.
            </summary>
            <param name="values">
            An array of 32-bit signed integers numbers representing the set.
            </param>
            <returns>
            The largest number in the set.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified array is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Min(System.Nullable{System.Decimal}[])">
            <summary>
            Returns the smallest number in a set of decimal numbers ignoring null values.
            </summary>
            <param name="values">
            An array of decimal numbers representing the set.
            </param>
            <returns>
            The smallest number in the set.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the set contains no non-null values.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Min(System.Decimal[])">
            <summary>
            Returns the smallest number in a set of decimal numbers numbers.
            </summary>
            <param name="values">
            An array of decimal numbers representing the set.
            </param>
            <returns>
            The smallest number in the set.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified array is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Min(System.Nullable{System.Double}[])">
            <summary>
            Returns the smallest number in a set of double-precision floating-point numbers
            ignoring null values.
            </summary>
            <param name="values">
            An array of double-precision floating-point numbers representing the set.
            </param>
            <returns>
            The smallest number in the set; or Double.NaN if the set contains no non-null values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Min(System.Double[])">
            <summary>
            Returns the smallest number in a set of double-precision floating-point numbers.
            </summary>
            <param name="values">
            An array of double-precision floating-point numbers representing the set.
            </param>
            <returns>
            The smallest number in the set; or Double.NaN if the set is empty.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Min(System.Nullable{System.Int32}[])">
            <summary>
            Returns the smallest number in a set of 32-bit signed integers ignoring null values.
            </summary>
            <param name="values">
            An array of 32-bit signed integers numbers representing the set.
            </param>
            <returns>
            The smallest number in the set.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified array is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Min(System.Int32[])">
            <summary>
            Returns the smallest number in a set of 32-bit signed integers.
            </summary>
            <param name="values">
            An array of 32-bit signed integers numbers representing the set.
            </param>
            <returns>
            The smallest number in the set.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified array is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.RombergIntegration(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Evaluates a definite integral using Romberg's method.
            </summary>
            <param name="f">
            The function to integrate.
            </param>
            <param name="a">
            The lower limit of integration.
            </param>
            <param name="b">
            The upper limit of integration.
            </param>
            <param name="maxSteps">
            The maximum number of steps to perform.
            </param>
            <param name="accuracy">
            The desired accuracy.
            </param>
            <returns>
            The value of the integral.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified function is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the bounds is infinite or NaN; if the maximum number of steps is zero
            or negative; or if the accuracy is zero, negative, infinite, or NaN.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.SampleMoments(System.Nullable{System.Decimal}[],System.Int32)">
            <summary>
            Single pass calculation of the sample moments of a set of data ignoring null values.
            </summary>
            <param name="data">
            The data to calculate the sample moments of.
            </param>
            <param name="k">
            The highest order sample moment to return.
            </param>
            <returns>
            An array containing the sample moments of the data.
            </returns>
            <remarks>
            The j-th element in the returned array will contain the j-th sample moment, which is
            defined to be <sup>1</sup>/<sub>n</sub><big>&#8721;</big>x<sub>i</sub><sup>j</sup>.
            Note that this method will return the size of the data set in the 0-th position rather
            than the correct value of 1.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of data is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value of the parameter k is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the array contains no non-null values.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.SampleMoments(System.Decimal[],System.Int32)">
            <summary>
            Single pass calculation of the sample moments of a set of data.
            </summary>
            <param name="data">
            The data to calculate the sample moments of.
            </param>
            <param name="k">
            The highest order sample moment to return.
            </param>
            <returns>
            An array containing the sample moments of the data.
            </returns>
            <remarks>
            The j-th element in the returned array will contain the j-th sample moment, which is
            defined to be <sup>1</sup>/<sub>n</sub><big>&#8721;</big>x<sub>i</sub><sup>j</sup>.
            Note that this method will return the size of the data set in the 0-th position rather
            than the correct value of 1.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of data is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value of the parameter k is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified array is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.SampleMoments(System.Nullable{System.Double}[],System.Int32)">
            <summary>
            Single pass calculation of the sample moments of a set of data ignoring null values.
            </summary>
            <param name="data">
            The data to calculate the sample moments of.
            </param>
            <param name="k">
            The highest order sample moment to return.
            </param>
            <returns>
            An array containing the sample moments of the data; if the data set is empty, all entries
            in the array will be NaN.
            </returns>
            <remarks>
            The j-th element in the returned array will contain the j-th sample moment, which is
            defined to be <sup>1</sup>/<sub>n</sub><big>&#8721;</big>x<sub>i</sub><sup>j</sup>.
            Note that this method will return the size of the data set in the 0-th position rather
            than the correct value of 1.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of data is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value of the parameter k is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.SampleMoments(System.Double[],System.Int32)">
            <summary>
            Single pass calculation of the sample moments of a set of data.
            </summary>
            <param name="data">
            The data to calculate the sample moments of.
            </param>
            <param name="k">
            The highest order sample moment to return.
            </param>
            <returns>
            An array containing the sample moments of the data; if the data set is empty, all entries
            in the array will be NaN.
            </returns>
            <remarks>
            The j-th element in the returned array will contain the j-th sample moment, which is
            defined to be <sup>1</sup>/<sub>n</sub><big>&#8721;</big>x<sub>i</sub><sup>j</sup>.
            Note that this method will return the size of the data set in the 0-th position rather
            than the correct value of 1.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of data is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value of the parameter k is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.SampleMoments(System.Double[],System.Int32,System.Double@,System.Double@)">
            <summary>
            Single pass calculation of the sample moments of a set of data.
            </summary>
            <param name="data">
            The data to calculate the sample moments of.
            </param>
            <param name="k">
            The highest order sample moment to return.
            </param>
            <param name="min">
            When this method returns, the minimum value in the data set; or NaN if the data set is
            empty.
            </param>
            <param name="max">
            When this method returns, the maximum value in the data set; or NaN if the data set is
            empty.
            </param>
            <returns>
            An array containing the sample moments of the data; if the data set is empty, all entries
            in the array will be NaN.
            </returns>
            <remarks>
            The j-th element in the returned array will contain the j-th sample moment, which is
            defined to be <sup>1</sup>/<sub>n</sub><big>&#8721;</big>x<sub>i</sub><sup>j</sup>.
            Note that this method will return the size of the data set in the 0-th position rather
            than the correct value of 1.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of data is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value of the parameter k is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Sin(System.Single)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="x">
            The angle, measured in radians.
            </param>
            <returns>
            The sine of <paramref name="x"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.SinD(System.Double)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="x">
            The angle, measured in degrees.
            </param>
            <returns>
            The sine of <paramref name="x"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.SinD(System.Single)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="x">
            The angle, measured in degrees.
            </param>
            <returns>
            The sine of <paramref name="x"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.SolveCubic(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the roots of a cubic equation.
            </summary>
            <param name="a">
            The coefficient of x^3.
            </param>
            <param name="b">
            The coefficient of x^2.
            </param>
            <param name="c">
            The coefficient of x.
            </param>
            <param name="d">
            The constant value of this equation.
            </param>
            <returns>
            The roots of the cubic equation.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.SolveQuadratic(System.Double,System.Double,System.Double)">
            <summary>
            Returns the roots of a quadratic equation.
            </summary>
            <param name="a">
            The coefficient of x^2.
            </param>
            <param name="b">
            The coefficient of x.
            </param>
            <param name="c">
            The constant value of this equation.
            </param>
            <returns>
            The roots of the quadratic equation.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Sqrt(System.Decimal)">
            <summary>
            Returns the square root of a specified number.
            </summary>
            <param name="x">
            The number whose square root is to be found.
            </param>
            <returns>
            The square root of a specified number.
            </returns>
            <remarks>
            This function implements the Babylonian method.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Sqrt(System.Single)">
            <summary>
            Returns the square root of a specified number.
            </summary>
            <param name="x">
            The number whose square root is to be found.
            </param>
            <returns>
            The square root of a specified number.
            </returns>
            <remarks>
            This function implements the Babylonian method.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.Tan(System.Single)">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
            <param name="x">
            The angle, measured in radians.
            </param>
            <returns>
            The tangent of <paramref name="x"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.TanD(System.Double)">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
            <param name="x">
            The angle, measured in degrees.
            </param>
            <returns>
            The tangent of <paramref name="x"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MathEx.TanD(System.Single)">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
            <param name="x">
            The angle, measured in degrees.
            </param>
            <returns>
            The tangent of <paramref name="x"/>.
            </returns>
        </member>
        <member name="T:Simphony.Mathematics.MatrixEditorForm">
            <summary>
            The form displayed by the matrix editor.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MatrixEditorForm.#ctor(Simphony.Mathematics.Matrix,System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MatrixEditorForm"/> class.
            </summary>
            <param name="matrix">
            The matrix to edit.
            </param>
            <param name="context">
            The type descriptor context that was passed to the editor.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MatrixEditorForm.Matrix">
            <summary>
            Gets the <see cref="P:Simphony.Mathematics.MatrixEditorForm.Matrix"/> being edited.
            </summary>
            <value>
            The <see cref="P:Simphony.Mathematics.MatrixEditorForm.Matrix"/> being edited.
            </value>
        </member>
        <member name="M:Simphony.Mathematics.MatrixEditorForm.System#IServiceProvider#GetService(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixEditorForm.GetService(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.MatrixEntry">
            <summary>
            Represents an entry of a matrix when editing it in a grid control.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MatrixEntry.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MatrixEntry"/> class.
            </summary>
            <param name="columnIndex">
            The zero-based column index of the entry.
            </param>
        </member>
        <member name="P:Simphony.Mathematics.MatrixEntry.ComponentType">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.MatrixEntry.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.MatrixEntry.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.MatrixEntry.PropertyType">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixEntry.CanResetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixEntry.GetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixEntry.ResetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixEntry.SetValue(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixEntry.ShouldSerializeValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.MatrixRow">
            <summary>
            Represents a row of a matrix when editing it in a grid control.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.#ctor(Simphony.Mathematics.Matrix,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MatrixRow"/> class.
            </summary>
            <param name="matrix">
            The matrix the row belongs to.
            </param>
            <param name="rowIndex">
            The zero-based index of the row to be represented.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified row index is invalid.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MatrixRow.ColumnCount">
            <summary>
            Gets the number of columns in the row.
            </summary>
            <value>
            The number of columns in the row.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MatrixRow.Error">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.MatrixRow.Item(System.Int32)">
            <summary>
            Gets or sets a specific entry of the row.
            </summary>
            <param name="column">
            The column of the entry to get or set.
            </param>
            <returns>
            The specified entry of the row.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the specified column is outside the range of valid values.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MatrixRow.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.BeginEdit">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.CancelEdit">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.EndEdit">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.GetAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.GetClassName">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.GetComponentName">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.GetConverter">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.GetDefaultEvent">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.GetDefaultProperty">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.GetEditor(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.GetEvents">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.GetEvents(System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.GetProperties">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.GetProperties(System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixRow.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.MatrixSizeConverter">
            <summary>
            Custom type converter for the <see cref="T:Simphony.Mathematics.MatrixSize"/> structure.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MatrixSizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixSizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixSizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixSizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixSizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixSizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixSizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.MarkovEmissionsCollection">
            <summary>
            A custom collection for storing emissions in a <see cref="T:Simphony.Mathematics.MarkovChain"/>.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.#ctor(Simphony.Mathematics.MarkovChain)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MarkovEmissionsCollection"/> class.
            </summary>
            <param name="markovChain">
            The <see cref="T:Simphony.Mathematics.MarkovChain"/> the new instance will be associated with.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Mathematics.MarkovChain"/> is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MarkovEmissionsCollection.Count">
            <summary>
            Gets the number of <see cref="T:Simphony.Mathematics.MarkovEmission"/> objects in the collection.
            </summary>
            <value>
            The number of <see cref="T:Simphony.Mathematics.MarkovEmission"/> objects in the collection.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovEmissionsCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </summary>
            <param name="sourceIndex">
            The zero-based index of the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <param name="targetIndex">
            The zero-based index of the target <see cref="T:Simphony.Mathematics.MarkovOutput"/> of the
            <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <returns>
            The specified <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified indices is invalid.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if a <see cref="T:Simphony.Mathematics.MarkovEmission"/> does not exist between the source
            <see cref="T:Simphony.Mathematics.MarkovState"/> and the target <see cref="T:Simphony.Mathematics.MarkovOutput"/>.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MarkovEmissionsCollection.Item(Simphony.Mathematics.MarkovState,Simphony.Mathematics.MarkovOutput)">
            <summary>
            Gets a specific <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </summary>
            <param name="sourceState">
            The source <see cref="T:Simphony.Mathematics.MarkovState"/> of the <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <param name="targetOutput">
            The target <see cref="T:Simphony.Mathematics.MarkovOutput"/> of the <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <returns>
            The specified <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the source <see cref="T:Simphony.Mathematics.MarkovState"/> or the target
            <see cref="T:Simphony.Mathematics.MarkovOutput"/> is a null reference.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if a <see cref="T:Simphony.Mathematics.MarkovEmission"/> does not exist between the source
            <see cref="T:Simphony.Mathematics.MarkovState"/> and the target <see cref="T:Simphony.Mathematics.MarkovOutput"/>.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MarkovEmissionsCollection.Item(System.String,System.String)">
            <summary>
            Gets a specific <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </summary>
            <param name="sourceName">
            The name of the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <param name="targetName">
            The name of the target <see cref="T:Simphony.Mathematics.MarkovOutput"/> of the
            <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <returns>
            The specified <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either the source <see cref="T:Simphony.Mathematics.MarkovState"/> or the target
            <see cref="T:Simphony.Mathematics.MarkovOutput"/> does not exist.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if a <see cref="T:Simphony.Mathematics.MarkovEmission"/> does not exist between the source
            <see cref="T:Simphony.Mathematics.MarkovState"/> and the target <see cref="T:Simphony.Mathematics.MarkovOutput"/>.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.Add(System.Int32,System.Int32,System.Double)">
            <summary>
            Adds a new <see cref="T:Simphony.Mathematics.MarkovEmission"/> to the collection.
            </summary>
            <param name="sourceIndex">
            The zero-based index of the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the new
            <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <param name="targetIndex">
            The zero-based index of the target <see cref="T:Simphony.Mathematics.MarkovOutput"/> of the new
            <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <param name="probability">
            The emission probability.
            </param>
            <returns>
            The new <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified indices is invalid.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a <see cref="T:Simphony.Mathematics.MarkovEmission"/> between the source <see cref="T:Simphony.Mathematics.MarkovState"/>
            And the target <see cref="T:Simphony.Mathematics.MarkovOutput"/> already exists in the collection.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.Add(Simphony.Mathematics.MarkovState,Simphony.Mathematics.MarkovOutput,System.Double)">
            <summary>
            Adds a new <see cref="T:Simphony.Mathematics.MarkovEmission"/> to the collection.
            </summary>
            <param name="sourceState">
            The source <see cref="T:Simphony.Mathematics.MarkovState"/> of the new <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <param name="targetOutput">
            The target <see cref="T:Simphony.Mathematics.MarkovOutput"/> of the new <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <param name="probability">
            The emission probability.
            </param>
            <returns>
            The new <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the source <see cref="T:Simphony.Mathematics.MarkovState"/> or the target
            <see cref="T:Simphony.Mathematics.MarkovOutput"/> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if either the source <see cref="T:Simphony.Mathematics.MarkovState"/> or the target
            <see cref="T:Simphony.Mathematics.MarkovOutput"/> does not belong to the current Markov chain; or if a
            <see cref="T:Simphony.Mathematics.MarkovEmission"/> between the source <see cref="T:Simphony.Mathematics.MarkovState"/> and the target
            <see cref="T:Simphony.Mathematics.MarkovOutput"/> already exists in the collection.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.Add(System.String,System.String,System.Double)">
            <summary>
            Adds a new <see cref="T:Simphony.Mathematics.MarkovEmission"/> to the collection.
            </summary>
            <param name="sourceName">
            The name of the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the new
            <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <param name="targetName">
            The name of the target <see cref="T:Simphony.Mathematics.MarkovOutput"/> of the new
            <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <param name="probability">
            The emission probability.
            </param>
            <returns>
            The new <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either the source <see cref="T:Simphony.Mathematics.MarkovState"/> or the target
            <see cref="T:Simphony.Mathematics.MarkovOutput"/> does not exist.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a <see cref="T:Simphony.Mathematics.MarkovEmission"/> between the source <see cref="T:Simphony.Mathematics.MarkovState"/>
            And the target <see cref="T:Simphony.Mathematics.MarkovOutput"/> already exists in the collection.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.Clear">
            <summary>
            Removes every <see cref="T:Simphony.Mathematics.MarkovEmission"/> from the collection.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether the collection contains a specified <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </summary>
            <param name="sourceIndex">
            The zero-based index of the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <param name="targetIndex">
            The zero-based index of the target <see cref="T:Simphony.Mathematics.MarkovOutput"/> of the
            <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <returns>
            True if the specified <see cref="T:Simphony.Mathematics.MarkovEmission"/> exists in the collection; otherwise,
            false.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified indices is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.Contains(Simphony.Mathematics.MarkovState,Simphony.Mathematics.MarkovOutput)">
            <summary>
            Determines whether the collection contains a specified <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </summary>
            <param name="sourceState">
            The source <see cref="T:Simphony.Mathematics.MarkovState"/> of the <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <param name="targetOutput">
            The target <see cref="T:Simphony.Mathematics.MarkovOutput"/> of the <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <returns>
            True if the specified <see cref="T:Simphony.Mathematics.MarkovEmission"/> exists in the collection; otherwise,
            false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the source <see cref="T:Simphony.Mathematics.MarkovState"/> or the target
            <see cref="T:Simphony.Mathematics.MarkovOutput"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.Contains(System.String,System.String)">
            <summary>
            Determines whether the collection contains a specified <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </summary>
            <param name="sourceName">
            The name of the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <param name="targetName">
            The name of the target <see cref="T:Simphony.Mathematics.MarkovOutput"/> of the
            <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <returns>
            True if the specified <see cref="T:Simphony.Mathematics.MarkovEmission"/> exists in the collection; otherwise,
            false.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either the source <see cref="T:Simphony.Mathematics.MarkovState"/> or the target
            <see cref="T:Simphony.Mathematics.MarkovOutput"/> does not exist.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.Remove(System.Int32,System.Int32)">
            <summary>
            Removes a specified <see cref="T:Simphony.Mathematics.MarkovEmission"/> from the collection.
            </summary>
            <param name="sourceIndex">
            The zero-based index of the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovEmission"/> to remove.
            </param>
            <param name="targetIndex">
            The zero-based index of the target <see cref="T:Simphony.Mathematics.MarkovOutput"/> of the
            <see cref="T:Simphony.Mathematics.MarkovEmission"/> to remove.
            </param>
            <returns>
            True if a <see cref="T:Simphony.Mathematics.MarkovEmission"/> is successfully removed; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified indices is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.Remove(Simphony.Mathematics.MarkovEmission)">
            <summary>
            Removes a specified <see cref="T:Simphony.Mathematics.MarkovEmission"/> from the collection.
            </summary>
            <param name="emission">
            The <see cref="T:Simphony.Mathematics.MarkovEmission"/> to remove.
            </param>
            <returns>
            True if a <see cref="T:Simphony.Mathematics.MarkovEmission"/> is successfully removed; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Mathematics.MarkovEmission"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.Remove(Simphony.Mathematics.MarkovState,Simphony.Mathematics.MarkovOutput)">
            <summary>
            Removes a specified <see cref="T:Simphony.Mathematics.MarkovEmission"/> from the collection.
            </summary>
            <param name="sourceState">
            The source <see cref="T:Simphony.Mathematics.MarkovState"/> of the <see cref="T:Simphony.Mathematics.MarkovEmission"/> to remove.
            </param>
            <param name="targetOutput">
            The target <see cref="T:Simphony.Mathematics.MarkovOutput"/> of the <see cref="T:Simphony.Mathematics.MarkovEmission"/> to remove.
            </param>
            <returns>
            True if a <see cref="T:Simphony.Mathematics.MarkovEmission"/> is successfully removed; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the source <see cref="T:Simphony.Mathematics.MarkovState"/> or the target
            <see cref="T:Simphony.Mathematics.MarkovOutput"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.Remove(System.String,System.String)">
            <summary>
            Removes a specified <see cref="T:Simphony.Mathematics.MarkovEmission"/> from the collection.
            </summary>
            <param name="sourceName">
            The name of the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovEmission"/> to remove.
            </param>
            <param name="targetName">
            The name of the target <see cref="T:Simphony.Mathematics.MarkovOutput"/> of the
            <see cref="T:Simphony.Mathematics.MarkovEmission"/> to remove.
            </param>
            <returns>
            True if a <see cref="T:Simphony.Mathematics.MarkovEmission"/> is successfully removed; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either the source <see cref="T:Simphony.Mathematics.MarkovState"/> or the target
            <see cref="T:Simphony.Mathematics.MarkovOutput"/> does not exist.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.RemoveAll">
            <summary>
            Removes every <see cref="T:Simphony.Mathematics.MarkovEmission"/> from the collection.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.RemoveAll(Simphony.Mathematics.MarkovOutput)">
            <summary>
            Removes every <see cref="T:Simphony.Mathematics.MarkovEmission"/> associated with the specified
            <see cref="T:Simphony.Mathematics.MarkovOutput"/> from the collection.
            </summary>
            <param name="output">
            The <see cref="T:Simphony.Mathematics.MarkovOutput"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Mathematics.MarkovOutput"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.RemoveAll(Simphony.Mathematics.MarkovState)">
            <summary>
            Removes every <see cref="T:Simphony.Mathematics.MarkovEmission"/> associated with the specified
            <see cref="T:Simphony.Mathematics.MarkovState"/> from the collection.
            </summary>
            <param name="state">
            The <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Mathematics.MarkovState"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmissionsCollection.IndexOf(Simphony.Mathematics.MarkovState,Simphony.Mathematics.MarkovOutput)">
            <summary>
            Searches for a specified <see cref="T:Simphony.Mathematics.MarkovEmission"/> and returns its zero-based index
            in the collection.
            </summary>
            <param name="sourceState">
            The source <see cref="T:Simphony.Mathematics.MarkovState"/> of the <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <param name="targetOutput">
            The target <see cref="T:Simphony.Mathematics.MarkovOutput"/> of the <see cref="T:Simphony.Mathematics.MarkovEmission"/>.
            </param>
            <returns>
            The zero-based index of the <see cref="T:Simphony.Mathematics.MarkovEmission"/>, if found; otherwise -1.
            </returns>
        </member>
        <member name="T:Simphony.Mathematics.MarkovEmission">
            <summary>
            Represents a emission in a <see cref="T:Simphony.Mathematics.MarkovChain"/>.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovEmission.#ctor(Simphony.Mathematics.MarkovChain,Simphony.Mathematics.MarkovState,Simphony.Mathematics.MarkovOutput,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MarkovEmission"/> class.
            </summary>
            <param name="markovChain">
            The <see cref="T:Simphony.Mathematics.MarkovChain"/> the new emission will belong to.
            </param>
            <param name="sourceState">
            The source <see cref="T:Simphony.Mathematics.MarkovState"/> for the new emission.
            </param>
            <param name="targetOutput">
            The target <see cref="T:Simphony.Mathematics.MarkovOutput"/> for the new emission.
            </param>
            <param name="probability">
            The emission probability.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Mathematics.MarkovChain"/>, the specified source
            <see cref="T:Simphony.Mathematics.MarkovState"/>, or the specified target<see cref="T:Simphony.Mathematics.MarkovOutput"/> is a null
            reference.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MarkovEmission.LayoutPoints">
            <summary>
            Gets a list containing the layout points of the emission.
            </summary>
            <value>
            A list containing the layout points of the emission.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovEmission.Probability">
            <summary>
            Gets or sets the probability for the emission.
            </summary>
            <value>
            The probability for the emission.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovEmission.SourceState">
            <summary>
            Gets the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the emission.
            </summary>
            <value>
            The source <see cref="T:Simphony.Mathematics.MarkovState"/> of the emission.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovEmission.TargetOutput">
            <summary>
            Gets the target <see cref="T:Simphony.Mathematics.MarkovOutput"/> of the emission.
            </summary>
            <value>
            The target <see cref="T:Simphony.Mathematics.MarkovOutput"/> of the emission.
            </value>
        </member>
        <member name="T:Simphony.Mathematics.MarkovOutputsCollection">
            <summary>
            A custom collection for storing outputs in a <see cref="T:Simphony.Mathematics.MarkovChain"/>.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutputsCollection.#ctor(Simphony.Mathematics.MarkovChain)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MarkovOutputsCollection"/> class.
            </summary>
            <param name="markovChain">
            The <see cref="T:Simphony.Mathematics.MarkovChain"/> the new instance will be associated with.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Mathematics.MarkovChain"/> is a null reference.
            </exception>
        </member>
        <member name="E:Simphony.Mathematics.MarkovOutputsCollection.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.MarkovOutputsCollection.Count">
            <summary>
            Gets the number of <see cref="T:Simphony.Mathematics.MarkovOutput"/> objects in the collection.
            </summary>
            <value>
            The number of <see cref="T:Simphony.Mathematics.MarkovOutput"/> objects in the collection.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovOutputsCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Simphony.Mathematics.MarkovOutput"/> at a specified index.
            </summary>
            <param name="index">
            The zero-based index of the <see cref="T:Simphony.Mathematics.MarkovOutput"/> to get.
            </param>
            <returns>
            The <see cref="T:Simphony.Mathematics.MarkovOutput"/> at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MarkovOutputsCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Simphony.Mathematics.MarkovOutput"/> with a specified name.
            </summary>
            <param name="name">
            The name of the <see cref="T:Simphony.Mathematics.MarkovOutput"/> to get.
            </param>
            <returns>
            The <see cref="T:Simphony.Mathematics.MarkovOutput"/> with the specified name.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if a <see cref="T:Simphony.Mathematics.MarkovOutput"/> with the specified name does not exist in the
            collection.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutputsCollection.Add(System.String)">
            <summary>
            Adds a new <see cref="T:Simphony.Mathematics.MarkovOutput"/> to the collection.
            </summary>
            <param name="name">
            The name of the new <see cref="T:Simphony.Mathematics.MarkovOutput"/>.
            </param>
            <returns>
            The <see cref="T:Simphony.Mathematics.MarkovOutput"/> that was added to the collection.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a <see cref="T:Simphony.Mathematics.MarkovOutput"/> with the specified name already exists in the
            collection.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutputsCollection.Clear">
            <summary>
            Removes every <see cref="T:Simphony.Mathematics.MarkovOutput"/> from the collection.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutputsCollection.Contains(Simphony.Mathematics.MarkovOutput)">
            <summary>
            Determines whether the collection contains a specified <see cref="T:Simphony.Mathematics.MarkovOutput"/>.
            </summary>
            <param name="output">
            The <see cref="T:Simphony.Mathematics.MarkovOutput"/> to search for.
            </param>
            <returns>
            True if the specified <see cref="T:Simphony.Mathematics.MarkovOutput"/> exists in the collection; otherwise,
            false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutputsCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains a <see cref="T:Simphony.Mathematics.MarkovOutput"/> with a specified
            name.
            </summary>
            <param name="name">
            The name of the <see cref="T:Simphony.Mathematics.MarkovOutput"/> to search for.
            </param>
            <returns>
            True if a <see cref="T:Simphony.Mathematics.MarkovOutput"/> with the specified name exists in the collection;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutputsCollection.Find(System.String)">
            <summary>
            Searches the collection for a <see cref="T:Simphony.Mathematics.MarkovOutput"/> with a specified name.
            </summary>
            <param name="name">
            The name of the <see cref="T:Simphony.Mathematics.MarkovOutput"/> to search for.
            </param>
            <returns>
            The <see cref="T:Simphony.Mathematics.MarkovOutput"/> with the specified name, if found; otherwise a null
            reference.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutputsCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutputsCollection.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutputsCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutputsCollection.IndexOf(Simphony.Mathematics.MarkovOutput)">
            <summary>
            Searches for a specified <see cref="T:Simphony.Mathematics.MarkovOutput"/> and returns its zero-based index in
            the collection.
            </summary>
            <param name="output">
            The <see cref="T:Simphony.Mathematics.MarkovOutput"/> to search for.
            </param>
            <returns>
            The zero-based index of the <see cref="T:Simphony.Mathematics.MarkovOutput"/>, if found; otherwise -1.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutputsCollection.IndexOf(System.String)">
            <summary>
            Searches for a <see cref="T:Simphony.Mathematics.MarkovOutput"/> with the specified name and returns its
            zero-based index in the collection.
            </summary>
            <param name="name">
            The name of the <see cref="T:Simphony.Mathematics.MarkovOutput"/> to search for.
            </param>
            <returns>
            The zero-based index of the <see cref="T:Simphony.Mathematics.MarkovOutput"/>, if found; otherwise -1.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutputsCollection.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutputsCollection.Remove(Simphony.Mathematics.MarkovOutput)">
            <summary>
            Removes a specified <see cref="T:Simphony.Mathematics.MarkovOutput"/> from the collection.
            </summary>
            <param name="output">
            The <see cref="T:Simphony.Mathematics.MarkovOutput"/> to remove.
            </param>
            <returns>
            True if the specified <see cref="T:Simphony.Mathematics.MarkovOutput"/> was successfully removed from the
            collection; otherwise, false. This method returns false if the specified
            <see cref="T:Simphony.Mathematics.MarkovOutput"/> was not found in the collection.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutputsCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:Simphony.Mathematics.MarkovOutput"/> with a specified name from the collection.
            </summary>
            <param name="name">
            The name of the <see cref="T:Simphony.Mathematics.MarkovOutput"/> to remove.
            </param>
            <returns>
            True if a <see cref="T:Simphony.Mathematics.MarkovOutput"/> with the specified name was successfully removed
            from the collection; otherwise, false. This method returns false if a
            <see cref="T:Simphony.Mathematics.MarkovOutput"/> with the specified name is not found in the collection.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutputsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Simphony.Mathematics.MarkovOutput"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the <see cref="T:Simphony.Mathematics.MarkovOutput"/> to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutputsCollection.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.MarkovOutput">
            <summary>
            Represents an output in a <see cref="P:Simphony.Mathematics.MarkovOutput.MarkovChain"/>.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutput.#ctor(Simphony.Mathematics.MarkovChain,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MarkovOutput"/> class.
            </summary>
            <param name="markovChain">
            The <see cref="P:Simphony.Mathematics.MarkovOutput.MarkovChain"/> the new output will belong to.
            </param>
            <param name="name">
            The name of the new output.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="P:Simphony.Mathematics.MarkovOutput.MarkovChain"/> or the specified name is a null
            reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MarkovOutput.Index">
            <summary>
            Gets the zero-based index of the output.
            </summary>
            <value>
            The zero-based index of the output.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovOutput.Location">
            <summary>
            Gets or sets the location of the output when displayed in the editor.
            </summary>
            <value>
            The location of the output when displayed in the editor.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovOutput.Name">
            <summary>
            Gets or sets the name of the output.
            </summary>
            <value>
            The name of the output.
            </value>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the property is set to a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the property is set to an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the property is set to the name of an existing output.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MarkovOutput.MarkovChain">
            <summary>
            Gets the <see cref="P:Simphony.Mathematics.MarkovOutput.MarkovChain"/> the output belongs to.
            </summary>
            <value>
            The <see cref="P:Simphony.Mathematics.MarkovOutput.MarkovChain"/> the output belongs to.
            </value>
        </member>
        <member name="M:Simphony.Mathematics.MarkovOutput.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.MarkovChain">
            <summary>
            Represents a Markov chain.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.MarkovChain.ProbabilityTolerance">
            <summary>
            A constant that specifies how close to 1 the sum of the initial or transition
            probabilities need to be to be considered valid.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MarkovChain"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MarkovChain"/> class.
            </summary>
            <param name="stateCount">
            The number of states in the new Markov chain.
            </param>
            <param name="outputCount">
            The number of outputs in the new Markov chain.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of states is less than one; or if the specified number of
            outputs is less than zero.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MarkovChain.CurrentOutput">
            <summary>
            Gets the current output of the Markov chain.
            </summary>
            <value>
            The current output of the Markov chain or a null reference if the Markov chain is in an
            indeterminate state.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovChain.CurrentState">
            <summary>
            Gets the current state of the Markov chain.
            </summary>
            <value>
            The current state of the Markov chain or a null reference if the Markov chain is in an
            indeterminate state.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovChain.Emissions">
            <summary>
            Gets the emissions of the Markov chain.
            </summary>
            <value>
            A <see cref="T:Simphony.Mathematics.MarkovEmissionsCollection"/> containing the Emissions.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovChain.Outputs">
            <summary>
            Gets the outputs of the Markov chain.
            </summary>
            <value>
            A <see cref="T:Simphony.Mathematics.MarkovOutputsCollection"/> containing the outputs.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovChain.States">
            <summary>
            Gets the states of the Markov chain.
            </summary>
            <value>
            A <see cref="T:Simphony.Mathematics.MarkovStatesCollection"/> containing the states.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovChain.Transitions">
            <summary>
            Gets the transitions of the Markov chain.
            </summary>
            <value>
            A <see cref="T:Simphony.Mathematics.MarkovTransitionsCollection"/> containing the transitions.
            </value>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.BaumWelch(System.Int32[],System.Int32,System.Double)">
            <summary>
            Runs the Baum-Welch learning algorithm for hidden Markov models.
            </summary>
            <param name="observations">
            An array containing a sequence of observations to be used to train the model.
            </param>
            <param name="iterations">
            The maximum number of iterations to be performed by the learning algorithm. If
            specified as zero, the algorithm will learn until convergence of the model average
            likelihood respecting the desired limit.
            </param>
            <param name="tolerance">
            The likelihood convergence limit L between two iterations of the algorithm. The
            algorithm will stop when the change in the likelihood for two consecutive iterations
            has not changed by more than L percent of the likelihood. If left as zero, the
            algorithm will ignore this parameter and iterates over a number of fixed iterations
            specified by the previous parameter.
            </param>
            <returns>
            The average log-likelihood for the observations after the model has been trained.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of observations is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either the specified maximum number of iterations or the specified tolerance is
            negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array of observations is empty; if the specified array of
            observations contains an invalid observation; or if the specified maximum number of
            iterations and the specified tolerance are both zero.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.BaumWelch(System.Int32[][],System.Int32,System.Double)">
            <summary>
            Runs the Baum-Welch learning algorithm for hidden Markov models.
            </summary>
            <param name="observations">
            An array containing sequences of observations to be used to train the model.
            </param>
            <param name="iterations">
            The maximum number of iterations to be performed by the learning algorithm. If
            specified as zero, the algorithm will learn until convergence of the model average
            likelihood respecting the desired limit.
            </param>
            <param name="tolerance">
            The likelihood convergence limit L between two iterations of the algorithm. The
            algorithm will stop when the change in the likelihood for two consecutive iterations
            has not changed by more than L percent of the likelihood. If left as zero, the
            algorithm will ignore this parameter and iterates over a number of fixed iterations
            specified by the previous parameter.
            </param>
            <returns>
            The average log-likelihood for the observations after the model has been trained.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of observation sequences is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either the specified maximum number of iterations or the specified tolerance is
            negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array of observation sequences is empty; if the specified array
            of observation sequences contains an invalid observation; or if the specified maximum
            number of iterations and the specified tolerance are both zero.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.BaumWelch(System.String[],System.Int32,System.Double)">
            <summary>
            Runs the Baum-Welch learning algorithm for hidden Markov models.
            </summary>
            <param name="observations">
            An array containing a sequence of observations to be used to train the model.
            </param>
            <param name="iterations">
            The maximum number of iterations to be performed by the learning algorithm. If
            specified as zero, the algorithm will learn until convergence of the model average
            likelihood respecting the desired limit.
            </param>
            <param name="tolerance">
            The likelihood convergence limit L between two iterations of the algorithm. The
            algorithm will stop when the change in the likelihood for two consecutive iterations
            has not changed by more than L percent of the likelihood. If left as zero, the
            algorithm will ignore this parameter and iterates over a number of fixed iterations
            specified by the previous parameter.
            </param>
            <returns>
            The average log-likelihood for the observations after the model has been trained.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of observations is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either the specified maximum number of iterations or the specified tolerance is
            negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array of observations is empty; if the specified array of
            observations contains an invalid observation; or if the specified maximum number of
            iterations and the specified tolerance are both zero.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.BaumWelch(System.String[][],System.Int32,System.Double)">
            <summary>
            Runs the Baum-Welch learning algorithm for hidden Markov models.
            </summary>
            <param name="observations">
            An array containing sequences of observations to be used to train the model.
            </param>
            <param name="iterations">
            The maximum number of iterations to be performed by the learning algorithm. If
            specified as zero, the algorithm will learn until convergence of the model average
            likelihood respecting the desired limit.
            </param>
            <param name="tolerance">
            The likelihood convergence limit L between two iterations of the algorithm. The
            algorithm will stop when the change in the likelihood for two consecutive iterations
            has not changed by more than L percent of the likelihood. If left as zero, the
            algorithm will ignore this parameter and iterates over a number of fixed iterations
            specified by the previous parameter.
            </param>
            <returns>
            The average log-likelihood for the observations after the model has been trained.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of observation sequences is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either the specified maximum number of iterations or the specified tolerance is
            negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array of observation sequences is empty; if the specified array
            of observation sequences contains an invalid observation; or if the specified maximum
            number of iterations and the specified tolerance are both zero.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.Clone">
            <summary>
            Creates a copy of the current <see cref="T:Simphony.Mathematics.MarkovChain"/>.
            </summary>
            <returns>
            A copy of the current <see cref="T:Simphony.Mathematics.MarkovChain"/>.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.CopyFrom(Simphony.Mathematics.MarkovChain)">
            <summary>
            Copies the configuration of the specified <see cref="T:Simphony.Mathematics.MarkovChain"/> into the current
            <see cref="T:Simphony.Mathematics.MarkovChain"/> instance.
            </summary>
            <param name="markovChain">
            The <see cref="T:Simphony.Mathematics.MarkovChain"/> to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Mathematics.MarkovChain"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.ExceptionIfEmissionProbabilitiesInvalid">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the emission probabilities are
            invalid.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.ExceptionIfInitialProbabilitiesInvalid">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the initial probabilities are
            invalid.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.ExceptionIfTransitionProbabilitiesInvalid">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the transition probabilities are
            invalid.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.GetEmissionMatrix">
            <summary>
            Gets a matrix representing the emission probabilities.
            </summary>
            <returns>
            A matrix representing the emission probabilities.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.GetProbabilitiesVector">
            <summary>
            Gets a vector representing the initial state probabilities.
            </summary>
            <returns>
            A vector representing the initial state probabilities.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.GetTransitionMatrix">
            <summary>
            Gets a matrix representing the transition probabilities.
            </summary>
            <returns>
            A matrix representing the transition probabilities.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.GetTransitionProbability(System.Int32,System.Int32)">
            <summary>
            Gets the probability of transitioning from one <see cref="T:Simphony.Mathematics.MarkovState"/> to another.
            </summary>
            <param name="sourceIndex">
            The zero-based index of the source <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </param>
            <param name="targetIndex">
            The zero-based index of the target <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </param>
            <returns>
            The probability of transitioning from the source <see cref="T:Simphony.Mathematics.MarkovState"/> to the target
            <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified indices is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.Initialize">
            <summary>
            Initializes the Markov chain.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the sum of the initial probabilities is unequal to one or if the emission
            probabilities are invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.Initialize(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes the Markov chain.
            </summary>
            <param name="probabilities">
            The a sequence containing the initial probability vector.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the length of the specified sequence is not equal to the number of states.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the emission probabilities are invalid or if the sum of the specified
            probabilities is unequal to one.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.Initialize(System.Double[])">
            <summary>
            Initializes the Markov chain.
            </summary>
            <param name="probabilities">
            The an array containing the initial probability vector.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the length of the specified array is not equal to the number of states.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the emission probabilities are invalid or if the sum of the specified
            probabilities is unequal to one.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.SetProbabilitiesVector(Simphony.Mathematics.Vector)">
            <summary>
            Sets the initial state probabilities using a vector representation.
            </summary>
            <param name="value">
            The vector representing the initial state probabilities.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the dimension of the vector does not match the number of states; or if the sum
            of the vector's entries is unequal one.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.Transition">
            <summary>
            Performs a state transition.
            </summary>
            <returns>
            The new state of the Markov chain.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the Markov chain is currently in an indeterminate state, if the transition
            probabilities are invalid, or if the emission probabilities are invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.ValidateEmissionProbabilities">
            <summary>
            Returns a value indicating whether the emission probabilities are valid.
            </summary>
            <returns>
            A null reference if the emission probabilities are valid; otherwise a message describing
            why they are invalid.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.ValidateInitialProbabilities">
            <summary>
            Returns a value indicating whether the initial probabilities are valid.
            </summary>
            <returns>
            A null reference if the initial probabilities are valid; otherwise a message describing
            why they are invalid.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.ValidateTransitionProbabilities">
            <summary>
            Returns a value indicating whether the transition probabilities are valid.
            </summary>
            <returns>
            A null reference if the transition probabilities are valid; otherwise a message
            describing why they are invalid.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.GetEmissionProbability(System.Int32,System.Int32)">
            <summary>
            Gets the probability of emitting a <see cref="T:Simphony.Mathematics.MarkovOutput"/> from a
            <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </summary>
            <param name="sourceIndex">
            The zero-based index of the source <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </param>
            <param name="targetIndex">
            The zero-based index of the target <see cref="T:Simphony.Mathematics.MarkovOutput"/>.
            </param>
            <returns>
            The probability of emitting the target <see cref="T:Simphony.Mathematics.MarkovOutput"/> from the source
            <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified indices is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.SetEmissionProbability(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the probability of emitting a <see cref="T:Simphony.Mathematics.MarkovOutput"/> from a
            <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </summary>
            <param name="sourceIndex">
            The zero-based index of the source <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </param>
            <param name="targetIndex">
            The zero-based index of the target <see cref="T:Simphony.Mathematics.MarkovOutput"/>.
            </param>
            <param name="value">
            The probability of emitting the target <see cref="T:Simphony.Mathematics.MarkovOutput"/> from the source
            <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified indices is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.SetTransitionProbability(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the probability of transitioning from one <see cref="T:Simphony.Mathematics.MarkovState"/> to another.
            </summary>
            <param name="sourceIndex">
            The zero-based index of the source <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </param>
            <param name="targetIndex">
            The zero-based index of the target <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </param>
            <param name="value">
            The probability of transitioning from the source <see cref="T:Simphony.Mathematics.MarkovState"/> to the target
            <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified indices is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.BaumWelchBackwardPass(System.Int32[],System.Double[0:,0:],System.Double[0:,0:],System.Double[],System.Double[])">
            <summary>
            Performs the backward-pass calculation of the Baum-Welch algorithm.
            </summary>
            <param name="observations">
            The sequence of observations for which the calculation is to be made.
            </param>
            <param name="a">
            A two-dimensional array representing the transition matrix.
            </param>
            <param name="b">
            A two-dimensional array representing the emission matrix.
            </param>
            <param name="pi">
            A one-dimensional array representing the initial state probabilities.
            </param>
            <param name="c">
            A one-dimensional array containing the scaling factors generated by the forward-pass
            calculation.
            </param>
            <returns>
            A two-dimensional array containing the backward variables.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if one or more of the input arrays is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if one or more of the input arrays is empty or degenerate.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.BaumWelchConvergenceCheck(System.Double,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Checks if a model has converged given the likelihoods between two iterations of the
            Baum-Welch algorithm and a criteria for convergence.
            </summary>
            <param name="oldLikelihood">
            The likelihood for the previous iteration.
            </param>
            <param name="newLikelihood">
            The likelihood for the current iteration.
            </param>
            <param name="currentIteration">
            The current iteration number.
            </param>
            <param name="iterations">
            The (user-specified) maximum number of iterations.
            </param>
            <param name="tolerance">
            The (user-specified) tolerance.
            </param>
            <returns>
            True if the algorithm should terminate; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.BaumWelchForwardPass(System.Int32[],System.Double[0:,0:],System.Double[0:,0:],System.Double[],System.Double[]@)">
            <summary>
            Performs the forward-pass calculation of the Baum-Welch algorithm.
            </summary>
            <param name="observations">
            The sequence of observations for which the calculation is to be made.
            </param>
            <param name="a">
            A two-dimensional array representing the transition matrix.
            </param>
            <param name="b">
            A two-dimensional array representing the emission matrix.
            </param>
            <param name="pi">
            A one-dimensional array representing the initial state probabilities.
            </param>
            <param name="c">
            When the method exits, a one-dimensional array containing the scaling factors.
            </param>
            <returns>
            A two-dimensional array containing the forward variables.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if one or more of the input arrays is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if one or more of the input arrays is empty or degenerate.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovChain.SampleIndex(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Randomly samples an index from a sequence of probabilities.
            </summary>
            <param name="probabilities">
            A sequence of probabilities.
            </param>
            <returns>
            The randomly determined zero-based index..
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.Mathematics.MarkovState">
            <summary>
            Represents a state in a <see cref="T:Simphony.Mathematics.MarkovChain"/>.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovState.#ctor(Simphony.Mathematics.MarkovChain,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MarkovState"/> class.
            </summary>
            <param name="markovChain">
            The <see cref="F:Simphony.Mathematics.MarkovState.markovChain"/> the new state will belong to.
            </param>
            <param name="name">
            The name of the new state.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="F:Simphony.Mathematics.MarkovState.markovChain"/> or the specified name is a null
            reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MarkovState.Index">
            <summary>
            Gets the zero-based index of the state.
            </summary>
            <value>
            The zero-based index of the state.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovState.InitialProbability">
            <summary>
            Gets or sets the initial probability of the state.
            </summary>
            <value>
            The initial probability of the state.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovState.Location">
            <summary>
            Gets or sets the location of the state when displayed in the editor.
            </summary>
            <value>
            The location of the state when displayed in the editor.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovState.Name">
            <summary>
            Gets or sets the name of the state.
            </summary>
            <value>
            The name of the state.
            </value>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the property is set to a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the property is set to an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the property is set to the name of an existing state.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MarkovState.TransitionsFrom">
            <summary>
            Gets a sequence containing all the transitions from this state.
            </summary>
            <value>
            A sequence of <see cref="T:Simphony.Mathematics.MarkovTransition"/> objects representing all the transitions
            from this state.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovState.TransitionsTo">
            <summary>
            Gets a sequence containing all the transitions to this state.
            </summary>
            <value>
            A sequence of <see cref="T:Simphony.Mathematics.MarkovTransition"/> objects representing all the transitions
            to this state.
            </value>
        </member>
        <member name="M:Simphony.Mathematics.MarkovState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.MarkovStatesCollection">
            <summary>
            A custom collection for storing states in a <see cref="T:Simphony.Mathematics.MarkovChain"/>.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovStatesCollection.#ctor(Simphony.Mathematics.MarkovChain)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MarkovStatesCollection"/> class.
            </summary>
            <param name="markovChain">
            The <see cref="T:Simphony.Mathematics.MarkovChain"/> the new instance will be associated with.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Mathematics.MarkovChain"/> is a null reference.
            </exception>
        </member>
        <member name="E:Simphony.Mathematics.MarkovStatesCollection.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.MarkovStatesCollection.Count">
            <summary>
            Gets the number of <see cref="T:Simphony.Mathematics.MarkovState"/> objects in the collection.
            </summary>
            <value>
            The number of <see cref="T:Simphony.Mathematics.MarkovState"/> objects in the collection.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovStatesCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Simphony.Mathematics.MarkovState"/> at a specified index.
            </summary>
            <param name="index">
            The zero-based index of the <see cref="T:Simphony.Mathematics.MarkovState"/> to get.
            </param>
            <returns>
            The <see cref="T:Simphony.Mathematics.MarkovState"/> at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MarkovStatesCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Simphony.Mathematics.MarkovState"/> with a specified name.
            </summary>
            <param name="name">
            The name of the <see cref="T:Simphony.Mathematics.MarkovState"/> to get.
            </param>
            <returns>
            The <see cref="T:Simphony.Mathematics.MarkovState"/> with the specified name.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if a <see cref="T:Simphony.Mathematics.MarkovState"/> with the specified name does not exist in the
            collection.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovStatesCollection.Add(System.String)">
            <summary>
            Adds a new <see cref="T:Simphony.Mathematics.MarkovState"/> to the collection.
            </summary>
            <param name="name">
            The name of the new <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </param>
            <returns>
            The <see cref="T:Simphony.Mathematics.MarkovState"/> that was added to the collection.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a <see cref="T:Simphony.Mathematics.MarkovState"/> with the specified name already exists in the
            collection.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovStatesCollection.Clear">
            <summary>
            Removes every <see cref="T:Simphony.Mathematics.MarkovState"/> from the collection.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovStatesCollection.Contains(Simphony.Mathematics.MarkovState)">
            <summary>
            Determines whether the collection contains a specified <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </summary>
            <param name="state">
            The <see cref="T:Simphony.Mathematics.MarkovState"/> to search for.
            </param>
            <returns>
            True if the specified <see cref="T:Simphony.Mathematics.MarkovState"/> exists in the collection; otherwise,
            false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovStatesCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains a <see cref="T:Simphony.Mathematics.MarkovState"/> with a specified
            name.
            </summary>
            <param name="name">
            The name of the <see cref="T:Simphony.Mathematics.MarkovState"/> to search for.
            </param>
            <returns>
            True if a <see cref="T:Simphony.Mathematics.MarkovState"/> with the specified name exists in the collection;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovStatesCollection.Find(System.String)">
            <summary>
            Searches the collection for a <see cref="T:Simphony.Mathematics.MarkovState"/> with a specified name.
            </summary>
            <param name="name">
            The name of the <see cref="T:Simphony.Mathematics.MarkovState"/> to search for.
            </param>
            <returns>
            The <see cref="T:Simphony.Mathematics.MarkovState"/> with the specified name, if found; otherwise a null
            reference.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovStatesCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovStatesCollection.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovStatesCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovStatesCollection.IndexOf(Simphony.Mathematics.MarkovState)">
            <summary>
            Searches for a specified <see cref="T:Simphony.Mathematics.MarkovState"/> and returns its zero-based index in
            the collection.
            </summary>
            <param name="state">
            The <see cref="T:Simphony.Mathematics.MarkovState"/> to search for.
            </param>
            <returns>
            The zero-based index of the <see cref="T:Simphony.Mathematics.MarkovState"/>, if found; otherwise -1.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovStatesCollection.IndexOf(System.String)">
            <summary>
            Searches for a <see cref="T:Simphony.Mathematics.MarkovState"/> with the specified name and returns its
            zero-based index in the collection.
            </summary>
            <param name="name">
            The name of the <see cref="T:Simphony.Mathematics.MarkovState"/> to search for.
            </param>
            <returns>
            The zero-based index of the <see cref="T:Simphony.Mathematics.MarkovState"/>, if found; otherwise -1.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovStatesCollection.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovStatesCollection.Remove(Simphony.Mathematics.MarkovState)">
            <summary>
            Removes a specified <see cref="T:Simphony.Mathematics.MarkovState"/> from the collection.
            </summary>
            <param name="state">
            The <see cref="T:Simphony.Mathematics.MarkovState"/> to remove.
            </param>
            <returns>
            True if the specified <see cref="T:Simphony.Mathematics.MarkovState"/> was successfully removed from the
            collection; otherwise, false. This method returns false if the specified
            <see cref="T:Simphony.Mathematics.MarkovState"/> was not found in the collection.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovStatesCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:Simphony.Mathematics.MarkovState"/> with a specified name from the collection.
            </summary>
            <param name="name">
            The name of the <see cref="T:Simphony.Mathematics.MarkovState"/> to remove.
            </param>
            <returns>
            True if a <see cref="T:Simphony.Mathematics.MarkovState"/> with the specified name was successfully removed
            from the collection; otherwise, false. This method returns false if a
            <see cref="T:Simphony.Mathematics.MarkovState"/> with the specified name is not found in the collection.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.MarkovStatesCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Simphony.Mathematics.MarkovState"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the <see cref="T:Simphony.Mathematics.MarkovState"/> to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovStatesCollection.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.MarkovTransition">
            <summary>
            Represents a transition in a <see cref="T:Simphony.Mathematics.MarkovChain"/>.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransition.#ctor(Simphony.Mathematics.MarkovChain,Simphony.Mathematics.MarkovState,Simphony.Mathematics.MarkovState,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MarkovTransition"/> class.
            </summary>
            <param name="markovChain">
            The <see cref="T:Simphony.Mathematics.MarkovChain"/> the new transition will belong to.
            </param>
            <param name="sourceState">
            The source <see cref="T:Simphony.Mathematics.MarkovState"/> for the new transition.
            </param>
            <param name="targetState">
            The target <see cref="T:Simphony.Mathematics.MarkovState"/> for the new transition.
            </param>
            <param name="probability">
            The transition probability.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the <see cref="T:Simphony.Mathematics.MarkovChain"/> or either of the source or target
            <see cref="T:Simphony.Mathematics.MarkovState"/> is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MarkovTransition.LayoutPoints">
            <summary>
            Gets a list containing the layout points of the transition.
            </summary>
            <value>
            A list containing the layout points of the transition.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovTransition.Probability">
            <summary>
            Gets or sets the probability for the transition.
            </summary>
            <value>
            The probability for the transition.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovTransition.SourceState">
            <summary>
            Gets the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the transition.
            </summary>
            <value>
            The source <see cref="T:Simphony.Mathematics.MarkovState"/> of the transition.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovTransition.TargetState">
            <summary>
            Gets the target <see cref="T:Simphony.Mathematics.MarkovState"/> of the transition.
            </summary>
            <value>
            The target <see cref="T:Simphony.Mathematics.MarkovState"/> of the transition.
            </value>
        </member>
        <member name="T:Simphony.Mathematics.MarkovTransitionsCollection">
            <summary>
            A custom collection for storing transitions in a <see cref="T:Simphony.Mathematics.MarkovChain"/>.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.#ctor(Simphony.Mathematics.MarkovChain)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MarkovTransitionsCollection"/> class.
            </summary>
            <param name="markovChain">
            The <see cref="T:Simphony.Mathematics.MarkovChain"/> the new instance will be associated with.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Mathematics.MarkovChain"/> is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MarkovTransitionsCollection.Count">
            <summary>
            Gets the number of <see cref="T:Simphony.Mathematics.MarkovTransition"/> objects in the collection.
            </summary>
            <value>
            The number of <see cref="T:Simphony.Mathematics.MarkovTransition"/> objects in the collection.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MarkovTransitionsCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </summary>
            <param name="sourceIndex">
            The zero-based index of the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <param name="targetIndex">
            The zero-based index of the target <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <returns>
            The specified <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified indices is invalid.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if a <see cref="T:Simphony.Mathematics.MarkovTransition"/> does not exist between the source
            <see cref="T:Simphony.Mathematics.MarkovState"/> and the target <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MarkovTransitionsCollection.Item(Simphony.Mathematics.MarkovState,Simphony.Mathematics.MarkovState)">
            <summary>
            Gets a specific <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </summary>
            <param name="sourceState">
            The source <see cref="T:Simphony.Mathematics.MarkovState"/> of the <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <param name="targetState">
            The target <see cref="T:Simphony.Mathematics.MarkovState"/> of the <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <returns>
            The specified <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the source or the target <see cref="T:Simphony.Mathematics.MarkovState"/> is a null reference.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if a <see cref="T:Simphony.Mathematics.MarkovTransition"/> does not exist between the source
            <see cref="T:Simphony.Mathematics.MarkovState"/> and the target <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.MarkovTransitionsCollection.Item(System.String,System.String)">
            <summary>
            Gets a specific <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </summary>
            <param name="sourceName">
            The name of the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <param name="targetName">
            The name of the target <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <returns>
            The specified <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either the source <see cref="T:Simphony.Mathematics.MarkovState"/> or the target
            <see cref="T:Simphony.Mathematics.MarkovState"/> does not exist.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if a <see cref="T:Simphony.Mathematics.MarkovTransition"/> does not exist between the source
            <see cref="T:Simphony.Mathematics.MarkovState"/> and the target <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.Add(System.Int32,System.Int32,System.Double)">
            <summary>
            Adds a new <see cref="T:Simphony.Mathematics.MarkovTransition"/> to the collection.
            </summary>
            <param name="sourceIndex">
            The zero-based index of the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the new
            <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <param name="targetIndex">
            The zero-based index of the target <see cref="T:Simphony.Mathematics.MarkovState"/> of the new
            <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <param name="probability">
            The transition probability.
            </param>
            <returns>
            The new <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified indices is invalid.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a <see cref="T:Simphony.Mathematics.MarkovTransition"/> between the source <see cref="T:Simphony.Mathematics.MarkovState"/>
            And the target <see cref="T:Simphony.Mathematics.MarkovState"/> already exists in the collection.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.Add(Simphony.Mathematics.MarkovState,Simphony.Mathematics.MarkovState,System.Double)">
            <summary>
            Adds a new <see cref="T:Simphony.Mathematics.MarkovTransition"/> to the collection.
            </summary>
            <param name="sourceState">
            The source <see cref="T:Simphony.Mathematics.MarkovState"/> of the new <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <param name="targetState">
            The target <see cref="T:Simphony.Mathematics.MarkovState"/> of the new <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <param name="probability">
            The transition probability.
            </param>
            <returns>
            The new <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the source <see cref="T:Simphony.Mathematics.MarkovState"/> or the target
            <see cref="T:Simphony.Mathematics.MarkovState"/> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if either the source <see cref="T:Simphony.Mathematics.MarkovState"/> or the target
            <see cref="T:Simphony.Mathematics.MarkovState"/> does not belong to the current Markov chain; or if a
            <see cref="T:Simphony.Mathematics.MarkovTransition"/> between the source <see cref="T:Simphony.Mathematics.MarkovState"/> and the
            target <see cref="T:Simphony.Mathematics.MarkovState"/> already exists in the collection.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.Add(System.String,System.String,System.Double)">
            <summary>
            Adds a new <see cref="T:Simphony.Mathematics.MarkovTransition"/> to the collection.
            </summary>
            <param name="sourceName">
            The name of the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the new
            <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <param name="targetName">
            The name of the target <see cref="T:Simphony.Mathematics.MarkovState"/> of the new
            <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <param name="probability">
            The transition probability.
            </param>
            <returns>
            The new <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either the source <see cref="T:Simphony.Mathematics.MarkovState"/> or the target
            <see cref="T:Simphony.Mathematics.MarkovState"/> does not exist.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a <see cref="T:Simphony.Mathematics.MarkovTransition"/> between the source <see cref="T:Simphony.Mathematics.MarkovState"/>
            And the target <see cref="T:Simphony.Mathematics.MarkovState"/> already exists in the collection.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.Clear">
            <summary>
            Removes every <see cref="T:Simphony.Mathematics.MarkovTransition"/> from the collection.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether the collection contains a specified <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </summary>
            <param name="sourceIndex">
            The zero-based index of the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <param name="targetIndex">
            The zero-based index of the target <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <returns>
            True if the specified <see cref="T:Simphony.Mathematics.MarkovTransition"/> exists in the collection; otherwise,
            false.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified indices is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.Contains(Simphony.Mathematics.MarkovState,Simphony.Mathematics.MarkovState)">
            <summary>
            Determines whether the collection contains a specified <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </summary>
            <param name="sourceState">
            The source <see cref="T:Simphony.Mathematics.MarkovState"/> of the <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <param name="targetState">
            The target <see cref="T:Simphony.Mathematics.MarkovState"/> of the <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <returns>
            True if the specified <see cref="T:Simphony.Mathematics.MarkovTransition"/> exists in the collection; otherwise,
            false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the source or the target <see cref="T:Simphony.Mathematics.MarkovState"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.Contains(System.String,System.String)">
            <summary>
            Determines whether the collection contains a specified <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </summary>
            <param name="sourceName">
            The name of the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <param name="targetName">
            The name of the target <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <returns>
            True if the specified <see cref="T:Simphony.Mathematics.MarkovTransition"/> exists in the collection; otherwise,
            false.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either the source <see cref="T:Simphony.Mathematics.MarkovState"/> or the target
            <see cref="T:Simphony.Mathematics.MarkovState"/> does not exist.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.Remove(System.Int32,System.Int32)">
            <summary>
            Removes a specified <see cref="T:Simphony.Mathematics.MarkovTransition"/> from the collection.
            </summary>
            <param name="sourceIndex">
            The zero-based index of the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovTransition"/> to remove.
            </param>
            <param name="targetIndex">
            The zero-based index of the target <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovTransition"/> to remove.
            </param>
            <returns>
            True if a <see cref="T:Simphony.Mathematics.MarkovTransition"/> is successfully removed; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified indices is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.Remove(Simphony.Mathematics.MarkovState,Simphony.Mathematics.MarkovState)">
            <summary>
            Removes a specified <see cref="T:Simphony.Mathematics.MarkovTransition"/> from the collection.
            </summary>
            <param name="sourceState">
            The source <see cref="T:Simphony.Mathematics.MarkovState"/> of the <see cref="T:Simphony.Mathematics.MarkovTransition"/> to remove.
            </param>
            <param name="targetState">
            The target <see cref="T:Simphony.Mathematics.MarkovState"/> of the <see cref="T:Simphony.Mathematics.MarkovTransition"/> to remove.
            </param>
            <returns>
            True if a <see cref="T:Simphony.Mathematics.MarkovTransition"/> is successfully removed; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the source or the target <see cref="T:Simphony.Mathematics.MarkovState"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.Remove(Simphony.Mathematics.MarkovTransition)">
            <summary>
            Removes a specified <see cref="T:Simphony.Mathematics.MarkovTransition"/> from the collection.
            </summary>
            <param name="transition">
            The <see cref="T:Simphony.Mathematics.MarkovTransition"/> to remove.
            </param>
            <returns>
            True if a <see cref="T:Simphony.Mathematics.MarkovTransition"/> is successfully removed; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Mathematics.MarkovTransition"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.Remove(System.String,System.String)">
            <summary>
            Removes a specified <see cref="T:Simphony.Mathematics.MarkovTransition"/> from the collection.
            </summary>
            <param name="sourceName">
            The name of the source <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovTransition"/> to remove.
            </param>
            <param name="targetName">
            The name of the target <see cref="T:Simphony.Mathematics.MarkovState"/> of the
            <see cref="T:Simphony.Mathematics.MarkovTransition"/> to remove.
            </param>
            <returns>
            True if a <see cref="T:Simphony.Mathematics.MarkovTransition"/> is successfully removed; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either the source <see cref="T:Simphony.Mathematics.MarkovState"/> or the target
            <see cref="T:Simphony.Mathematics.MarkovState"/> does not exist.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.RemoveAll">
            <summary>
            Removes every <see cref="T:Simphony.Mathematics.MarkovTransition"/> from the collection.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.RemoveAll(Simphony.Mathematics.MarkovState)">
            <summary>
            Removes every <see cref="T:Simphony.Mathematics.MarkovTransition"/> associated with the specified
            <see cref="T:Simphony.Mathematics.MarkovState"/> from the collection.
            </summary>
            <param name="state">
            The <see cref="T:Simphony.Mathematics.MarkovState"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Mathematics.MarkovState"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.MarkovTransitionsCollection.IndexOf(Simphony.Mathematics.MarkovState,Simphony.Mathematics.MarkovState)">
            <summary>
            Searches for a specified <see cref="T:Simphony.Mathematics.MarkovTransition"/> and returns its zero-based index
            in the collection.
            </summary>
            <param name="sourceState">
            The source <see cref="T:Simphony.Mathematics.MarkovState"/> of the <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <param name="targetState">
            The target <see cref="T:Simphony.Mathematics.MarkovState"/> of the <see cref="T:Simphony.Mathematics.MarkovTransition"/>.
            </param>
            <returns>
            The zero-based index of the <see cref="T:Simphony.Mathematics.MarkovTransition"/>, if found; otherwise -1.
            </returns>
        </member>
        <member name="T:Simphony.Mathematics.BoundedDistribution">
            <summary>
            Abstract base class for bounded probability distributions.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.BoundedDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.BoundedDistribution"/> class with a lower
            bound of 0 and an upper bound of 1.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.BoundedDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.BoundedDistribution"/> class.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.BoundedDistribution.High">
            <summary>
            Gets or sets the upper bound of the distribution.
            </summary>
            <value>
            The upper bound of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.BoundedDistribution.Low">
            <summary>
            Gets or sets the lower bound of the distribution.
            </summary>
            <value>
            The lower bound of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.BoundedDistribution.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.BoundedDistribution.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.BoundedDistribution.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.BoundedDistribution.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.BoundedDistribution.Range">
            <summary>
            Gets the range of the distribution.
            </summary>
            <value>
            The range of the distribution.
            </value>
        </member>
        <member name="M:Simphony.Mathematics.BoundedDistribution.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.BoundedDistribution.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.Empirical">
            <summary>
            Represents an empirical distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Empirical.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Empirical"/> class with default parameter values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Empirical.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Empirical"/> class.
            </summary>
            <param name="observations">
            A sequence containing the observed values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence of observations is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Empirical.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Empirical.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Empirical.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Empirical.Median">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Empirical.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Empirical.Observations">
            <summary>
            Gets a collection containing the observed values defining the distribution.
            </summary>
            <value>
            A collection containing the observed values defining the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Empirical.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Empirical.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Empirical.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Empirical.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Empirical.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Empirical.CumulativeDistributionFunction(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified empirical distribution at a specified point.
            </summary>
            <param name="observations">
            A sequence containing the observed values.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence of observations is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Empirical.ProbabilityDensityFunction(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified empirical distribution at a specified point.
            </summary>
            <param name="observations">
            A sequence containing the observed values.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence of observations is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Empirical.QuantileFunction(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Evaluates the quantile function of a specified empirical distribution at a specified point.
            </summary>
            <param name="observations">
            A sequence containing the observed values.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence of observations is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Empirical.Sample(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Samples a specified empirical distribution.
            </summary>
            <param name="observations">
            A sequence containing the observed values.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Empirical.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Empirical.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Empirical.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Empirical.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Empirical.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Empirical.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Empirical.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Empirical.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Empirical.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Empirical.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.HistogramType">
            <summary>
            An enumeration defining the different types of histogram.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.HistogramType.Frequency">
            <summary>
            A frequency histogram: the sum of the heights of each of the bars is equal to the number of
            data points.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.HistogramType.RelativeFrequency">
            <summary>
            A relative frequency histogram: the sum of the heights of each of the bars is equal to one.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.HistogramType.ScaledRelativeFrequency">
            <summary>
            A scaled relative frequency histogram: the sum of the areas of each of the bars is equal to
            one.
            </summary>
        </member>
        <member name="T:Simphony.Mathematics.MatrixEditor">
            <summary>
            A design value editor that provides a table-like interface for editing matrices.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MatrixEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.MatrixEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.MatrixConverter">
            <summary>
            A custom type converter to be used in conjunction with the matrix editor.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.MatrixSize">
            <summary>
            Stores the size of a matrix.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.MatrixSize.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.MatrixSize"/> struct.
            </summary>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
        </member>
        <member name="P:Simphony.Mathematics.MatrixSize.Columns">
            <summary>
            Gets the number of columns in the matrix.
            </summary>
            <value>
            The number of columns in the matrix.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MatrixSize.IsEmpty">
            <summary>
            Gets a value indicating whether is struct represents an empty matrix.
            </summary>
            <value>
            True if the struct represents an empty matrix; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.MatrixSize.Rows">
            <summary>
            Gets the number of rows in the matrix.
            </summary>
            <value>
            The number of rows in the matrix.
            </value>
        </member>
        <member name="T:Simphony.Mathematics.Burr">
            <summary>
            Represents a Burr distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Burr.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Burr"/> class with default parameter values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Burr.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Burr"/> class with a scale of 1 and a location
            of 0.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Burr.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Burr"/> class with a location of 0.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Burr.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Burr"/> class.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Burr.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Burr.Location">
            <summary>
            Gets or sets the location of the distribution.
            </summary>
            <value>
            The location of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Burr.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Burr.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Burr.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Burr.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Burr.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Burr.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Burr.Scale">
            <summary>
            Gets or sets the scale of the distribution.
            </summary>
            <value>
            The scale of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Burr.Shape1">
            <summary>
            Gets or sets the first shape parameter of the distribution.
            </summary>
            <value>
            The first shape parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Burr.Shape2">
            <summary>
            Gets or sets the second shape parameter of the distribution.
            </summary>
            <value>
            The second shape parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Burr.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Burr.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Burr.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified Burr distribution with a
            scale of 1 and a location of 0 at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Burr.CumulativeDistributionFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified Burr distribution with a
            location of 0 at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Burr.CumulativeDistributionFunction(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified Burr distribution at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Burr.ProbabilityDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified Burr distribution with a
            scale of 1 and a location of 0 at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Burr.ProbabilityDensityFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified Burr distribution with a
            location of 0 at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Burr.ProbabilityDensityFunction(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability density function of a specified Burr distribution at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Burr.QuantileFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified Burr distribution with a scale of 1 and
            a location of 0 at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Burr.QuantileFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified Burr distribution with a location of 0
            at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Burr.QuantileFunction(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified Burr distribution at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Burr.Sample(System.Double,System.Double)">
            <summary>
            Samples a specified Burr distribution with a scale of 1 and a location of 0.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Burr.Sample(System.Double,System.Double,System.Double)">
            <summary>
            Samples a specified Burr distribution with a location of 0.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Burr.Sample(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Samples a specified Burr distribution.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Burr.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Burr.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Burr.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Burr.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Burr.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Burr.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Burr.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Burr.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Burr.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Burr.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Burr.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified Burr distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Burr.ProbabilityDensityFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the probability density function of a specified Burr distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the maximum likelihood fitting method.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.DistributionEditor">
            <summary>
            A design value editor for probability distributions.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.DistributionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.IDistribution">
            <summary>
            Interface implemented by probability distributions.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.IDistribution.CumulativeDistributionFunction(System.Double)">
            <summary>
            Evaluates the distribution's cumulative distribution function at a specified point.
            </summary>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
        </member>
        <member name="T:Simphony.Mathematics.StudentsT">
            <summary>
            Represents an StudentsT distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.StudentsT"/> class with default parameter
            values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.StudentsT"/> class.
            </summary>
            <param name="freedom">
            The freedom of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.StudentsT.Freedom">
            <summary>
            Gets or sets the degrees of freedom of the distribution.
            </summary>
            <value>
            The degrees of freedom of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.StudentsT.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.StudentsT.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.StudentsT.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
            <value>
            The mean of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.StudentsT.Median">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.StudentsT.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.StudentsT.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.StudentsT.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.StudentsT.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.StudentsT.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.StudentsT.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.CumulativeDistributionFunction(System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified StudentsT distribution at a specified point.
            </summary>
            <param name="freedom">
            The freedom of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits an StudentsT distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            An StudentsT distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits an StudentsT distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            An StudentsT distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits an StudentsT distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            An StudentsT distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.ProbabilityDensityFunction(System.Double,System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified StudentsT distribution at a specified point.
            </summary>
            <param name="freedom">
            The freedom of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.QuantileFunction(System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified StudentsT distribution at a specified point.
            </summary>
            <param name="freedom">
            The freedom of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.Sample(System.Double)">
            <summary>
            Samples a specified StudentsT distribution.
            </summary>
            <param name="freedom">
            The freedom of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified beta distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.StudentsT.ProbabilityDensityFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the probability density function of a specified beta distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the maximum likelihood fitting method.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.Logistic">
            <summary>
            Represents a logistic distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Logistic"/> class with the standard
            parameters.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Logistic"/> class with a scale parameter of 1.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameter is not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Logistic"/> class.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Logistic.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Logistic.Location">
            <summary>
            Gets or sets the location of the distribution.
            </summary>
            <value>
            The location of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Logistic.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Logistic.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Logistic.Median">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Logistic.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Logistic.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Logistic.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Logistic.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Logistic.Scale">
            <summary>
            Gets or sets the scale of the distribution.
            </summary>
            <value>
            The scale of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Logistic.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Logistic.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified logistic distribution at a specified point.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a logistic distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A logistic distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a logistic distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A logistic distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a logistic distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A logistic distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.ProbabilityDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability density function of a specified logistic distribution at a specified point.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.QuantileFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified logistic distribution at a specified point.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.Sample(System.Double,System.Double)">
            <summary>
            Samples a specified logistic distribution.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified logistic distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Logistic.ProbabilityDensityFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the probability density function of a specified gamma distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the maximum likelihood fitting method.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.Gumbel">
            <summary>
            Represents a Gumbel distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Gumbel"/> class with the standard parameters.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Gumbel"/> class with a scale parameter of 1.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameter is not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Gumbel"/> class.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Gumbel.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Gumbel.Location">
            <summary>
            Gets or sets the location of the distribution.
            </summary>
            <value>
            The location of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Gumbel.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Gumbel.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Gumbel.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Gumbel.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Gumbel.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Gumbel.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Gumbel.Scale">
            <summary>
            Gets or sets the scale of the distribution.
            </summary>
            <value>
            The scale of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Gumbel.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Gumbel.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified Gumbel distribution at a specified point.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Gumbel distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Gumbel distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Gumbel distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Gumbel distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Gumbel distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Gumbel distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.ProbabilityDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability density function of a specified Gumbel distribution at a specified point.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.QuantileFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified Gumbel distribution at a specified point.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.Sample(System.Double,System.Double)">
            <summary>
            Samples a specified Gumbel distribution.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified Gumbel distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Gumbel.ProbabilityDensityFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the probability density function of a specified gamma distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the maximum likelihood fitting method.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.Pareto">
            <summary>
            Represents a Pareto distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Pareto"/> class with the standard parameters.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Pareto"/> class with a scale parameter of 1.
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameter is not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Pareto"/> class.
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Pareto.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pareto.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pareto.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pareto.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pareto.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pareto.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pareto.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pareto.Scale">
            <summary>
            Gets or sets the scale of the distribution.
            </summary>
            <value>
            The scale of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Pareto.Shape">
            <summary>
            Gets or sets the standard deviation of the distribution.
            </summary>
            <value>
            The standard deviation of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Pareto.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Pareto.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified Pareto distribution at a specified point.
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Pareto distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Pareto distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Pareto distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Pareto distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Pareto distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Pareto distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.ProbabilityDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability density function of a specified Pareto distribution at a specified point.
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.QuantileFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified Cauchy distribution at a specified point.
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.Sample(System.Double,System.Double)">
            <summary>
            Samples a specified Pareto distribution.
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified Pareto distribution at a
            specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Pareto.ProbabilityDensityFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the probability density function of a specified Pareto distribution at a
            specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the maximum likelihood fitting method.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.LikelihoodOptimizer">
            <summary>
            A custom optimizer for fitting probability distributions using the maximum likelihood method.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.LikelihoodOptimizer.#ctor(System.Func{System.Double[],System.Double,System.Double},System.Double[],System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.LikelihoodOptimizer"/> class.
            </summary>
            <param name="probabilityDensityFunction">
            The probability density function of the distribution to fit.
            </param>
            <param name="fixedParams">
            An array containing parameters to the probability density function that should not be
            modified during optimization.
            </param>
            <param name="data">
            A collection containing the data to fit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the specified cumulative distribution function, the specified fixed
            parameters, or the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LikelihoodOptimizer.#ctor(System.Func{System.Double[],System.Double,System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.LikelihoodOptimizer"/> class.
            </summary>
            <param name="probabilityDensityFunction">
            The probability density function of the distribution to fit.
            </param>
            <param name="data">
            A collection containing the data to fit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the specified cumulative distribution function or the specified
            collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LikelihoodOptimizer.ObjectiveFunction(System.Double[])">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.LeastSquaresOptimizer">
            <summary>
            A custom optimizer for fitting probability distributions using the least-squares method.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.LeastSquaresOptimizer.#ctor(System.Func{System.Double[],System.Double,System.Double},System.Double[],System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.LeastSquaresOptimizer"/> class.
            </summary>
            <param name="cumulativeDistributionFunction">
            The cumulative distribution function of the distribution to fit.
            </param>
            <param name="fixedParams">
            An array containing parameters to the cumulative distribution function that should not
            be modified during optimization.
            </param>
            <param name="data">
            A collection containing the data to fit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the specified cumulative distribution function, the specified fixed
            parameters, or the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LeastSquaresOptimizer.#ctor(System.Func{System.Double[],System.Double,System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.LeastSquaresOptimizer"/> class.
            </summary>
            <param name="cumulativeDistributionFunction">
            The cumulative distribution function of the distribution to fit.
            </param>
            <param name="data">
            A collection containing the data to fit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the specified cumulative distribution function or the specified
            collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LeastSquaresOptimizer.ObjectiveFunction(System.Double[])">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.BinningMethod">
            <summary>
            An enumeration defining the ways data can be binned to generate histograms.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.BinningMethod.Heuristic">
            <summary>
            Determines the number of bins using a heuristic approach. This is the default.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.BinningMethod.RiceRule">
            <summary>
            Determines the number of bins using the Rice rule.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.BinningMethod.SquareRoot">
            <summary>
            Determines the number of bins using the square-root choice.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.BinningMethod.SturgesRule">
            <summary>
            Determines the number of bins using Sturge's Rule.
            </summary>
        </member>
        <member name="T:Simphony.Mathematics.IntegrationFlag">
            <summary>
            Possible values for the flag parameter of the Runge-Kutta-Fehlberg method.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.IntegrationFlag.NormalMode">
            <summary>
            As a parameter, indicates the first call to the RKF45 algorithm and that the algorithm
            should execute in normal mode; never a return value.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.IntegrationFlag.NormalModeContinuation">
            <summary>
            As a parameter, indicates a subsequent call to the RKF45 algorithm (initialization work can
            be skipped) and that the algorithm should execute in normal mode; as a return value,
            indicates normal progress and that the specified output point has been reached.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.IntegrationFlag.SingleStepMode">
            <summary>
            As a parameter, indicates the first call to the RKF45 algorithm and that the algorithm
            should execute in single step mode; never a return value.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.IntegrationFlag.SingleStepModeContinuation">
            <summary>
            As a parameter, indicates a subsequent call to the RKF45 algorithm (initialization work can
            be skipped) and that the algorithm should execute in single step mode; as a return value,
            indicates normal progress and that the specified output point has not yet been reached.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.IntegrationFlag.WarningInefficient">
            <summary>
            Indicates that it is likely that the Runge-Kutta-Fehlberg method is inefficient for solving
            this problem.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.IntegrationFlag.WarningPossibleSingularity">
            <summary>
            Indicates that integration was not completed because the requested accuracy could not be
            achieved, even using the smallest allowable step size.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.IntegrationFlag.WarningRelativeErrorTooSmall">
            <summary>
            Indicates that integration was not completed because the specified relative error tolerance
            was too small.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.IntegrationFlag.WarningSolutionVanished">
            <summary>
            Indicates that integration was not completed because the solution vanished, making a pure
            relative error test impossible.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.IntegrationFlag.WarningTooManySteps">
            <summary>
            Indicates that integration was not completed because an excessive number of  derivative
            evaluations were needed.
            </summary>
        </member>
        <member name="T:Simphony.Mathematics.Interval">
            <summary>
            Represents an interval on the real line.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Interval.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Interval"/> class.
            </summary>
            <param name="low">
            Low point of the interval.
            </param>
            <param name="high">
            High point of the interval.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the parameters is Double.NaN.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified high point is less than the specified low point.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Interval.High">
            <summary>
            Gets or sets the high point of the interval.
            </summary>
            <value>
            The high point of the interval.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Interval.Length">
            <summary>
            Gets the length of the interval.
            </summary>
            <value>
            The length of the interval.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Interval.Low">
            <summary>
            Gets or sets the low point of the interval.
            </summary>
            <value>
            The low point of the interval.
            </value>
        </member>
        <member name="M:Simphony.Mathematics.Interval.op_Subtraction(Simphony.Mathematics.Interval,Simphony.Mathematics.Interval)">
            <summary>
            Returns an interval representing the difference of two intervals.
            </summary>
            <param name="left">
            The first interval.
            </param>
            <param name="right">
            The second interval.
            </param>
            <returns>
            An interval representing the difference of the left and right-hand intervals.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Interval.op_Multiply(Simphony.Mathematics.Interval,Simphony.Mathematics.Interval)">
            <summary>
            Returns an interval representing the product of two intervals.
            </summary>
            <param name="left">
            The first interval.
            </param>
            <param name="right">
            The second interval.
            </param>
            <returns>
            An interval representing the product of the left and right-hand intervals.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Interval.op_Division(Simphony.Mathematics.Interval,Simphony.Mathematics.Interval)">
            <summary>
            Returns an interval representing the quotient of two intervals.
            </summary>
            <param name="left">
            The first interval.
            </param>
            <param name="right">
            The second interval.
            </param>
            <returns>
            An interval representing the quotient of the left and right-hand intervals.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Interval.op_Addition(Simphony.Mathematics.Interval,Simphony.Mathematics.Interval)">
            <summary>
            Returns an interval representing the sum of two intervals.
            </summary>
            <param name="left">
            The first interval.
            </param>
            <param name="right">
            The second interval.
            </param>
            <returns>
            An interval representing the sum of the left and right-hand intervals.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Interval.Clone">
            <summary>
            Creates a deep copy of the current interval.
            </summary>
            <returns>
            A deep copy of the current interval.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Interval.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Interval.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.PolynomialOptimizer">
            <summary>
            A custom optimizer for fitting polynomials using the least-squares method.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.PolynomialOptimizer.#ctor(System.Double[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.PolynomialOptimizer"/> class.
            </summary>
            <param name="x">
            An array containing the x-values of the data to fit.
            </param>
            <param name="y">
            An array containing the y-values of the data to fit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified arrays is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if either of the arrays is empty of if the two arrays have different lengths.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.PolynomialOptimizer.ObjectiveFunction(System.Double[])">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.Transform3D">
            <summary>
            Represents a 3D linear transformation.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Transform3D"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Transform3D"/> class from a two-dimensional
            array.
            </summary>
            <param name="entries">
            A two-dimensional array containing the entries for the matrix.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified array is not of size 3 x 3.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.op_Subtraction(Simphony.Mathematics.Transform3D,Simphony.Mathematics.Transform3D)">
            <summary>
            Subtracts two transforms.
            </summary>
            <param name="left">
            The first transform.
            </param>
            <param name="right">
            The second transform.
            </param>
            <returns>
            A transform that is the difference of the two transforms.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified transforms is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.op_UnaryNegation(Simphony.Mathematics.Transform3D)">
            <summary>
            Multiplies a transform by the scalar -1.
            </summary>
            <param name="transform">
            The transform.
            </param>
            <returns>
            A transform that is the specified transform multiplied by -1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified transform is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.op_Inequality(Simphony.Mathematics.Transform3D,Simphony.Mathematics.Transform3D)">
            <summary>
            Compares two transforms and determines if they are unequal.
            </summary>
            <param name="left">
            The first transform.
            </param>
            <param name="right">
            The second transform.
            </param>
            <returns>
            True if the two transforms are unequal; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.op_Multiply(System.Double,Simphony.Mathematics.Transform3D)">
            <summary>
            Multiplies a transform by a scalar.
            </summary>
            <param name="scalar">
            The scalar.
            </param>
            <param name="transform">
            The transform.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified transform is a null reference.
            </exception>
            <returns>
            A transform that is the product of the scalar and the transform.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.op_Multiply(Simphony.Mathematics.Transform3D,Simphony.Mathematics.Transform3D)">
            <summary>
            Multiplies two transforms.
            </summary>
            <param name="left">
            The first transform.
            </param>
            <param name="right">
            The second transform.
            </param>
            <returns>
            A transform that is the product of the two transforms.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified transforms is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.op_Multiply(Simphony.Mathematics.Transform3D,System.Double)">
            <summary>
            Multiplies a transform by a scalar.
            </summary>
            <param name="transform">
            The transform.
            </param>
            <param name="scalar">
            The scalar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified transform is a null reference.
            </exception>
            <returns>
            A transform that is the product of the scalar and the transform.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.op_Division(Simphony.Mathematics.Transform3D,System.Double)">
            <summary>
            Divides a transform by a scalar.
            </summary>
            <param name="transform">
            The transform.
            </param>
            <param name="scalar">
            The scalar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified transform is a null reference.
            </exception>
            <returns>
            A transform that is the quotient of the transform and the scalar.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.op_Addition(Simphony.Mathematics.Transform3D,Simphony.Mathematics.Transform3D)">
            <summary>
            Adds two transforms.
            </summary>
            <param name="left">
            The first transform.
            </param>
            <param name="right">
            The second transform.
            </param>
            <returns>
            A transform that is the sum of the two transforms.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified transforms is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.op_UnaryPlus(Simphony.Mathematics.Transform3D)">
            <summary>
            Multiplies a transform by the scalar +1.
            </summary>
            <param name="transform">
            The transform.
            </param>
            <returns>
            A transform that is the specified transform multiplied by +1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified transform is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.op_Equality(Simphony.Mathematics.Transform3D,Simphony.Mathematics.Transform3D)">
            <summary>
            Compares two transforms and determines if they are equal.
            </summary>
            <param name="left">
            The first transform.
            </param>
            <param name="right">
            The second transform.
            </param>
            <returns>
            True if the two transforms are equal; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.Add(Simphony.Mathematics.Transform3D,Simphony.Mathematics.Transform3D)">
            <summary>
            Adds two transforms.
            </summary>
            <param name="left">
            The first transforms.
            </param>
            <param name="right">
            The second transforms.
            </param>
            <returns>
            A transforms that is the sum of the two transforms.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified transforms is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.Identity">
            <summary>
            Generates an identity transform.
            </summary>
            <returns>
            An identity transform.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.Multiply(System.Double,Simphony.Mathematics.Transform3D)">
            <summary>
            Multiplies a transform by a scalar.
            </summary>
            <param name="scalar">
            The scalar.
            </param>
            <param name="transform">
            The transform.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified transform is a null reference.
            </exception>
            <returns>
            A transform that is the product of the scalar and the transform.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.Multiply(Simphony.Mathematics.Transform3D,Simphony.Mathematics.Transform3D)">
            <summary>
            Multiplies two transforms.
            </summary>
            <param name="left">
            The first transforms.
            </param>
            <param name="right">
            The second transforms.
            </param>
            <returns>
            A transforms that is the product of the two transforms.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified transforms is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.Clone">
            <summary>
            Creates a copy of the current transformation.
            </summary>
            <returns>
            A copy of the current transformation.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.Inverse">
            <summary>
            Returns the inverse of the current transform.
            </summary>
            <returns>
            The inverse of the current transform.
            </returns>
            <exception cref="T:System.DivideByZeroException">
            Thrown if the current transform is a singular transform.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform3D.Transpose">
            <summary>
            Returns the transpose of the current transform.
            </summary>
            <returns>
            A transform that is the transpose of the current transform.
            </returns>
        </member>
        <member name="T:Simphony.Mathematics.Transform2D">
            <summary>
            Represents a 2D linear transformation.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Transform2D"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Transform2D"/> class with a specified scale
            factor and rotation.
            </summary>
            <param name="scale">
            The scale factor.
            </param>
            <param name="rotation">
            The rotation in radians.
            </param>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Transform2D"/> class from a two-dimensional
            array.
            </summary>
            <param name="entries">
            A two-dimensional array containing the entries for the matrix.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified array is not of size 2 x 2.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.op_Subtraction(Simphony.Mathematics.Transform2D,Simphony.Mathematics.Transform2D)">
            <summary>
            Subtracts two transforms.
            </summary>
            <param name="left">
            The first transform.
            </param>
            <param name="right">
            The second transform.
            </param>
            <returns>
            A transform that is the difference of the two transforms.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified transforms is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.op_UnaryNegation(Simphony.Mathematics.Transform2D)">
            <summary>
            Multiplies a transform by the scalar -1.
            </summary>
            <param name="transform">
            The transform.
            </param>
            <returns>
            A transform that is the specified transform multiplied by -1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified transform is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.op_Inequality(Simphony.Mathematics.Transform2D,Simphony.Mathematics.Transform2D)">
            <summary>
            Compares two transforms and determines if they are unequal.
            </summary>
            <param name="left">
            The first transform.
            </param>
            <param name="right">
            The second transform.
            </param>
            <returns>
            True if the two transforms are unequal; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.op_Multiply(System.Double,Simphony.Mathematics.Transform2D)">
            <summary>
            Multiplies a transform by a scalar.
            </summary>
            <param name="scalar">
            The scalar.
            </param>
            <param name="transform">
            The transform.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified transform is a null reference.
            </exception>
            <returns>
            A transform that is the product of the scalar and the transform.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.op_Multiply(Simphony.Mathematics.Transform2D,Simphony.Mathematics.Transform2D)">
            <summary>
            Multiplies two transforms.
            </summary>
            <param name="left">
            The first transform.
            </param>
            <param name="right">
            The second transform.
            </param>
            <returns>
            A transform that is the product of the two transforms.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified transforms is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.op_Multiply(Simphony.Mathematics.Transform2D,System.Double)">
            <summary>
            Multiplies a transform by a scalar.
            </summary>
            <param name="transform">
            The transform.
            </param>
            <param name="scalar">
            The scalar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified transform is a null reference.
            </exception>
            <returns>
            A transform that is the product of the scalar and the transform.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.op_Division(Simphony.Mathematics.Transform2D,System.Double)">
            <summary>
            Divides a transform by a scalar.
            </summary>
            <param name="transform">
            The transform.
            </param>
            <param name="scalar">
            The scalar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified transform is a null reference.
            </exception>
            <returns>
            A transform that is the quotient of the transform and the scalar.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.op_Addition(Simphony.Mathematics.Transform2D,Simphony.Mathematics.Transform2D)">
            <summary>
            Adds two transforms.
            </summary>
            <param name="left">
            The first transform.
            </param>
            <param name="right">
            The second transform.
            </param>
            <returns>
            A transform that is the sum of the two transforms.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified transforms is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.op_UnaryPlus(Simphony.Mathematics.Transform2D)">
            <summary>
            Multiplies a transform by the scalar +1.
            </summary>
            <param name="transform">
            The transform.
            </param>
            <returns>
            A transform that is the specified transform multiplied by +1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified transform is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.op_Equality(Simphony.Mathematics.Transform2D,Simphony.Mathematics.Transform2D)">
            <summary>
            Compares two transforms and determines if they are equal.
            </summary>
            <param name="left">
            The first transform.
            </param>
            <param name="right">
            The second transform.
            </param>
            <returns>
            True if the two transforms are equal; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.Add(Simphony.Mathematics.Transform2D,Simphony.Mathematics.Transform2D)">
            <summary>
            Adds two transforms.
            </summary>
            <param name="left">
            The first transforms.
            </param>
            <param name="right">
            The second transforms.
            </param>
            <returns>
            A transforms that is the sum of the two transforms.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified transforms is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.Identity">
            <summary>
            Generates an identity transform.
            </summary>
            <returns>
            An identity transform.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.Multiply(System.Double,Simphony.Mathematics.Transform2D)">
            <summary>
            Multiplies a transform by a scalar.
            </summary>
            <param name="scalar">
            The scalar.
            </param>
            <param name="transform">
            The transform.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified transform is a null reference.
            </exception>
            <returns>
            A transform that is the product of the scalar and the transform.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.Multiply(Simphony.Mathematics.Transform2D,Simphony.Mathematics.Transform2D)">
            <summary>
            Multiplies two transforms.
            </summary>
            <param name="left">
            The first transforms.
            </param>
            <param name="right">
            The second transforms.
            </param>
            <returns>
            A transforms that is the product of the two transforms.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified transforms is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.Clone">
            <summary>
            Creates a copy of the current transformation.
            </summary>
            <returns>
            A copy of the current transformation.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.Inverse">
            <summary>
            Returns the inverse of the current transform.
            </summary>
            <returns>
            The inverse of the current transform.
            </returns>
            <exception cref="T:System.DivideByZeroException">
            Thrown if the current transform is a singular transform.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Transform2D.Transpose">
            <summary>
            Returns the transpose of the current transform.
            </summary>
            <returns>
            A transform that is the transpose of the current transform.
            </returns>
        </member>
        <member name="T:Simphony.Mathematics.Vector2D">
            <summary>
            Represents a two-dimensional vector.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Vector2D"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Vector2D"/> class.
            </summary>
            <param name="x">
            The value of the x-coordinate.
            </param>
            <param name="y">
            The value of the y-coordinate.
            </param>
        </member>
        <member name="P:Simphony.Mathematics.Vector2D.X">
            <summary>
            Gets or sets the x-coordinate.
            </summary>
            <value>
            The x-coordinate.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Vector2D.Y">
            <summary>
            Gets or sets the y-coordinate.
            </summary>
            <value>
            The y-coordinate.
            </value>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.op_Subtraction(Simphony.Mathematics.Vector2D,Simphony.Mathematics.Vector2D)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            A vector that is the difference of the two vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified vectors is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the two vectors have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.op_UnaryNegation(Simphony.Mathematics.Vector2D)">
            <summary>
            Multiplies a vector by the scalar value -1.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <returns>
            A new vector that is the product of the specified vector and the scalar value -1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.op_Inequality(Simphony.Mathematics.Vector2D,Simphony.Mathematics.Vector2D)">
            <summary>
            Compares two vectors and determines if they are unequal.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            True if the two vectors are unequal; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.op_Multiply(System.Double,Simphony.Mathematics.Vector2D)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="scalar">
            The scalar.
            </param>
            <param name="vector">
            The vector.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <returns>
            A vector that is the product of the scalar and the vector.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.op_Multiply(Simphony.Mathematics.Transform2D,Simphony.Mathematics.Vector2D)">
            <summary>
            Multiplies a transform by a vector on the right.
            </summary>
            <param name="transform">
            The transform.
            </param>
            <param name="vector">
            The vector.
            </param>
            <returns>
            A vector that is the product of the transform and the vector.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified transform or the specified vector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.op_Multiply(Simphony.Mathematics.Vector2D,Simphony.Mathematics.Vector2D)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            A scalar value that is the dot product of the the two vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified vectors is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the two vectors have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.op_Multiply(Simphony.Mathematics.Vector2D,System.Double)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <param name="scalar">
            The scalar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <returns>
            A vector that is the product of the scalar and the vector.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.op_Multiply(Simphony.Mathematics.Vector2D,Simphony.Mathematics.Transform2D)">
            <summary>
            Multiplies a transform by a vector on the left.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <param name="transform">
            The transform.
            </param>
            <returns>
            A vector that is the product of the vector and the transform.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector or the specified transform is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.op_Division(Simphony.Mathematics.Vector2D,System.Double)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <param name="scalar">
            The scalar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <returns>
            A vector that is the quotient of the vector and the scalar.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.op_Addition(Simphony.Mathematics.Vector2D,Simphony.Mathematics.Vector2D)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            A vector that is the sum of the two vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified vectors is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the two vectors have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.op_UnaryPlus(Simphony.Mathematics.Vector2D)">
            <summary>
            Multiplies a vector by the scalar value +1.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <returns>
            A new vector that is the product of the specified vector and the scalar value +1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.op_Equality(Simphony.Mathematics.Vector2D,Simphony.Mathematics.Vector2D)">
            <summary>
            Compares two vectors and determines if they are equal.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            True if the two vectors are equal; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.Add(Simphony.Mathematics.Vector2D,Simphony.Mathematics.Vector2D)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            A vector that is the sum of the two vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified vectors is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.DotProduct(Simphony.Mathematics.Vector2D,Simphony.Mathematics.Vector2D)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            A scalar value that is the dot product of the the two vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified vectors is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.Multiply(System.Double,Simphony.Mathematics.Vector2D)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="scalar">
            The scalar.
            </param>
            <param name="vector">
            The vector.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <returns>
            A vector that is the product of the scalar and the vector.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.Multiply(Simphony.Mathematics.Transform2D,Simphony.Mathematics.Vector2D)">
            <summary>
            Multiplies a transform by a vector on the right.
            </summary>
            <param name="transform">
            The transform.
            </param>
            <param name="vector">
            The vector.
            </param>
            <returns>
            A vector that is the product of the transform and the vector.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified transform or the specified vector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.Multiply(Simphony.Mathematics.Vector2D,Simphony.Mathematics.Transform2D)">
            <summary>
            Multiplies a transform by a vector on the left.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <param name="transform">
            The transform.
            </param>
            <returns>
            A vector that is the product of the vector and the transform.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector or the specified transform is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.Clone">
            <summary>
            Creates a copy of the current vector.
            </summary>
            <returns>
            A copy of the current vector.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector2D.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.Vector3D">
            <summary>
            Represents a three-dimensional vector.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Vector3D"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Vector3D"/> class.
            </summary>
            <param name="x">
            The value of the x-coordinate.
            </param>
            <param name="y">
            The value of the y-coordinate.
            </param>
            <param name="z">
            The value of the z-coordinate.
            </param>
        </member>
        <member name="P:Simphony.Mathematics.Vector3D.X">
            <summary>
            Gets or sets the x-coordinate.
            </summary>
            <value>
            The x-coordinate.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Vector3D.Y">
            <summary>
            Gets or sets the y-coordinate.
            </summary>
            <value>
            The y-coordinate.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Vector3D.Z">
            <summary>
            Gets or sets the z-coordinate.
            </summary>
            <value>
            The z-coordinate.
            </value>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.op_Subtraction(Simphony.Mathematics.Vector3D,Simphony.Mathematics.Vector3D)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            A vector that is the difference of the two vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified vectors is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the two vectors have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.op_UnaryNegation(Simphony.Mathematics.Vector3D)">
            <summary>
            Multiplies a vector by the scalar value -1.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <returns>
            A new vector that is the product of the specified vector and the scalar value -1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.op_Inequality(Simphony.Mathematics.Vector3D,Simphony.Mathematics.Vector3D)">
            <summary>
            Compares two vectors and determines if they are unequal.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            True if the two vectors are unequal; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.op_Multiply(System.Double,Simphony.Mathematics.Vector3D)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="scalar">
            The scalar.
            </param>
            <param name="vector">
            The vector.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <returns>
            A vector that is the product of the scalar and the vector.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.op_Multiply(Simphony.Mathematics.Transform3D,Simphony.Mathematics.Vector3D)">
            <summary>
            Multiplies a transform by a vector on the right.
            </summary>
            <param name="transform">
            The transform.
            </param>
            <param name="vector">
            The vector.
            </param>
            <returns>
            A vector that is the product of the transform and the vector.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified transform or the specified vector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.op_Multiply(Simphony.Mathematics.Vector3D,Simphony.Mathematics.Vector3D)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            A scalar value that is the dot product of the the two vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified vectors is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the two vectors have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.op_Multiply(Simphony.Mathematics.Vector3D,System.Double)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <param name="scalar">
            The scalar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <returns>
            A vector that is the product of the scalar and the vector.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.op_Multiply(Simphony.Mathematics.Vector3D,Simphony.Mathematics.Transform3D)">
            <summary>
            Multiplies a transform by a vector on the left.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <param name="transform">
            The transform.
            </param>
            <returns>
            A vector that is the product of the vector and the transform.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector or the specified transform is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.op_Division(Simphony.Mathematics.Vector3D,System.Double)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <param name="scalar">
            The scalar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <returns>
            A vector that is the quotient of the vector and the scalar.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.op_Addition(Simphony.Mathematics.Vector3D,Simphony.Mathematics.Vector3D)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            A vector that is the sum of the two vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified vectors is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the two vectors have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.op_UnaryPlus(Simphony.Mathematics.Vector3D)">
            <summary>
            Multiplies a vector by the scalar value +1.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <returns>
            A new vector that is the product of the specified vector and the scalar value +1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.op_Equality(Simphony.Mathematics.Vector3D,Simphony.Mathematics.Vector3D)">
            <summary>
            Compares two vectors and determines if they are equal.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            True if the two vectors are equal; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.Add(Simphony.Mathematics.Vector3D,Simphony.Mathematics.Vector3D)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            A vector that is the sum of the two vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified vectors is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.CrossProduct(Simphony.Mathematics.Vector3D,Simphony.Mathematics.Vector3D)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            A vector that is the cross product of the two vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified vectors is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.DotProduct(Simphony.Mathematics.Vector3D,Simphony.Mathematics.Vector3D)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            A scalar value that is the dot product of the the two vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified vectors is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.Multiply(System.Double,Simphony.Mathematics.Vector3D)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="scalar">
            The scalar.
            </param>
            <param name="vector">
            The vector.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <returns>
            A vector that is the product of the scalar and the vector.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.Multiply(Simphony.Mathematics.Transform3D,Simphony.Mathematics.Vector3D)">
            <summary>
            Multiplies a transform by a vector on the right.
            </summary>
            <param name="transform">
            The transform.
            </param>
            <param name="vector">
            The vector.
            </param>
            <returns>
            A vector that is the product of the transform and the vector.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified transform or the specified vector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.Multiply(Simphony.Mathematics.Vector3D,Simphony.Mathematics.Transform3D)">
            <summary>
            Multiplies a transform by a vector on the left.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <param name="transform">
            The transform.
            </param>
            <returns>
            A vector that is the product of the vector and the transform.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector or the specified transform is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.Clone">
            <summary>
            Creates a copy of the current vector.
            </summary>
            <returns>
            A copy of the current vector.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector3D.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.DoubleComparer">
            <summary>
            Represents a double-precision floating point comparison operation.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.DoubleComparer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.DoubleComparer"/> class.
            </summary>
            <param name="n">
            An indication of the relative tolerance to use during comparison.  Setting n = 0 will result
            in machine-precision comparison, n = 1 will result in comparison within a factor of 2 of
            machine-precision, n = 2 will result in comparison within a factor of 4 of machine-precision,
            n = 3 will result in comparison within a factor of 8 of machine-precision, etc.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified value of n is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.DoubleComparer.Compare(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.Geography">
            <summary>
            Geography functions above and beyond those provided by the System.Math class.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Geography.GeographicToMTM(System.Double,System.Double)">
            <summary>
            Returns the MTM's parameters.
            </summary>
            <param name="lat">
            The Geographic latitude value.
            </param>
            <param name="lon">
            The Geographic longitude value.
            </param>
            <returns>
            The MTM's easting, northing and zone.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Geography.GeographicToMTM(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the MTM's parameters.
            </summary>
            <param name="lat">
            The Geographic latitude value.
            </param>
            <param name="lon">
            The Geographic longitude value.
            </param>
            <param name="correctEasting">
            Correct the Easting value with a constant.
            </param>
            <param name="correntNorthing">
            Correct the Northing value with a constant.
            </param>
            <returns>
            The MTM's easting, northing and zone.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Geography.MTMToGeographic(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the Geographic's parameters.
            </summary>
            <param name="easting">
            The MTM easting value.
            </param>
            <param name="northing">
            The MTM northing value.
            </param>
            <param name="zone">
            The MTM zone value.
            </param>
            <returns>
            The Geographic's latitude and longitude.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Geography.MTMToGeographic(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the Geographic's parameters.
            </summary>
            <param name="easting">
            The MTM easting value.
            </param>
            <param name="northing">
            The MTM northing value.
            </param>
            <param name="correctEasting">
            Correct the Easting value with a constant.
            </param>
            <param name="correntNorthing">
            Correct the Northing value with a constant.
            </param>
            <param name="zone">
            The MTM zone value.
            </param>
            <returns>
            The Geographic's latitude and longitude.
            </returns>
        </member>
        <member name="T:Simphony.Mathematics.Vector">
            <summary>
            Represents a vector.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Vector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Vector"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Vector.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Vector"/> class from a sequence.
            </summary>
            <param name="entries">
            A sequence containing the entries of the vector.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Vector"/> class with all entries set to zero.
            </summary>
            <param name="dimension">
            The dimension of the vector.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if specified dimension is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Vector"/> class from an array.
            </summary>
            <param name="entries">
            An array containing the entries of the vector.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Vector.Dimension">
            <summary>
            Gets the dimension of the vector.
            </summary>
            <value>
            The dimension of the vector.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Vector.Item(System.Int32)">
            <summary>
            Gets or sets a specific entry of the vector.
            </summary>
            <param name="index">
            The index of the entry to get or set.
            </param>
            <returns>
            An entry at the specified index.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.op_Subtraction(Simphony.Mathematics.Vector,Simphony.Mathematics.Vector)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            A vector that is the difference of the two vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified vectors is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the two vectors have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.op_UnaryNegation(Simphony.Mathematics.Vector)">
            <summary>
            Multiplies a vector by the scalar value -1.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <returns>
            A new vector that is the product of the specified vector and the scalar value -1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.op_Inequality(Simphony.Mathematics.Vector,Simphony.Mathematics.Vector)">
            <summary>
            Compares two vectors and determines if they are unequal.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            True if the two vectors are unequal; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector.op_Multiply(System.Double,Simphony.Mathematics.Vector)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="scalar">
            The scalar.
            </param>
            <param name="vector">
            The vector.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <returns>
            A vector that is the product of the scalar and the vector.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector.op_Multiply(Simphony.Mathematics.Matrix,Simphony.Mathematics.Vector)">
            <summary>
            Multiplies a matrix by a vector on the right.
            </summary>
            <param name="matrix">
            The matrix.
            </param>
            <param name="vector">
            The vector.
            </param>
            <returns>
            A vector that is the product of the matrix and the vector.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix or the specified vector is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the matrix and the vector have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.op_Multiply(Simphony.Mathematics.Vector,Simphony.Mathematics.Vector)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            A scalar value that is the dot product of the the two vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified vectors is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the two vectors have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.op_Multiply(Simphony.Mathematics.Vector,System.Double)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <param name="scalar">
            The scalar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <returns>
            A vector that is the product of the scalar and the vector.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector.op_Multiply(Simphony.Mathematics.Vector,Simphony.Mathematics.Matrix)">
            <summary>
            Multiplies a matrix by a vector on the left.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <param name="matrix">
            The matrix.
            </param>
            <returns>
            A vector that is the product of the vector and the matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector or the specified matrix is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the vector and the  have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.op_Division(Simphony.Mathematics.Vector,System.Double)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <param name="scalar">
            The scalar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <returns>
            A vector that is the quotient of the vector and the scalar.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector.op_Addition(Simphony.Mathematics.Vector,Simphony.Mathematics.Vector)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            A vector that is the sum of the two vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified vectors is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the two vectors have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.op_UnaryPlus(Simphony.Mathematics.Vector)">
            <summary>
            Multiplies a vector by the scalar value +1.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <returns>
            A new vector that is the product of the specified vector and the scalar value +1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.op_Equality(Simphony.Mathematics.Vector,Simphony.Mathematics.Vector)">
            <summary>
            Compares two vectors and determines if they are equal.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            True if the two vectors are equal; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector.Add(Simphony.Mathematics.Vector,Simphony.Mathematics.Vector)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            A vector that is the sum of the two vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified vectors is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the two vectors have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.DotProduct(Simphony.Mathematics.Vector,Simphony.Mathematics.Vector)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">
            The first vector.
            </param>
            <param name="right">
            The second vector.
            </param>
            <returns>
            A scalar value that is the dot product of the the two vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified vectors is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the two vectors have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.Multiply(System.Double,Simphony.Mathematics.Vector)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="scalar">
            The scalar.
            </param>
            <param name="vector">
            The vector.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <returns>
            A vector that is the product of the scalar and the vector.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector.Multiply(Simphony.Mathematics.Matrix,Simphony.Mathematics.Vector)">
            <summary>
            Multiplies a matrix by a vector on the right.
            </summary>
            <param name="matrix">
            The matrix.
            </param>
            <param name="vector">
            The vector.
            </param>
            <returns>
            A vector that is the product of the matrix and the vector.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix or the specified vector is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the matrix and the vector have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.Multiply(Simphony.Mathematics.Vector,Simphony.Mathematics.Matrix)">
            <summary>
            Multiplies a matrix by a vector on the left.
            </summary>
            <param name="vector">
            The vector.
            </param>
            <param name="matrix">
            The matrix.
            </param>
            <returns>
            A vector that is the product of the vector and the matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector or the specified matrix is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the vector and the  have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.Round(Simphony.Mathematics.Vector)">
            <summary>
            Rounds every entry in the current vector to the nearest integral value, and rounds midpoint
            values to the nearest even number.
            </summary>
            <param name="vector">
            The vector to be rounded.
            </param>
            <returns>
            A new vector that is equalt to the specified vector with rounded entries.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.Round(Simphony.Mathematics.Vector,System.Int32)">
            <summary>
            Rounds every entry in the current vector to a specified number of fractional digits, and
            rounds midpoint values to the nearest even number.
            </summary>
            <param name="vector">
            The vector to be rounded.
            </param>
            <param name="digits">
            The number of fractional digits to which each entry should be rounded.
            </param>
            <returns>
            A new vector that is equalt to the specified vector with rounded entries.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of digits specified is less than 0 or greater than 15.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.Round(Simphony.Mathematics.Vector,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds every entry in the current vector to a specified number of fractional digits, and
            uses the specified rounding convention for midpoint values.
            </summary>
            <param name="vector">
            The vector to be rounded.
            </param>
            <param name="digits">
            The number of fractional digits to which each entry should be rounded.
            </param>
            <param name="mode">
            The rounding convention to use for midpoint values.
            </param>
            <returns>
            A new vector that is equalt to the specified vector with rounded entries.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of digits specified is less than 0 or greater than 15.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.Round(Simphony.Mathematics.Vector,System.MidpointRounding)">
            <summary>
            Rounds every entry in the current vector to the nearest integer, and uses the specified
            rounding convention for midpoint values.
            </summary>
            <param name="vector">
            The vector to be rounded.
            </param>
            <param name="mode">
            The rounding convention to use for midpoint values.
            </param>
            <returns>
            A new vector that is equalt to the specified vector with rounded entries.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.Clone">
            <summary>
            Creates a copy of the current vector.
            </summary>
            <returns>
            A copy of the current vector.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.GetAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.GetClassName">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.GetComponentName">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.GetConverter">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.GetDefaultEvent">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.GetDefaultProperty">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.GetEditor(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.GetEvents">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.GetEvents(System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.GetProperties">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.GetProperties(System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.Norm">
            <summary>
            Calculates the Euclidean norm (length) of the current vector.
            </summary>
            <returns>
            The Euclidean norm (length) of the current vector.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.ToArray">
            <summary>
            Converts the current vector to an array.
            </summary>
            <returns>
            An array containing the entries of the vector.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.ToString(System.IFormatProvider)">
            <summary>
            Generates a string representation of the current object.
            </summary>
            <param name="provider">
            An object that supplies culture-specific formatting information.
            </param>
            <returns>
            A string representation for the current object.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Vector.ToString(System.String)">
            <summary>
            Generates a string representation of the current object.
            </summary>
            <param name="format">
            A numeric format string.
            </param>
            <returns>
            A string representation for the current object.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified format string is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.ToString(System.String,System.IFormatProvider)">
            <summary>
            Generates a string representation of the current object.
            </summary>
            <param name="format">
            A numeric format string.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information.
            </param>
            <returns>
            A string representation for the current object.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified format string is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Vector.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.VectorEntry.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Vector.VectorEntry"/> class.
            </summary>
            <param name="index">
            The zero-based index of the entry.
            </param>
        </member>
        <member name="P:Simphony.Mathematics.Vector.VectorEntry.ComponentType">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Vector.VectorEntry.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Vector.VectorEntry.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Vector.VectorEntry.PropertyType">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.VectorEntry.CanResetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.VectorEntry.GetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.VectorEntry.ResetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.VectorEntry.SetValue(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Vector.VectorEntry.ShouldSerializeValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.Matrix">
            <summary>
            Represents a matrix.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Matrix"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Matrix"/> class from a two-dimensional array.
            </summary>
            <param name="entries">
            A two-dimensional array containing the entries for the matrix.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Matrix"/> class with all entries set to zero.
            </summary>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of rows or the specified number of columns is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Matrix"/> class that is square with all
            entries set to zero.
            </summary>
            <param name="size">
            The number of rows/columns.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of rows/columns is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.#ctor(Simphony.Mathematics.MatrixSize)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Matrix"/> class with all entries set to zero.
            </summary>
            <param name="size">
            The size of the matrix.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the size specifies an empty matrix.
            </exception>
        </member>
        <member name="E:Simphony.Mathematics.Matrix.ListChanged">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.ColumnCount">
            <summary>
            Gets the number of columns in the matrix.
            </summary>
            <value>
            The number of columns in the matrix.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.AllowEdit">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.AllowNew">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.AllowRemove">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.Count">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.Diagonal">
            <summary>
            Gets a <see cref="T:Simphony.Mathematics.Vector"/> containing the diagonal of the matrix.
            </summary>
            <value>
            A <see cref="T:Simphony.Mathematics.Vector"/> containing the diagonal of the matrix.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.IsSorted">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.IsSquare">
            <summary>
            Gets a value indicating whether the matrix is a square matrix or not.
            </summary>
            <value>
            True if the matrix is square; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.RowCount">
            <summary>
            Gets the number of rows in the matrix.
            </summary>
            <value>
            The number of rows in the matrix.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.Size">
            <summary>
            Gets the size of the matrix.
            </summary>
            <value>
            The size of the matrix.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.SortDirection">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.SortProperty">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.SupportsChangeNotification">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.SupportsSearching">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.SupportsSorting">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the element to get or set.
            </param>
            <returns>
            The element at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is not a valid index in the list.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a specific entry of the matrix.
            </summary>
            <param name="row">
            The row of the entry to get or set.
            </param>
            <param name="column">
            The column of the entry to get or set.
            </param>
            <returns>
            The specified entry of the matrix.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the specified row or the specified column is outside the range of valid values.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.op_Subtraction(Simphony.Mathematics.Matrix,Simphony.Mathematics.Matrix)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="left">
            The first matrix.
            </param>
            <param name="right">
            The second matrix.
            </param>
            <returns>
            A matrix that is the difference of the two matrices.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified matrices is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the two matrices have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.op_UnaryNegation(Simphony.Mathematics.Matrix)">
            <summary>
            Multiplies a matrix by the scalar -1.
            </summary>
            <param name="matrix">
            The matrix.
            </param>
            <returns>
            A matrix that is the specified matrix multiplied by -1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.op_Inequality(Simphony.Mathematics.Matrix,Simphony.Mathematics.Matrix)">
            <summary>
            Compares two matrices and determines if they are unequal.
            </summary>
            <param name="left">
            The first matrix.
            </param>
            <param name="right">
            The second matrix.
            </param>
            <returns>
            True if the two matrices are unequal; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.op_Multiply(System.Double,Simphony.Mathematics.Matrix)">
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="scalar">
            The scalar.
            </param>
            <param name="matrix">
            The matrix.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix is a null reference.
            </exception>
            <returns>
            A matrix that is the product of the scalar and the matrix.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.op_Multiply(Simphony.Mathematics.Matrix,Simphony.Mathematics.Matrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="left">
            The first matrix.
            </param>
            <param name="right">
            The second matrix.
            </param>
            <returns>
            A matrix that is the product of the two matrices.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified matrices is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the two matrices have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.op_Multiply(Simphony.Mathematics.Matrix,System.Double)">
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="matrix">
            The matrix.
            </param>
            <param name="scalar">
            The scalar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix is a null reference.
            </exception>
            <returns>
            A matrix that is the product of the scalar and the matrix.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.op_Division(Simphony.Mathematics.Matrix,System.Double)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">
            The matrix.
            </param>
            <param name="scalar">
            The scalar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix is a null reference.
            </exception>
            <returns>
            A matrix that is the quotient of the matrix and the scalar.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.op_Addition(Simphony.Mathematics.Matrix,Simphony.Mathematics.Matrix)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="left">
            The first matrix.
            </param>
            <param name="right">
            The second matrix.
            </param>
            <returns>
            A matrix that is the sum of the two matrices.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified matrices is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the two matrices have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.op_UnaryPlus(Simphony.Mathematics.Matrix)">
            <summary>
            Multiplies a matrix by the scalar +1.
            </summary>
            <param name="matrix">
            The matrix.
            </param>
            <returns>
            A matrix that is the specified matrix multiplied by +1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.op_Equality(Simphony.Mathematics.Matrix,Simphony.Mathematics.Matrix)">
            <summary>
            Compares two matrices and determines if they are equal.
            </summary>
            <param name="left">
            The first matrix.
            </param>
            <param name="right">
            The second matrix.
            </param>
            <returns>
            True if the two matrices are equal; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Add(Simphony.Mathematics.Matrix,Simphony.Mathematics.Matrix)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="left">
            The first matrix.
            </param>
            <param name="right">
            The second matrix.
            </param>
            <returns>
            A matrix that is the sum of the two matrices.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified matrices is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the two matrices have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.BoundedVariableLeastSquares(Simphony.Mathematics.Matrix,Simphony.Mathematics.Vector,Simphony.Mathematics.Vector,Simphony.Mathematics.Vector)">
            <summary>
            Solves the bounded linear least squares problem Ax = b.
            </summary>
            <param name="left">
            The left-hand matrix A.
            </param>
            <param name="right">
            The right-hand vector b.
            </param>
            <param name="lowerBounds">
            A vector containing the lower bounds for the components of the solution vector x. It is
            permissible for one or more of the entries of this vector to be positive or negative
            infinity.
            </param>
            <param name="upperBounds">
            A vector containing the upper bounds for the components of the solution vector x. It is
            permissible for one or more of the entries of this vector to be positive or negative
            infinity.
            </param>
            <returns>
            The solution vector x.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix is a null reference or if one or more of the specified
            vectors is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the dimension of one or more of the specified vectors is incompatible with the
            matrix.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.CholeskyDecomposition(Simphony.Mathematics.Matrix)">
            <summary>
            Computes the Cholesky decomposition of a matrix.
            </summary>
            <param name="matrix">
            The matrix whose Cholesky decomposition is to be computed.
            </param>
            <returns>
            A new <see cref="T:Simphony.Mathematics.Matrix"/> that is the Cholesky decomposition of the specified matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified matrix is not a square matrix.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified matrix is not positive semi-definite.
            </exception>
            <remarks>
            Base on the code provided here: https://rosettacode.org/wiki/Cholesky_decomposition#C.23.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.ColumnVector(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Converts a sequence of length n to an n x 1 matrix.
            </summary>
            <param name="entries">
            The sequence to convert.
            </param>
            <returns>
            An n x 1 matrix containing the same entries as the specified sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.DiagonalMatrix(Simphony.Mathematics.Vector)">
            <summary>
            Generates a diagonal matrix with a specified vector along the diagonal.
            </summary>
            <param name="vector">
            The vector to place along the diagonal.
            </param>
            <returns>
            The diagonal matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Identity(System.Int32,System.Int32)">
            <summary>
            Generates an identity matrix with the specified number of rows and columns.
            </summary>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
            <returns>
            An identity matrix with the specified number of rows and columns.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of rows or the specified number of columns is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Identity(System.Int32)">
            <summary>
            Generates a square identity matrix of a specified size.
            </summary>
            <param name="size">
            The number of rows/columns.
            </param>
            <returns>
            A square identity matrix of the specified size.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of rows/columns is negative.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Multiply(System.Double,Simphony.Mathematics.Matrix)">
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="scalar">
            The scalar.
            </param>
            <param name="matrix">
            The matrix.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix is a null reference.
            </exception>
            <returns>
            A matrix that is the product of the scalar and the matrix.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Multiply(Simphony.Mathematics.Matrix,Simphony.Mathematics.Matrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="left">
            The first matrix.
            </param>
            <param name="right">
            The second matrix.
            </param>
            <returns>
            A matrix that is the product of the two matrices.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified matrices is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the two matrices have incompatible dimensions.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Round(Simphony.Mathematics.Matrix)">
            <summary>
            Rounds every entry in the current matrix to the nearest integral value, and rounds midpoint
            values to the nearest even number.
            </summary>
            <param name="matrix">
            The matrix to be rounded.
            </param>
            <returns>
            A new matrix that is equalt to the specified matrix with rounded entries.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Round(Simphony.Mathematics.Matrix,System.Int32)">
            <summary>
            Rounds every entry in the current matrix to a specified number of fractional digits, and
            rounds midpoint values to the nearest even number.
            </summary>
            <param name="matrix">
            The matrix to be rounded.
            </param>
            <param name="digits">
            The number of fractional digits to which each entry should be rounded.
            </param>
            <returns>
            A new matrix that is equalt to the specified matrix with rounded entries.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of digits specified is less than 0 or greater than 15.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Round(Simphony.Mathematics.Matrix,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds every entry in the current matrix to a specified number of fractional digits, and
            uses the specified rounding convention for midpoint values.
            </summary>
            <param name="matrix">
            The matrix to be rounded.
            </param>
            <param name="digits">
            The number of fractional digits to which each entry should be rounded.
            </param>
            <param name="mode">
            The rounding convention to use for midpoint values.
            </param>
            <returns>
            A new matrix that is equalt to the specified matrix with rounded entries.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of digits specified is less than 0 or greater than 15.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Round(Simphony.Mathematics.Matrix,System.MidpointRounding)">
            <summary>
            Rounds every entry in the current matrix to the nearest integer, and uses the specified
            rounding convention for midpoint values.
            </summary>
            <param name="matrix">
            The matrix to be rounded.
            </param>
            <param name="mode">
            The rounding convention to use for midpoint values.
            </param>
            <returns>
            A new matrix that is equalt to the specified matrix with rounded entries.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.RowVector(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Converts a sequence of length n to a 1 x n matrix.
            </summary>
            <param name="entries">
            The sequence to convert.
            </param>
            <returns>
            A 1 x n matrix containing the same entries as the specified sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Solve(Simphony.Mathematics.Matrix,Simphony.Mathematics.Vector)">
            <summary>
            Solves a system of linear equations Ax = b.
            </summary>
            <param name="left">
            The left-hand matrix A.
            </param>
            <param name="right">
            The right-hand vector b.
            </param>
            <returns>
            The solution vector x.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the left-hand matrix or the right-hand vector is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the left-hand matrix is not square or if the dimension of the right-hand vector
            is incompatible with the left-hand matrix.
            </exception>
            <exception cref="T:System.DivideByZeroException">
            Thrown if the left-hand matrix is a singular matrix.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.AddNew">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Clone">
            <summary>
            Creates a copy of the current matrix.
            </summary>
            <returns>
            A copy of the current matrix.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Determinant">
            <summary>
            Returns the determinant of the current matrix.
            </summary>
            <returns>
            The determinant of the current matrix.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the current matrix is not a square matrix.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">
            The object to compare with the current object.
            </param>
            <returns>
            True if the specified object is equal to the current object; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.GetColumn(System.Int32)">
            <summary>
            Gets a specified column of the matrix as a vector.
            </summary>
            <param name="index">
            The zero-based index of the column to retrieve.
            </param>
            <returns>
            The specified column as a vector.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.GetRow(System.Int32)">
            <summary>
            Gets a specified row of the matrix as a vector.
            </summary>
            <param name="index">
            The zero-based index of the row to retrieve.
            </param>
            <returns>
            The specified row as a vector.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.System#Collections#IList#Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.InsertColumn(System.Int32)">
            <summary>
            Returns a new matrix equal to the current matrix with a column of zeros inserted at a
            specified index.
            </summary>
            <param name="index">
            The zero-based index of the new column.
            </param>
            <returns>
            A new matrix equal to the current matrix with a column of zeros inserted at the specified
            index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.InsertRow(System.Int32)">
            <summary>
            Returns a new matrix equal to the current matrix with a row of zeros inserted at a
            specified index.
            </summary>
            <param name="index">
            The zero-based index of the new row.
            </param>
            <returns>
            A new matrix equal to the current matrix with a row of zeros inserted at the specified
            index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Inverse">
            <summary>
            Returns the inverse of the current matrix.
            </summary>
            <returns>
            The inverse of the current matrix.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the current matrix is not a square matrix.
            </exception>
            <exception cref="T:System.DivideByZeroException">
            Thrown if the current matrix is a singular matrix.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the class from an XML reader.
            </summary>
            <param name="reader">
            The XML reader to deserialize from.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified XML reader is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.RemoveColumn(System.Int32)">
            <summary>
            Returns a new matrix equal to the current matrix with a column removed at a specified index.
            </summary>
            <param name="index">
            The zero-based index of the column to remove.
            </param>
            <returns>
            A new matrix equal to the current matrix with a column removed at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.RemoveRow(System.Int32)">
            <summary>
            Returns a new matrix equal to the current matrix with a row removed at a specified index.
            </summary>
            <param name="index">
            The zero-based index of the row to remove.
            </param>
            <returns>
            A new matrix equal to the current matrix with a row removed at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.RemoveSort">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.SetColumn(System.Int32,Simphony.Mathematics.Vector)">
            <summary>
            Sets a specified column of the matrix to a specified vector.
            </summary>
            <param name="index">
            The zero-based index of the column to set.
            </param>
            <param name="vector">
            The vector to which the column should be set.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the dimension of the vector does not match the number of rows in the matrix.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.SetRow(System.Int32,Simphony.Mathematics.Vector)">
            <summary>
            Sets a specified row of the matrix to a specified vector.
            </summary>
            <param name="index">
            The zero-based index of the row to set.
            </param>
            <param name="vector">
            The vector to which the row should be set.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified vector is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the dimension of the vector does not match the number of columns in the matrix.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.ToArray">
            <summary>
            Converts the current matrix to a two-dimensional array.
            </summary>
            <returns>
            A two-dimensional array containing the entries of the matrix.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.ToString">
            <summary>
            Generates a string representation of the current object.
            </summary>
            <returns>
            A string representation for the current object.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.ToString(System.IFormatProvider)">
            <summary>
            Generates a string representation of the current object.
            </summary>
            <param name="provider">
            An object that supplies culture-specific formatting information.
            </param>
            <returns>
            A string representation for the current object.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.ToString(System.String)">
            <summary>
            Generates a string representation of the current object.
            </summary>
            <param name="format">
            A numeric format string.
            </param>
            <returns>
            A string representation for the current object.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified format string is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.ToString(System.String,System.IFormatProvider)">
            <summary>
            Generates a string representation of the current object.
            </summary>
            <param name="format">
            A numeric format string.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information.
            </param>
            <returns>
            A string representation for the current object.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified format string is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Trace">
            <summary>
            Returns the trace of the current matrix.
            </summary>
            <returns>
            The trace of the current matrix.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Transpose">
            <summary>
            Returns the transpose of the current matrix.
            </summary>
            <returns>
            A matrix that is the transpose of the current matrix.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the class to an XML writer.
            </summary>
            <param name="writer">
            The XML writer to serialize to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified XML writer is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Bvls(System.Double[0:,0:],System.Double[],System.Double[],System.Double[],System.Double[]@,System.Double@,System.Int32@,System.Double[]@,System.Int32[]@)">
            <summary>
            Solves a least squares problem with bounds on the variables: Given an M by N matrix A, and
            an M-vector B, computes an N-vector X, that solves the least-squares problem A * X = B
            subject to X[J] satisfying BL[J] &lt;= X[J] &lt;= BU[J].
            </summary>
            <param name="a">
            On entry, the M x N matrix A.  On return, the product matrix Q * A, where Q is an M x M
            orthogonal matrix generated by this routine.
            </param>
            <param name="b">
            On entry, the M-vector B.  On return, the product Q * B.  The same Q multiplies A.
            </param>
            <param name="bl">
            An N-vector containing the lower bounds for the components of X.  Use
            <see cref="F:System.Double.NegativeInfinity"/> to indicate no lower bound.
            </param>
            <param name="bu">
            An N-vector containing the upper bounds for the components of X.  Use
            <see cref="F:System.Double.PositiveInfinity"/> to indicate no upper bound.
            </param>
            <param name="x">
            On return, the solution N-vector X.
            </param>
            <param name="rnorm">
            On return, the Euclidean norm of the residual vector, B - A * X.
            </param>
            <param name="nsetp">
            On return, the number of components of the solution vector X, that are not at their
            constraint values.
            </param>
            <param name="w">
            On return, the dual solution N-vector.  It is defined as follows: W[J] = 0 for all J in the
            set P; W[J] &lt;= 0 for all J in set Z such that X[J] is at its lower bound; and W[J]
            &gt;= 0 for all J in set Z such that X[J] is at its upper bound. If BL[J] = BU[J], so that
            X[J] is fixed, then W[J] will have an arbitrary value.
            </param>
            <param name="index">
            On return, an integer array of size N defined as follows: INDEX[0] through INDEX[NSETP - 1]
            = the set P; INDEX[IZ1] through INDEX[IZ2] = the set Z; and INDEX[IZ2 + 1] through
            INDEX[N - 1] = the set F.  Any of these sets may be empty. Set F is those components of X
            that are constrained to a unique value by the given constraints. Sets P and Z are those
            that are allowed a non-zero range of values.  Of these, set Z are those whose final value
            is a constraint value, while set P are those whose final value is not a constraint. The
            value of IZ2 is not returned -- it is computable as the number of bounds constraining a
            component of X uniquely.
            </param>
            <remarks>
            <para>
            Based on the Fortran 90 routine BVLS by Charles Lawson &amp; Richard Hanson found here:
            http://people.math.sc.edu/Burkardt/f_src/bvls/bvls.html.
            </para>
            <para>
            See: Lawson, C. L., &amp; Hanson, R. J., Solving Least Squares Problems. SIAM, 1995.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the input arrays are a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if any of the input arrays are of incorrect size with respect to the matrix A.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the lower and upper bounds are inconsistent; i.e. if BL[J] > BU[J] for some J.
            </exception>
            <exception cref="T:System.ArithmeticException">
            Thrown if the maximum number of iterations is exceeded.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Lubksb(System.Double[0:,0:],System.Int32[],System.Double[])">
            <summary>
            Solves a system of linear equations Ax = b.
            </summary>
            <param name="a">
            The LU decomposition of the matrix A as returned by Ludcmp.
            </param>
            <param name="indx">
            The permutation vector returned by Ludcmp.
            </param>
            <param name="b">
            When this method is called, the right-hand vector b.  When this method returns, the
            solution vector x.
            </param>
            <remarks>
            For details see Section 2.3 of: Press, W.H., Teukolsky, S.A., Vetterling, W.T., and
            Flannery, B.P., (1992) Numerical Recipes in C, 2nd Edition, Cambridge University Press.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if any of the specified parameters is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Matrix.Ludcmp(System.Double[0:,0:],System.Int32[]@,System.Double@)">
            <summary>
            Generates the LU decomposition of a matrix.
            </summary>
            <param name="a">
            When this method is called, the matrix to be decomposed.  When this method returns, the LU
            decomposition of the matrix.
            </param>
            <param name="indx">
            When this method returns, a vector that records the row permutation effected by the partial
            pivoting.
            </param>
            <param name="d">
            When this method returns, either +1 or -1 depending on whether the number of row interchanges
            was even or odd respectively.
            </param>
            <remarks>
            This method is an implementation of Crout's algorithm.  For details see Section 2.3 of: Press, W.H.,
            Teukolsky, S.A., Vetterling, W.T., and Flannery, B.P., (1992) Numerical Recipes in C, 2nd Edition,
            Cambridge University Press.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified matrix is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified matrix is not a square matrix.
            </exception>
            <exception cref="T:System.DivideByZeroException">
            Thrown if the specified matrix is a singular matrix.
            </exception>
        </member>
        <member name="T:Simphony.Mathematics.DistributionChartType">
            <summary>
            An enumeration defining the types of Distributions that a DistributionBindingSource
            can generate.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.DistributionChartType.ProbabilityDensity">
            <summary>
            Generates a probability density function.
            </summary>
        </member>
        <member name="F:Simphony.Mathematics.DistributionChartType.CumulativeDensity">
            <summary>
            Generates a cumulative density function.
            </summary>
        </member>
        <member name="T:Simphony.Mathematics.SimplexOptimizer">
            <summary>
            An implementation of the downhill simplex method of nonlinear optimization of Nelder and Mead.
            </summary>
            <remarks>
            See Section 10.4 of Numerical Recipes in C for details of this algorithm.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.SimplexOptimizer.Maximize(System.Double[],System.Double,System.Double)">
            <summary>
            Maximizes the function defined by the current instance.
            </summary>
            <param name="guess">
            A vector containing an initial guess for the maximum.
            </param>
            <param name="lambda">
            A value giving a rough idea of the size of the starting simplex - see Section 10.4 of
            Numerical Recipes in C for details.
            </param>
            <param name="tolerance">
            The desired tolerance.
            </param>
            <returns>
            A vector at which the function defined by the current instance takes on a maximum value.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.SimplexOptimizer.Maximize(System.Double[],System.Double,System.Double,System.Double[]@)">
            <summary>
            Maximizes the function defined by the current instance.
            </summary>
            <param name="guess">
            A vector containing an initial guess for the maximum.
            </param>
            <param name="lambda">
            A value giving a rough idea of the size of the starting simplex - see Section 10.4 of
            Numerical Recipes in C for details.
            </param>
            <param name="tolerance">
            The desired tolerance.
            </param>
            <param name="result">
            When the method exits, a vector at which the function defined by the current instance takes
            on a maximum value.
            </param>
            <returns>
            True if the simplex converged; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.SimplexOptimizer.Minimize(System.Double[],System.Double,System.Double)">
            <summary>
            Minimizes the function defined by the current instance.
            </summary>
            <param name="guess">
            A vector containing an initial guess for the minimum.
            </param>
            <param name="lambda">
            A value giving a rough idea of the size of the starting simplex - see Section 10.4 of
            Numerical Recipes in C for details.
            </param>
            <param name="tolerance">
            The desired tolerance.
            </param>
            <returns>
            A vector at which the function defined by the current instance takes on a minimal value.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.SimplexOptimizer.Minimize(System.Double[],System.Double,System.Double,System.Double[]@)">
            <summary>
            Minimizes the function defined by the current instance.
            </summary>
            <param name="guess">
            A vector containing an initial guess for the minimum.
            </param>
            <param name="lambda">
            A value giving a rough idea of the size of the starting simplex - see Section 10.4 of
            Numerical Recipes in C for details.
            </param>
            <param name="tolerance">
            The desired tolerance.
            </param>
            <param name="result">
            When the method exits, a vector at which the function defined by the current instance takes
            on a minimal value.
            </param>
            <returns>
            True if the simplex converged; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.SimplexOptimizer.ObjectiveFunction(System.Double[])">
            <summary>
            Evaluates the function to be optimized.
            </summary>
            <param name="vector">
            The vector at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified vector if defined; otherwise Double.NaN.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.SimplexOptimizer.Amoeba(System.Double[][],System.Double[],System.Double,System.Func{System.Double[],System.Double})">
            <summary>
            Multidimensional minimization of a function from n-dimensional Euclidean space to the real
            line, by the downhill simplex method of Nelder and Mead.
            </summary>
            <param name="p">
            An n+1 x n dimensional matrix whose rows are the vertices of the starting simplex. When the
            method returns, all vertices of the simplex will be within the specified tolerance of a
            minimum function value.
            </param>
            <param name="y">
            An n+1 dimensional vector whose components have been pre-initialized to the values of the
            function at each of the vertices of the starting simplex. When the method returns, the
            components will be set to the values of the function at each of the vertices of the final
            simplex.
            </param>
            <param name="ftol">
            The fractional convergence tolerance to be achieved in the function value.
            </param>
            <param name="funk">
            The function to minimize.
            </param>
            <remarks>
            See Section 10.4 of Numerical Recipes in C.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.SimplexOptimizer.Minimize(System.Double[],System.Double,System.Double,System.Func{System.Double[],System.Double},System.Double[]@)">
            <summary>
            Minimizes the specified function.
            </summary>
            <param name="guess">
            A vector containing an initial guess for the minimum.
            </param>
            <param name="lambda">
            A value giving a rough idea of the size of the starting simplex - see Section 10.4 of
            Numerical Recipes in C for details.
            </param>
            <param name="tolerance">
            The desired tolerance.
            </param>
            <param name="objectiveFunction">
            The function to minimize.
            </param>
            <param name="result">
            When the method exits, a vector at which the function takes on a minimal value.
            </param>
            <returns>
            True if the simplex converged; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.SimplexOptimizer.MaximizeFunction(System.Double[])">
            <summary>
            Evaluates the objective function in order to maximize it.
            </summary>
            <param name="vector">
            The vector at which to evaluate the function.
            </param>
            <returns>
            The negated value of the function at the specified vector if defined; otherwise positive
            infinity.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.SimplexOptimizer.MinimizeFunction(System.Double[])">
            <summary>
            Evaluates the objective function in order to minimize it.
            </summary>
            <param name="vector">
            The vector at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified vector if defined; otherwise positive infinity.
            </returns>
        </member>
        <member name="T:Simphony.Mathematics.DistributionConverter">
            <summary>
            A type converter for probability distributions.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.CanConvertFromString(System.String)">
            <summary>
            Determines if a specified string represents a valid distribution.
            </summary>
            <param name="text">
            The string to test.
            </param>
            <returns>
            True if the specified string represents a valid distribution; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.TryConvertFromString(System.String,Simphony.Mathematics.Distribution@)">
            <summary>
            Attempts to convert a string representation of a probability distribution to a
            <see cref="T:Simphony.Mathematics.Distribution"/>. A return value indicates whether the conversion succeeded or
            failed.
            </summary>
            <param name="text">
            The text to convert.
            </param>
            <param name="distribution">
            When the method returns, the <see cref="T:Simphony.Mathematics.Distribution"/> equivalent to the specified text;
            or a null reference if the conversion failed.
            </param>
            <returns>
            True if the conversion was successful; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.TryConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String,Simphony.Mathematics.Distribution@)">
            <summary>
            Attempts to convert a string representation of a probability distribution to a
            <see cref="T:Simphony.Mathematics.Distribution"/>. A return value indicates whether the conversion succeeded or
            failed.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="text">
            The text to convert.
            </param>
            <param name="distribution">
            When the method returns, the <see cref="T:Simphony.Mathematics.Distribution"/> equivalent to the specified text;
            or a null reference if the conversion failed.
            </param>
            <returns>
            True if the conversion was successful; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.TryConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String,Simphony.Mathematics.Distribution@)">
            <summary>
            Attempts to convert a string representation of a probability distribution to a
            <see cref="T:Simphony.Mathematics.Distribution"/>. A return value indicates whether the conversion succeeded or
            failed.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.
            </param>
            <param name="text">
            The text to convert.
            </param>
            <param name="distribution">
            When the method returns, the <see cref="T:Simphony.Mathematics.Distribution"/> equivalent to the specified text;
            or a null reference if the conversion failed.
            </param>
            <returns>
            True if the conversion was successful; otherwise, false.
            </returns>
        </member>
        <member name="T:Simphony.Mathematics.DistributionConverter.InfoPropertyDescriptor">
            <summary>
            A custom property descriptor that represents the type property of a distribution.
            </summary>
        </member>
        <member name="P:Simphony.Mathematics.DistributionConverter.InfoPropertyDescriptor.Category">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DistributionConverter.InfoPropertyDescriptor.ComponentType">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DistributionConverter.InfoPropertyDescriptor.Converter">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DistributionConverter.InfoPropertyDescriptor.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DistributionConverter.InfoPropertyDescriptor.PropertyType">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.InfoPropertyDescriptor.CanResetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.InfoPropertyDescriptor.GetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.InfoPropertyDescriptor.ResetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.InfoPropertyDescriptor.SetValue(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.InfoPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.DistributionConverter.InfoTypeConverter">
            <summary>
            This custom type converter is used to make the entries in the property grid uneditable.
            The property grid ignores the IsReadOnly property when the GetCreateInstanceSupported()
            method returns true and it does not appear to be possible to alter this behaviour. It
            also does not appear possible to get the property grid to render the cell as grayed-out
            in this case.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.InfoTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.DistributionConverter.ParameterPropertyDescriptor">
            <summary>
            A custom property descriptor that wraps a parameter of a distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.ParameterPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.DistributionConverter.ParameterPropertyDescriptor"/> class.
            </summary>
            <param name="propertyDescriptor">
            The property descriptor of the parameter to be wrapped.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified property descriptor is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.DistributionConverter.ParameterPropertyDescriptor.Category">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.DistributionConverter.TypePropertyDescriptor">
            <summary>
            A custom property descriptor that represents the type property of a distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.TypePropertyDescriptor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.DistributionConverter.TypePropertyDescriptor"/> class.
            </summary>
            <param name="componentType">
            The type of the component this property is bound to.
            </param>
        </member>
        <member name="P:Simphony.Mathematics.DistributionConverter.TypePropertyDescriptor.Attributes">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DistributionConverter.TypePropertyDescriptor.Category">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DistributionConverter.TypePropertyDescriptor.ComponentType">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DistributionConverter.TypePropertyDescriptor.Description">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DistributionConverter.TypePropertyDescriptor.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.DistributionConverter.TypePropertyDescriptor.PropertyType">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.TypePropertyDescriptor.CanResetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.TypePropertyDescriptor.GetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.TypePropertyDescriptor.ResetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.TypePropertyDescriptor.SetValue(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.DistributionConverter.TypePropertyDescriptor.ShouldSerializeValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Mathematics.Beta">
            <summary>
            Represents a beta distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Beta.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Beta"/> class with default parameter values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Beta.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Beta"/> class with a lower bound of 0 and an
            upper bound of 1.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Beta"/> class.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="low">
            The lower bound of the beta distribution.
            </param>
            <param name="high">
            The upper bound of the beta distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Beta.IsStandard">
            <summary>
            Gets a value indicating whether the current beta distribution is a standard (two parameter)
            beta distribution.
            </summary>
            <value>
            True if the current beta distribution is a standard (two parameter) beta distribution;
            otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Beta.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Beta.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Beta.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Beta.Shape1">
            <summary>
            Gets or sets the first shape parameter of the distribution.
            </summary>
            <value>
            The first shape parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Beta.Shape2">
            <summary>
            Gets or sets the second shape parameter of the distribution.
            </summary>
            <value>
            The second shape parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Beta.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Beta.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Beta.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified beta distribution with a
            lower bound of 0 and an upper bound of 1 at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.CumulativeDistributionFunction(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified beta distribution at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="low">
            The lower bound of the beta distribution.
            </param>
            <param name="high">
            The upper bound of the beta distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a four parameter beta distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A beta distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double)">
            <summary>
            Fits a beta distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <param name="low">
            A fixed lower bound for the fitted distribution.
            </param>
            <param name="high">
            A fixed upper bound for the fitted distribution.
            </param>
            <returns>
            A beta distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Fits a beta distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <param name="parameterCount">
            The number of parameters of the beta distribution to fit. The only valid values are 2 or 4.
            </param>
            <returns>
            A beta distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of parameters is not 2 or 4.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty or if 2 parameters are specified and the data
            contains values outside the range 0 to 1.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a four parameter beta distribution to a set of data using the maximum likelihood
            method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A beta distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double)">
            <summary>
            Fits a beta distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <param name="low">
            A fixed lower bound for the fitted distribution.
            </param>
            <param name="high">
            A fixed upper bound for the fitted distribution.
            </param>
            <returns>
            A beta distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Fits a beta distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <param name="parameterCount">
            The number of parameters of the beta distribution to fit. The only valid values are 2 or 4.
            </param>
            <returns>
            A beta distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of parameters is not 2 or 4.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty or if 2 parameters are specified and the data
            contains values outside the range 0 to 1.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a four parameter beta distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A four parameter beta distribution fitted to the specified data using the method of
            moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double)">
            <summary>
            Fits a beta distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <param name="low">
            A fixed lower bound for the fitted distribution.
            </param>
            <param name="high">
            A fixed upper bound for the fitted distribution.
            </param>
            <returns>
            A four parameter beta distribution fitted to the specified data using the method of
            moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty, or if the data contains values outside the
            range specified by the <paramref name="low"/> and <paramref name="high"/> parameters.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Fits a beta distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <param name="parameterCount">
            The number of parameters of the beta distribution to fit. The only valid values are 2 or 4.
            </param>
            <returns>
            A beta distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of parameters is not 2 or 4.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty or if 2 parameters are specified and the data
            contains values outside the range 0 to 1.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.ProbabilityDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified beta distribution with a
            lower bound of 0 and an upper bound of 1 at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.ProbabilityDensityFunction(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability density function of a specified beta distribution at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="low">
            The lower bound of the beta distribution.
            </param>
            <param name="high">
            The upper bound of the beta distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.QuantileFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified beta distribution with a lower bound of 0 and
            an upper bound of 1 at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.QuantileFunction(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified beta distribution at a specified point.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="low">
            The lower bound of the beta distribution.
            </param>
            <param name="high">
            The upper bound of the beta distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.Sample(System.Double,System.Double)">
            <summary>
            Samples a specified beta distribution with a lower bound of 0 and an upper bound of 1.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.Sample(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Samples a specified beta distribution.
            </summary>
            <param name="shape1">
            The first shape parameter of the distribution.
            </param>
            <param name="shape2">
            The second shape parameter of the distribution.
            </param>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Beta.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Beta.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Beta.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Beta.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Beta.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Beta.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Beta.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Beta.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Beta.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Beta.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Beta.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified beta distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Beta.ProbabilityDensityFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the probability density function of a specified beta distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the maximum likelihood fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Beta.RandomB(System.Double,System.Double)">
            <summary>
            Samples a beta distribution with the specified shape parameters.
            </summary>
            <param name="aa">
            The first shape parameter of the distribution.
            </param>
            <param name="bb">
            The second shape parameter of the distribution.
            </param>
            <returns>
            A random variate from a beta distribution with the specified shape parameters.
            </returns>
            <remarks>
            See: Cheng, R. C. H. Generating beta variates with non-integral shape parameters.
            Communications of the ACM, 21, 317-322.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.Cauchy">
            <summary>
            Represents a Cauchy distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Cauchy"/> class with default parameter values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Cauchy"/> class with a scale parameter of 1.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameter is not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Cauchy"/> class.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Cauchy.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Cauchy.Location">
            <summary>
            Gets or sets the location parameter of the distribution.
            </summary>
            <value>
            The location parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Cauchy.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Cauchy.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Cauchy.Median">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Cauchy.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Cauchy.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Cauchy.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Cauchy.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Cauchy.Scale">
            <summary>
            Gets or sets the scale parameter of the distribution.
            </summary>
            <value>
            The scale parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Cauchy.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Cauchy.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified Cauchy distribution at a specified point.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Cauchy distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Cauchy distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Cauchy distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Cauchy distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.ProbabilityDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified Cauchy distribution at a specified point.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.QuantileFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified Cauchy distribution at a specified point.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.Sample(System.Double,System.Double)">
            <summary>
            Samples a specified Cauchy distribution.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified gamma distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.InitialGuess(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a triangular distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A triangular distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Cauchy.ProbabilityDensityFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the probability density function of a specified gamma distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the maximum likelihood fitting method.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.ChiSquare">
            <summary>
            Represents a chi-square distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.ChiSquare"/> class with default parameter
            values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.ChiSquare"/> class.
            </summary>
            <param name="freedom">
            The degrees of freedom of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.ChiSquare.Freedom">
            <summary>
            Gets or sets the degrees of freedom of the distribution.
            </summary>
            <value>
            The degrees of freedom of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.ChiSquare.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.ChiSquare.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.ChiSquare.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.ChiSquare.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.ChiSquare.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.ChiSquare.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.ChiSquare.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.ChiSquare.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.ChiSquare.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.CumulativeDistributionFunction(System.Int32,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified chi-square distribution at a specified point.
            </summary>
            <param name="freedom">
            The degrees of freedom of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a chi-square distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            An chi-square distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a chi-square distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            An chi-square distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a chi-square distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            An chi-square distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.ProbabilityDensityFunction(System.Int32,System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified chi-square distribution at a specified point.
            </summary>
            <param name="freedom">
            The degrees of freedom of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.QuantileFunction(System.Int32,System.Double)">
            <summary>
            Evaluates the quantile function of a specified chi-square distribution at a specified point.
            </summary>
            <param name="freedom">
            The degrees of freedom of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.Sample(System.Int32)">
            <summary>
            Samples a specified chi-square distribution.
            </summary>
            <param name="freedom">
            The degrees of freedom of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified gamma distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.ChiSquare.ProbabilityDensityFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the probability density function of a specified gamma distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the maximum likelihood fitting method.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.Constant">
            <summary>
            Represents a continuous constant distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Constant.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Constant"/> class with default parameter values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Constant.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Constant"/> class.
            </summary>
            <param name="value">
            The value of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Constant.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Constant.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Constant.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Constant.Median">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Constant.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Constant.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Constant.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Constant.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Constant.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Constant.Value">
            <summary>
            Gets or sets the value of the distribution.
            </summary>
            <value>
            The value of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Constant.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Constant.CumulativeDistributionFunction(System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified constant distribution at a specified point.
            </summary>
            <param name="value">
            The value of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Constant.ProbabilityDensityFunction(System.Double,System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified constant distribution at a specified point.
            </summary>
            <param name="value">
            The value of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Constant.QuantileFunction(System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified constant distribution at a specified point.
            </summary>
            <param name="value">
            The value of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Constant.Sample(System.Double)">
            <summary>
            Samples a specified constant distribution.
            </summary>
            <param name="value">
            The value of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Constant.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Constant.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Constant.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Constant.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Constant.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Constant.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Constant.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Constant.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Constant.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Constant.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Constant.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified gamma distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.Distribution">
            <summary>
            Abstract base class for probability distributions.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Distribution"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Mathematics.Distribution.CanSampleNegative">
            <summary>
            Gets a value indicating whether or not a negative value could be sampled from the distribution.
            </summary>
            <value>
            True if it is possible to sample a negative value; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Distribution.CanSampleZero">
            <summary>
            Gets a value indicating whether or not zero could be sampled from the distribution.
            </summary>
            <value>
            True if it is possible to sample zero; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Distribution.FittingData">
            <summary>
            Gets the data that was used to fit the distribution.
            </summary>
            <value>
            An array data that was used to fit the distribution; or a null reference
            if the distribution was not fit to data.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Distribution.Kurtosis">
            <summary>
            Gets the kurtosis of the distribution.
            </summary>
            <value>
            The kurtosis of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Distribution.Maximum">
            <summary>
            Gets an upper bound on the distribution.
            </summary>
            <value>
            An upper bound on the distribution; or positive infinity if the distribution is unbounded.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Distribution.Mean">
            <summary>
            Gets or sets the mean of the distribution.
            </summary>
            <value>
            The mean of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Distribution.Minimum">
            <summary>
            Gets a lower bound on the distribution.
            </summary>
            <value>
            A lower bound on the distribution; or negative infinity if the distribution is unbounded.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Distribution.ParameterCount">
            <summary>
            Gets the number of parameters for the distribution.
            </summary>
            <value>
            The number of parameters for the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Distribution.PlottingMaximum">
            <summary>
            Gets an upper bound on the distribution for plotting purposes.
            </summary>
            <value>
            An upper bound on the distribution for plotting purposes.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Distribution.PlottingMinimum">
            <summary>
            Gets a lower bound on the distribution for plotting purposes.
            </summary>
            <value>
            A lower bound on the distribution for plotting purposes.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Distribution.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
            <value>
            The skewness of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Distribution.StandardDeviation">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
            <value>
            The standard deviation of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Distribution.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
            <value>
            The variance of the distribution.
            </value>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.GetDistributionType(System.String)">
            <summary>
            Gets a distribution <see cref="T:System.Type"/> from a distribution name.
            </summary>
            <param name="name">
            The distribution name.
            </param>
            <returns>
            The <see cref="T:System.Type"/> representing the distribution; or a null reference if the
            specified distribution is not supported.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified name is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.GetParameterCount(System.Type)">
            <summary>
            Gets the number of parameters of a specified type of distribution.
            </summary>
            <param name="type">
            The type of distribution.
            </param>
            <returns>
            The number of parameters of the specified type of distribution.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified type does not derive from <see cref="T:Simphony.Mathematics.Distribution"/>.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.RestoreState(System.Byte[])">
            <summary>
            Restores the state of the random number generator.
            </summary>
            <param name="state">
            A byte array containing a previously saved state.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.SaveState">
            <summary>
            Saves the current state of the random number generator.
            </summary>
            <returns>
            A byte array representing the current state of the random number generator.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.Seed">
            <summary>
            Seeds the random number generator using a time-dependent seed value.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.Seed(System.Int32)">
            <summary>
            Seeds the random number generator using a specified seed value.
            </summary>
            <param name="seed">
            The seed with which to seed the random number generator.
            </param>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.CalcSumOfSquares(System.Double[])">
            <summary>
            Calculates the sum-of-squares difference between this distribution and the given data.
            </summary>
            <param name="data">
            Data to be compared to.
            </param>
            <returns>
            The sum-of-squares difference.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.ChiSquaredTest(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Double)">
            <summary>
            Uses Pearson's chi-square test to assess the goodness of fit between the current
            distribution and a specified collection of data grouped into a specified number of bins.
            </summary>
            <param name="data">
            A collection containing the data to test against the current distribution.
            </param>
            <param name="k">
            The number of bins into which the data should be grouped.
            </param>
            <param name="alpha">
            The significance level of the test.
            </param>
            <returns>
            True if the null hypothesis is not rejected at the significance level of alpha (i.e. the
            data passes the test); otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of bins is less than 2.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.ChiSquaredTest(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Double,System.Double@)">
            <summary>
            Uses Pearson's chi-square test to assess the goodness of fit between the current
            distribution and a specified collection of data grouped into a specified number of bins.
            </summary>
            <param name="data">
            A collection containing the data to test against the current distribution.
            </param>
            <param name="k">
            The number of bins into which the data should be grouped.
            </param>
            <param name="alpha">
            The significance level of the test.
            </param>
            <param name="testStatistic">
            When the method returns, the value of the test statistic.
            </param>
            <returns>
            True if the null hypothesis is not rejected at the significance level of alpha (i.e. the
            data passes the test); otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of bins is less than 2.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.ChiSquaredTest(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Double,System.Double@,System.Double@)">
            <summary>
            Uses Pearson's chi-square test to assess the goodness of fit between the current
            distribution and a specified collection of data grouped into a specified number of bins.
            </summary>
            <param name="data">
            A collection containing the data to test against the current distribution.
            </param>
            <param name="k">
            The number of bins into which the data should be grouped.
            </param>
            <param name="alpha">
            The significance level of the test.
            </param>
            <param name="testStatistic">
            When the method returns, the value of the test statistic.
            </param>
            <param name="criticalValue">
            When the method returns, the critical value for the test.
            </param>
            <returns>
            True if the null hypothesis is not rejected at the significance level of alpha (i.e. the
            data passes the test); otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified number of bins is less than 2.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.Clone">
            <summary>
            Creates a deep copy of the current distribution.
            </summary>
            <returns>
            A deep copy of the current distribution.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.CumulativeDistributionFunction(System.Double)">
            <summary>
            Evaluates the distribution's cumulative distribution function at a specified point.
            </summary>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.GetParameterName(System.Int32)">
            <summary>
            Returns the name of the parameter with the specified index.
            </summary>
            <param name="index">
            The index of the parameter.
            </param>
            <returns>
            The name of the parameter.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.GetParameters">
            <summary>
            Gets an array containing the parameters of the distribution.
            </summary>
            <returns>
            An array containing the parameters of the distribution.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.GetParameterValue(System.Int32)">
            <summary>
            Returns the value of the parameter with the specified index.
            </summary>
            <param name="index">
            The index of the parameter.
            </param>
            <returns>
            The value of the parameter.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.LogProbabilityDensityFunction(System.Double)">
            <summary>
            Evaluates the natural logorithm of the distribution's probability density function at a
            specified point.
            </summary>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The natural logorithm of the distribution's probability density function at the specified
            point.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.ProbabilityDensityFunction(System.Double)">
            <summary>
            Evaluates the distribution's probability density function at a specified point.
            </summary>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.QuantileFunction(System.Double)">
            <summary>
            Evaluates the distribution's quantile function at a specified point.
            </summary>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the class from an XML reader.
            </summary>
            <param name="reader">
            The XML reader to deserialize from.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified XML reader is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.Sample">
            <summary>
            Samples the current distribution.
            </summary>
            <returns>
            A random variate sampled from the current distribution.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.Transform(System.Double)">
            <summary>
            Returns a new distribution that represents the current distribution transformed
            by a specified scale factor.
            </summary>
            <param name="scale">
            The scale factor by which to transform the current distribution.
            </param>
            <returns>
            A new distribution that represents the current distribution transformed by the
            specified scale factor.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified scale factor is negative, zero, infinite, or NaN.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the class to an XML writer.
            </summary>
            <param name="writer">
            The XML writer to serialize to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified XML writer is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.EmpiricalDistributionFunction(System.Double)">
            <summary>
            Evaluates the empirical distribution function of the data used to fit the distribution.
            </summary>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.Random(System.Int32,System.Int32)">
            <summary>
            Samples a discrete uniform distribution.
            </summary>
            <param name="minValue">
            The lower bound of the uniform distribution.
            </param>
            <param name="maxValue">
            The upper bound of the uniform distribution.
            </param>
            <returns>
            A random variate sampled from the specified discrete uniform distribution.
            </returns>
        </member>
        <member name="M:Simphony.Mathematics.Distribution.RandomF">
            <summary>
            Samples a continuous uniform distribution with lower bound 0 and upper bound 1.
            </summary>
            <returns>
            A random variate sampled from a continuous uniform distribution with lower
            bound 0 and upper bound 1.
            </returns>
        </member>
        <member name="T:Simphony.Mathematics.Exponential">
            <summary>
            Represents an exponential distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Exponential"/> class with default parameter
            values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Exponential"/> class.
            </summary>
            <param name="mean">
            The mean of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Exponential.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Exponential.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Exponential.Mean">
            <summary>
            Gets or sets the mean of the distribution.
            </summary>
            <value>
            The mean of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Exponential.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Exponential.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Exponential.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Exponential.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Exponential.Rate">
            <summary>
            Gets the rate of the exponential distribution.
            </summary>
        </member>
        <member name="P:Simphony.Mathematics.Exponential.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Exponential.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.CumulativeDistributionFunction(System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified exponential distribution at a specified point.
            </summary>
            <param name="mean">
            The mean of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits an exponential distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            An exponential distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits an exponential distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            An exponential distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits an exponential distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            An exponential distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.ProbabilityDensityFunction(System.Double,System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified exponential distribution at a specified point.
            </summary>
            <param name="mean">
            The mean of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.QuantileFunction(System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified exponential distribution at a specified point.
            </summary>
            <param name="mean">
            The mean of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.Sample(System.Double)">
            <summary>
            Samples a specified exponential distribution.
            </summary>
            <param name="mean">
            The mean of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified beta distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.ProbabilityDensityFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the probability density function of a specified beta distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the maximum likelihood fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Exponential.RandomE">
            <summary>
            Samples an exponential distribution with mean 1.
            </summary>
            <returns>
            A random variate from an exponential distribution with mean 1.
            </returns>
            <remarks>
            See: Ahrens, J. H., &amp; Dieter, U. Computer methods for sampling from the exponential
            and normal distributions. Communications of the ACM, 15, 873-882.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.Gamma">
            <summary>
            Represents a gamma distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Gamma"/> class with default parameter values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Gamma"/> class with a scale parameter of 1.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameter is not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Gamma"/> class.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Gamma.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Gamma.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Gamma.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Gamma.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Gamma.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Gamma.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Gamma.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Gamma.Rate">
            <summary>
            Gets the rate of the gamma distribution.
            </summary>
        </member>
        <member name="P:Simphony.Mathematics.Gamma.Scale">
            <summary>
            Gets or sets the scale parameter of the distribution.
            </summary>
            <value>
            The scale parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Gamma.Shape">
            <summary>
            Gets or sets the shape parameter of the distribution.
            </summary>
            <value>
            The shape parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Gamma.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Gamma.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified gamma distribution at a specified point.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a gamma distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A gamma distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a gamma distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A gamma distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a gamma distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A gamma distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.ProbabilityDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified gamma distribution at a specified point.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.QuantileFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified gamma distribution at a specified point.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.Sample(System.Double,System.Double)">
            <summary>
            Samples a specified gamma distribution.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified gamma distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.ProbabilityDensityFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the probability density function of a specified gamma distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the maximum likelihood fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Gamma.RandomG(System.Double)">
            <summary>
            Samples a gamma distribution with the specified shape factor and a scale of 1.
            </summary>
            <param name="a">
            The shape factor.
            </param>
            <returns>
            A random variate from a gamma distribution with the specified shape factor and a scale of 1.
            </returns>
            <remarks>
            <para>
            For shape factors &lt; 1, see algorithm GS in: Ahrens, J. H., &amp; Dieter, U. Computer methods
            for sampling from gamma, scale, Poisson and binomial distributions. Computing, 12, 223-246.
            </para>
            <para>
            For other shape factors, see algorithm GD in: Ahrens, J. H., &amp; Dieter, U. Generating gamma
            variates by a modified rejection technique. Communications of the ACM, 25, 47-54.
            </para>
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.Laplace">
            <summary>
            Represents a Laplace distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Laplace"/> class with default parameter
            values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Laplace"/> class with a scale parameter of 1.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameter is not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Laplace"/> class.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Laplace.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Laplace.Location">
            <summary>
            Gets or sets the location parameter of the distribution.
            </summary>
            <value>
            The location parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Laplace.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Laplace.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Laplace.Median">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Laplace.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Laplace.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Laplace.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Laplace.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Laplace.Scale">
            <summary>
            Gets or sets the scale parameter of the distribution.
            </summary>
            <value>
            The scale parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Laplace.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Laplace.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified Laplace distribution at a specified point.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Laplace distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Laplace distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Laplace distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Laplace distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Laplace distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A Laplace distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.ProbabilityDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified Laplace distribution at a
            specified point.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.QuantileFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified Laplace distribution at a specified point.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0
            to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.Sample(System.Double,System.Double)">
            <summary>
            Samples a specified Laplace distribution.
            </summary>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified gamma distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Laplace.ProbabilityDensityFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the probability density function of a specified gamma distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the maximum likelihood fitting method.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.LogNormal">
            <summary>
            Represents a log-normal distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.LogNormal"/> class with the standard
            parameters.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.LogNormal"/> class.
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.LogNormal.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogNormal.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogNormal.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogNormal.Median">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogNormal.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogNormal.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogNormal.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogNormal.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogNormal.Scale">
            <summary>
            Gets or sets the scale parameter of the distribution.
            </summary>
            <value>
            The scale parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.LogNormal.Shape">
            <summary>
            Gets or sets the shape parameter of the distribution.
            </summary>
            <value>
            The shape parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.LogNormal.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.LogNormal.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified log-normal distribution at a specified point.
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a log-normal distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A log-normal distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a log-normal distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A log-normal distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a log-normal distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A log-normal distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.ProbabilityDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability density function of a specified log-normal distribution at a specified point.
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.QuantileFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified log-normal distribution at a specified point.
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.Sample(System.Double,System.Double)">
            <summary>
            Samples a specified log-normal distribution.
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.LogNormal.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified normal distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.Normal">
            <summary>
            Represents a normal distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Normal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Normal"/> class with the standard parameters.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Normal.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Normal"/> class.
            </summary>
            <param name="mean">
            The mean of the normal distribution.
            </param>
            <param name="standardDeviation">
            The standard deviation of the normal distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Normal.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Normal.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Normal.Mean">
            <inheritdoc cref="P:Simphony.Mathematics.Distribution.Mean"/>
        </member>
        <member name="P:Simphony.Mathematics.Normal.Median">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Normal.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Normal.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Normal.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Normal.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Normal.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Normal.StandardDeviation">
            <summary>
            Gets or sets the standard deviation of the distribution.
            </summary>
            <value>
            The standard deviation of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Normal.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Normal.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified normal distribution at a specified point.
            </summary>
            <param name="mean">
            Mean of the normal distribution.
            </param>
            <param name="standardDeviation">
            Standard deviation of the normal distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Normal.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a normal distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A normal distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Normal.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a normal distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A normal distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Normal.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a normal distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A normal distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Normal.ProbabilityDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability density function of a specified normal distribution at a specified point.
            </summary>
            <param name="mean">
            Mean of the normal distribution.
            </param>
            <param name="standardDeviation">
            Standard deviation of the normal distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Normal.QuantileFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified normal distribution at a specified point.
            </summary>
            <param name="mean">
            Mean of the normal distribution.
            </param>
            <param name="standardDeviation">
            Standard deviation of the normal distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Normal.Sample(System.Double,System.Double)">
            <summary>
            Samples a specified normal distribution.
            </summary>
            <param name="mean">
            The mean of the normal distribution.
            </param>
            <param name="standardDeviation">
            The standard deviation of the normal distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Normal.BayesianUpdateTae(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Generates a new distribution that represents the prior (current) distribution updated
            with new data using Bayesian techniques.
            </summary>
            <param name="data">
            A collection containing the new data.
            </param>
            <returns>
            The posterior distribution.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
            <remarks>
            See: Chung, T. H., Mohamed, Y., AbouRizk, S. M., Bayesian Updating Application into
            Simulation in the North Edmonton Sanitary Trunk Tunnel Project. Journal of
            Construction Engineering and Management 132, 8 (Aug 2006), 882-894.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Normal.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Normal.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Normal.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Normal.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Normal.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Normal.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Normal.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Normal.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Normal.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Normal.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Normal.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified normal distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Normal.RandomN">
            <summary>
            Samples a normal distribution with mean 0 and standard deviation 1.
            </summary>
            <returns>
            A random variate from a normal distribution with mean 0 and standard deviation 1.
            </returns>
            <remarks>
            See: Box, G. E. P. &amp; Muller, M. E., A Note on the Generation of Random Normal
            Deviates. The Annals of Mathematical Statistics, 29(2), 610-611.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.Triangular">
            <summary>
            Represents a triangular distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Triangular"/> class with default parameter
            values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Triangular"/> class.
            </summary>
            <param name="low">
            The lower bound of the triangular distribution.
            </param>
            <param name="high">
            The upper bound of the triangular distribution.
            </param>
            <param name="mode">
            The mode of the triangular distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Triangular.High">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Triangular.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Triangular.Low">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Triangular.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Triangular.Mode">
            <summary>
            Gets or sets the mode of the distribution.
            </summary>
            <value>
            The mode of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Triangular.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Triangular.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Triangular.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.CumulativeDistributionFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified triangular distribution at a specified point.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <param name="mode">
            The mode of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a triangular distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A triangular distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a triangular distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A triangular distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a triangular distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A triangular distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.ProbabilityDensityFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified triangular distribution at a specified point.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <param name="mode">
            The mode of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.QuantileFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified uniform distribution at a specified point.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <param name="mode">
            The mode of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.Sample(System.Double,System.Double,System.Double)">
            <summary>
            Samples a specified triangular distribution.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <param name="mode">
            The mode of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified gamma distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.InitialGuess(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a triangular distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A triangular distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Triangular.ProbabilityDensityFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the probability density function of a specified gamma distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the maximum likelihood fitting method.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.Uniform">
            <summary>
            Represents a continuous uniform distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Uniform"/> class with default parameter
            values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Uniform"/> class.
            </summary>
            <param name="low">
            The lower bound of the uniform distribution.
            </param>
            <param name="high">
            The upper bound of the uniform distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Uniform.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Uniform.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Uniform.Median">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Uniform.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Uniform.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Uniform.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified uniform distribution at a specified point.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a uniform distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A uniform distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a uniform distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A uniform distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a uniform distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A uniform distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.ProbabilityDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified uniform distribution at a specified point.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.QuantileFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified uniform distribution at a specified point.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0 to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.Sample(System.Double,System.Double)">
            <summary>
            Samples a specified uniform distribution.
            </summary>
            <param name="low">
            The lower bound of the distribution.
            </param>
            <param name="high">
            The upper bound of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Uniform.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified gamma distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="T:Simphony.Mathematics.Weibull">
            <summary>
            Represents a Weibull distribution.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Weibull"/> class with default parameter
            values.
            </summary>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Weibull"/> class with a scale parameter of 1.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameter is not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Weibull"/> class.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Mathematics.Weibull"/> class.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="P:Simphony.Mathematics.Weibull.Kurtosis">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Weibull.Location">
            <summary>
            Gets or sets the location parameter of the distribution.
            </summary>
            <value>
            The location parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Weibull.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Weibull.Mean">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Weibull.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Weibull.ParameterCount">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Weibull.PlottingMaximum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Weibull.PlottingMinimum">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Weibull.Scale">
            <summary>
            Gets or sets the scale parameter of the distribution.
            </summary>
            <value>
            The scale parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Weibull.Shape">
            <summary>
            Gets or sets the shape parameter of the distribution.
            </summary>
            <value>
            The shape parameter of the distribution.
            </value>
        </member>
        <member name="P:Simphony.Mathematics.Weibull.Skewness">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Mathematics.Weibull.Variance">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.CumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified Weibull distribution at a
            specified point.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.CumulativeDistributionFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified Weibull distribution at a
            specified point.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.LeastSquaresFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Weibull distribution to a set of data using the least squares method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A gamma distribution fitted to the specified data using the least squares method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.MaximumLikelihoodFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Weibull distribution to a set of data using the maximum likelihood method.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A gamma distribution fitted to the specified data using the maximum likelihood method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.MomentMatchingFit(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Fits a Weibull distribution to a set of data using the method of moments.
            </summary>
            <param name="data">
            A collection containing the data.
            </param>
            <returns>
            A gamma distribution fitted to the specified data using the method of moments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified collection is empty.
            </exception>
            <remarks>
            See <see cref="!:https://www.real-statistics.com/distribution-fitting/method-of-moments/method-of-moments-weibull/"/>.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.ProbabilityDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified Weibull distribution at a
            specified point.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.ProbabilityDensityFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the probability distribution function of a specified Weibull distribution at a
            specified point.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.QuantileFunction(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified Weibull distribution at a specified point.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0
            to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.QuantileFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the quantile function of a specified Weibull distribution at a specified point.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <param name="y">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point; or Double.NaN if y is outside the range 0
            to 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.Sample(System.Double,System.Double)">
            <summary>
            Samples a specified Weibull distribution.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.Sample(System.Double,System.Double,System.Double)">
            <summary>
            Samples a specified Weibull distribution.
            </summary>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="location">
            The location parameter of the distribution.
            </param>
            <returns>
            A random variate sampled from the specified distribution.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.CumulativeDistributionFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.GetParameterName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.GetParameterValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.ProbabilityDensityFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.QuantileFunction(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.Sample">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.Transform(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.CumulativeDistributionFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the cumulative distribution function of a specified beta distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the least squares fitting method.
            </remarks>
        </member>
        <member name="M:Simphony.Mathematics.Weibull.ProbabilityDensityFunction(System.Double[],System.Double)">
            <summary>
            Evaluates the probability density function of a specified beta distribution at a specified point.
            </summary>
            <param name="parameters">
            An array containing the parameters of the distribution.
            </param>
            <param name="x">
            The point at which to evaluate the function.
            </param>
            <returns>
            The value of the function at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array does not contain the correct number of parameters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified parameters are not within the allowable range of the distribution.
            </exception>
            <remarks>
            This method is intended to support the maximum likelihood fitting method.
            </remarks>
        </member>
        <member name="T:Simphony.HierarchyHelper">
            <summary>
            Helper class for dealing with objects that implement the <see cref="T:Simphony.Collections.IChild`1"/> and
            <see cref="T:Simphony.Collections.IParent`1"/> interfaces.
            </summary>
        </member>
        <member name="M:Simphony.HierarchyHelper.CanBeChild(System.Object,System.Object)">
            <summary>
            Determines whether a specified object can be the child of another object.
            </summary>
            <param name="parent">
            The parent object.
            </param>
            <param name="child">
            The potential child object.
            </param>
            <returns>
            True is the specified child object can be a child of the specified parent object;
            otherwise, false.
            </returns>
            <remarks>
            This method only checks if the data types are compatible, it does not check for a potential
            paradox (i.e. a child belonging to a tree descending from itself).
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the either of the specified objects is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.HierarchyHelper.GetChildren(System.Object)">
            <summary>
            Gets a sequence containing the children of a specified object.
            </summary>
            <param name="parent">
            The object whose children are to be retrieved.
            </param>
            <returns>
            A sequence containing the children of the specified object if the object implements the
            <see cref="T:Simphony.Collections.IChild`1"/> interface; otherwise, an empty sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.HierarchyHelper.GetParent(System.Object)">
            <summary>
            Gets the parent of a specified object.
            </summary>
            <param name="child">
            The object whose parent is to be retrieved.
            </param>
            <returns>
            The parent of the specified object if the object implements the <see cref="T:Simphony.Collections.IParent`1"/>
            interface and has a parent; otherwise, a null reference.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.HierarchyHelper.GetPermittedChildTypes(System.Object)">
            <summary>
            Gets a sequence containing the permissible types of children the currently a specified
            object may have. The search is limited to the assembly to which the specified object
            belongs.
            </summary>
            <param name="item">
            The object whose permissible child types are to be retrieved.
            </param>
            <returns>
            A sequence containing the permissible types of children the specified object may have; if
            the object does not implement the <see cref="T:Simphony.Collections.IParent`1"/> interface, an empty sequence
            is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.HierarchyHelper.GetPermittedChildTypes(System.Object,System.Reflection.Assembly[])">
            <summary>
            Gets a sequence containing the permissible types of children the currently a specified
            object may have.
            </summary>
            <param name="parent">
            The object whose permissible child types are to be retrieved.
            </param>
            <param name="assemblies">
            The assemblies to search for permissible child types.
            </param>
            <returns>
            A sequence containing the permissible types of children the specified object may have; if
            the object does not implement the <see cref="T:Simphony.Collections.IParent`1"/> interface, an empty sequence
            is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the if the specified object or the specified array of assemblies is a null
            reference.
            </exception>
        </member>
        <member name="M:Simphony.HierarchyHelper.InsertChild(System.Object,System.Int32,System.Object)">
            <summary>
            Inserts a child to a specified object at the specified index.
            </summary>
            <param name="parent">
            The object to which the child is to be inserted.
            </param>
            <param name="index">
            The zero-based index at which the child should be inserted.
            </param>
            <param name="child">
            The child to be inserted.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the either of the specified objects is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified object does not implement the <see cref="T:Simphony.Collections.IParent`1"/> interface,
            or if the specified child is not of the correct type to be inserted as a child of the
            specified object.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown if the <see cref="T:System.Collections.Generic.IList`1"/> containing the children of the specified object is a
            read-only.
            </exception>
        </member>
        <member name="M:Simphony.HierarchyHelper.RemoveChild(System.Object,System.Int32)">
            <summary>
            Removes a child from a specified object.
            </summary>
            <param name="item">
            The object from which the child is to be removed.
            </param>
            <param name="index">
            The zero-based index of the child to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified object does not implement the <see cref="T:Simphony.Collections.IParent`1"/> interface.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown if the <see cref="T:System.Collections.Generic.IList`1"/> containing the children of the specified object is a
            read-only.
            </exception>
        </member>
        <member name="T:Simphony.LayoutHelper">
            <summary>
            Helper class for laying out points, sizes, and rectangles.
            </summary>
        </member>
        <member name="M:Simphony.LayoutHelper.Distance(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Calculates the distance between one <see cref="T:System.Drawing.PointF"/> and another.
            </summary>
            <param name="pt1">
            The first <see cref="T:System.Drawing.PointF"/>.
            </param>
            <param name="pt2">
            The second <see cref="T:System.Drawing.PointF"/>.
            </param>
            <returns>
            The distance between the first <see cref="T:System.Drawing.PointF"/> and the second.
            </returns>
            <remarks>
            The calculation is made using the Euclidean norm.
            </remarks>
        </member>
        <member name="M:Simphony.LayoutHelper.Intersect(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Returns left <see cref="T:System.Drawing.Size"/> that is the intersection of one <see cref="T:System.Drawing.Size"/> with
            another.
            </summary>
            <param name="left">
            The first <see cref="T:System.Drawing.Size"/>.
            </param>
            <param name="right">
            The second <see cref="T:System.Drawing.Size"/>.
            </param>
            <returns>
            The intersection of the first <see cref="T:System.Drawing.Size"/> and the second.
            </returns>
        </member>
        <member name="M:Simphony.LayoutHelper.Intersect(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Returns left <see cref="T:System.Drawing.SizeF"/> that is the intersection of one <see cref="T:System.Drawing.SizeF"/> with
            another.
            </summary>
            <param name="left">
            The first <see cref="T:System.Drawing.SizeF"/>.
            </param>
            <param name="right">
            The second <see cref="T:System.Drawing.SizeF"/>.
            </param>
            <returns>
            The intersection of the first <see cref="T:System.Drawing.SizeF"/> and the second.
            </returns>
        </member>
        <member name="M:Simphony.LayoutHelper.Restrict(System.Drawing.PointF,System.Drawing.RectangleF)">
            <summary>
            Restricts left <see cref="T:System.Drawing.PointF"/> to left specified <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
            <param name="point">
            The <see cref="T:System.Drawing.PointF"/> to be restricted.
            </param>
            <param name="rect">
            The <see cref="T:System.Drawing.RectangleF"/> to which the <see cref="T:System.Drawing.PointF"/> should be restricted.
            </param>
            <returns>
            The restricted <see cref="T:System.Drawing.PointF"/>.
            </returns>
        </member>
        <member name="M:Simphony.LayoutHelper.Union(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Returns left <see cref="T:System.Drawing.Size"/> that is the union of one <see cref="T:System.Drawing.Size"/> with another.
            </summary>
            <param name="left">
            The first <see cref="T:System.Drawing.Size"/>.
            </param>
            <param name="right">
            The second <see cref="T:System.Drawing.Size"/>.
            </param>
            <returns>
            The union of the first <see cref="T:System.Drawing.Size"/> and the second.
            </returns>
        </member>
        <member name="M:Simphony.LayoutHelper.Union(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Returns left <see cref="T:System.Drawing.SizeF"/> that is the union of one <see cref="T:System.Drawing.SizeF"/> with another.
            </summary>
            <param name="left">
            The first <see cref="T:System.Drawing.SizeF"/>.
            </param>
            <param name="right">
            The second <see cref="T:System.Drawing.SizeF"/>.
            </param>
            <returns>
            The union of the first <see cref="T:System.Drawing.SizeF"/> and the second.
            </returns>
        </member>
        <member name="T:Simphony.DataExtensions">
            <summary>
            Extension methods for the System.Data namespace.
            </summary>
        </member>
        <member name="M:Simphony.DataExtensions.SafeGetOrdinal(System.Data.IDataReader,System.String)">
            <summary>
            Return the zero-based index of the named field.
            </summary>
            <param name="reader">
            The data reader.
            </param>
            <param name="name">
            The name of the field to find.
            </param>
            <returns>
            The zero-based index of the named field if found; otherwise -1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified data reader is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.DateTimeHelper">
            <summary>
            Helper and extension methods for dealing with <see cref="T:System.DateTime"/> values.
            </summary>
        </member>
        <member name="M:Simphony.DateTimeHelper.AddWeeks(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of weeks from the
            value of a specified <see cref="T:System.DateTime"/>.
            </summary>
            <param name="date">
            The date to which to add.
            </param>
            <param name="value">
            A number of whole and fractional weeks.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> whose value is the specified <see cref="T:System.DateTime"/> plus the
            specified number of weeks.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the resulting <see cref="T:System.DateTime"/> is less than <see cref="F:System.DateTime.MinValue"/>
            or greater than <see cref="F:System.DateTime.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Simphony.DateTimeHelper.Between(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Returns a value indicating whether a <see cref="T:System.DateTime"/> value is between two other
            <see cref="T:System.DateTime"/> values.
            </summary>
            <param name="date">
            The <see cref="T:System.DateTime"/> to check.
            </param>
            <param name="fromDate">
            The start of the date range.
            </param>
            <param name="toDate">
            The end of the date range.
            </param>
            <returns>
            True if the specified <see cref="T:System.DateTime"/> is between the other two; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified start <see cref="T:System.DateTime"/> value is greater than the specified
            finish <see cref="T:System.DateTime"/> value.
            </exception>
        </member>
        <member name="M:Simphony.DateTimeHelper.FirstDayOfMonth(System.DateTime)">
            <summary>
            Gets the first day of the month to which a specified <see cref="T:System.DateTime"/> value belongs.
            </summary>
            <param name="date">
            The <see cref="T:System.DateTime"/> value.
            </param>
            <returns>
            The first day of the month to which the specified <see cref="T:System.DateTime"/> value belongs.
            </returns>
        </member>
        <member name="M:Simphony.DateTimeHelper.FirstDayOfWeek(System.DateTime)">
            <summary>
            Gets the first day of the week to which a specified <see cref="T:System.DateTime"/> value belongs
            using the current culture.
            </summary>
            <param name="date">
            The <see cref="T:System.DateTime"/> value.
            </param>
            <returns>
            The first day of the week to which the specified <see cref="T:System.DateTime"/> value belongs.
            </returns>
        </member>
        <member name="M:Simphony.DateTimeHelper.FirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the first day of the week to which a specified <see cref="T:System.DateTime"/> value belongs
            using a specified culture.
            </summary>
            <param name="date">
            The <see cref="T:System.DateTime"/> value.
            </param>
            <param name="culture">
            The culture to use when making the calculation.
            </param>
            <returns>
            The first day of the week to which the specified <see cref="T:System.DateTime"/> value belongs.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified culture is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.DateTimeHelper.IsWeekday(System.DateTime)">
            <summary>
            Returns a value indicating whether or not a specified <see cref="T:System.DateTime"/> value
            is a weekday.
            </summary>
            <param name="date">
            The <see cref="T:System.DateTime"/> value.
            </param>
            <returns>
            True if the <see cref="T:System.DateTime"/> value is a weekday; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.DateTimeHelper.IsWeekend(System.DateTime)">
            <summary>
            Returns a value indicating whether or not a specified <see cref="T:System.DateTime"/> value
            is a weekend.
            </summary>
            <param name="date">
            The <see cref="T:System.DateTime"/> value.
            </param>
            <returns>
            True if the <see cref="T:System.DateTime"/> value is a weekend; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.DateTimeHelper.LastDayOfMonth(System.DateTime)">
            <summary>
            Gets the last day of the month to which a specified <see cref="T:System.DateTime"/> value belongs.
            </summary>
            <param name="date">
            The <see cref="T:System.DateTime"/> value.
            </param>
            <returns>
            The last day of the month to which the specified <see cref="T:System.DateTime"/> value belongs.
            </returns>
        </member>
        <member name="M:Simphony.DateTimeHelper.LastDayOfWeek(System.DateTime)">
            <summary>
            Gets the last day of the week to which a specified <see cref="T:System.DateTime"/> value belongs
            using the current culture.
            </summary>
            <param name="date">
            The <see cref="T:System.DateTime"/> value.
            </param>
            <returns>
            The last day of the week to which the specified <see cref="T:System.DateTime"/> value belongs.
            </returns>
        </member>
        <member name="M:Simphony.DateTimeHelper.LastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the last day of the week to which a specified <see cref="T:System.DateTime"/> value belongs
            using a specified culture.
            </summary>
            <param name="date">
            The <see cref="T:System.DateTime"/> value.
            </param>
            <param name="culture">
            The culture to use when making the calculation.
            </param>
            <returns>
            The last day of the week to which the specified <see cref="T:System.DateTime"/> value belongs.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified culture is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.DateTimeHelper.Max(System.DateTime,System.DateTime)">
            <summary>
            Returns the later of two <see cref="T:System.DateTime"/> values.
            </summary>
            <param name="date1">
            The first <see cref="T:System.DateTime"/> value.
            </param>
            <param name="date2">
            The second <see cref="T:System.DateTime"/> value.
            </param>
            <returns>
            The later of the two <see cref="T:System.DateTime"/> values.
            </returns>
        </member>
        <member name="M:Simphony.DateTimeHelper.Min(System.DateTime,System.DateTime)">
            <summary>
            Returns the earlier of two <see cref="T:System.DateTime"/> values.
            </summary>
            <param name="date1">
            The first <see cref="T:System.DateTime"/> value.
            </param>
            <param name="date2">
            The second <see cref="T:System.DateTime"/> value.
            </param>
            <returns>
            The earlier of the two <see cref="T:System.DateTime"/> values.
            </returns>
        </member>
        <member name="M:Simphony.DateTimeHelper.SubtractDays(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that subtracts the specified number of days from the
            value of a specified <see cref="T:System.DateTime"/>.
            </summary>
            <param name="date">
            The date from which to subtract.
            </param>
            <param name="value">
            A number of whole and fractional days.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> whose value is the specified <see cref="T:System.DateTime"/> less the
            specified number of days.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the resulting <see cref="T:System.DateTime"/> is less than <see cref="F:System.DateTime.MinValue"/>
            or greater than <see cref="F:System.DateTime.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Simphony.DateTimeHelper.SubtractMonths(System.DateTime,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that subtracts the specified number of months from the
            value of a specified <see cref="T:System.DateTime"/>.
            </summary>
            <param name="date">
            The <see cref="T:System.DateTime"/> from which to subtract.
            </param>
            <param name="value">
            A number of whole months.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> whose value is the specified <see cref="T:System.DateTime"/> less the
            specified number of months.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the resulting <see cref="T:System.DateTime"/> is less than <see cref="F:System.DateTime.MinValue"/>
            or greater than <see cref="F:System.DateTime.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Simphony.DateTimeHelper.SubtractWeeks(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that subtracts the specified number of weeks from the
            value of a specified <see cref="T:System.DateTime"/>.
            </summary>
            <param name="date">
            The date from which to subtract.
            </param>
            <param name="value">
            A number of whole and fractional weeks.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> whose value is the specified <see cref="T:System.DateTime"/> less the
            specified number of weeks.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the resulting <see cref="T:System.DateTime"/> is less than <see cref="F:System.DateTime.MinValue"/>
            or greater than <see cref="F:System.DateTime.MaxValue"/>.
            </exception>
        </member>
        <member name="T:Simphony.ComponentModelExtensions">
            <summary>
            Extension methods for the System.ComponentModel namespace.
            </summary>
            <summary>
            Extension methods for the System.ComponentModel namespace.
            </summary>
        </member>
        <member name="M:Simphony.ComponentModelExtensions.GetColumnDisplayIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the display index for the property in a table.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The display index for the property in a table.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified property is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModelExtensions.GetColumnFormat(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the column format for the property in a table.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The column format for the property in a table.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified property is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModelExtensions.Contains(System.ComponentModel.PropertyDescriptorCollection,System.String,System.Boolean)">
            <summary>
            Determines whether the collection contains a property with a given name.
            </summary>
            <param name="collection">
            The collection.
            </param>
            <param name="name">
            The name of the property to find.
            </param>
            <param name="ignoreCase">
            True to ignore the case of the property name; otherwise, false.
            </param>
            <returns>
            True if the collection contains a property with the given name; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection or the specified name is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModelExtensions.GetBrowsable(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets a value indicating whether the property should be displayed in a Properties window.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            True if the property should be displayed in a Properties window; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified property is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModelExtensions.GetCategory(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the category for a property.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The category for the property.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified property is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModelExtensions.GetColumnAlignment(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the column alignment for the property in a table.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The column alignment for the property in a table.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified property is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModelExtensions.GetColumnCanExpand(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets a value indicating whether the column representing the property in a table can grow to fill the available space.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            True if the column can grow to fill the available space; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified property is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModelExtensions.GetColumnWidth(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the column width for the property in a table.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The column width for the property in a table.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified property is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModelExtensions.GetDisplayFormat(System.ComponentModel.MemberDescriptor)">
            <summary>
            Gets the display format for a member.
            </summary>
            <param name="member">
            The member.
            </param>
            <returns>
            The display format for the member.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified member is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModelExtensions.GetDisplayIndex(System.ComponentModel.MemberDescriptor)">
            <summary>
            Gets the display index of a member.
            </summary>
            <param name="member">
            The member.
            </param>
            <returns>
            The display index of the member.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified member is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModelExtensions.GetParenthesizePropertyName(System.ComponentModel.MemberDescriptor)">
            <summary>
            Gets a value indicating whether a member should be displayed with parentheses in
            a Properties window.
            </summary>
            <param name="member">
            The member.
            </param>
            <returns>
            True if the member should be displayed with parentheses in a Properties window;
            otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified member is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModelExtensions.Remove(System.ComponentModel.PropertyDescriptorCollection,System.String)">
            <summary>
            Removes a PropertyDescriptor with a specified name from the collection.
            </summary>
            <param name="collection">
            The collection.
            </param>
            <param name="name">
            The name of the PropertyDescriptor to be removed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection or the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown if the specified collection is read-only.
            </exception>
            <returns>
            True if a PropertyDescriptor with the specified name was found and removed; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.ComponentModelExtensions.TryConvertFromString``1(System.ComponentModel.TypeConverter,System.String,``0@)">
            <summary>
            Attempts to convert the specified text to an object.
            </summary>
            <typeparam name="T">
            The type of object to which the text should be converted.
            </typeparam>
            <param name="converter">
            The <see cref="T:System.ComponentModel.TypeConverter"/> that should perform the conversion.
            </param>
            <param name="text">
            The text string to convert.
            </param>
            <param name="result">
            When this method returns, contains the object that was the result of the conversion, if
            successful; otherwise, the default value for the type of object.
            </param>
            <returns>
            True if the conversion was successful; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:System.ComponentModel.TypeConverter"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ComponentModelExtensions.TryGetCustomAttribute``1(System.ComponentModel.MemberDescriptor,``0@)">
            <summary>
            Attempts to retrieve the first custom attribute of a specified type defined
            on a member.
            </summary>
            <typeparam name="T">
            The type of custom attribute to retrieve.
            </typeparam>
            <param name="member">
            The member.
            </param>
            <param name="attribute">
            When this method returns, contains the retrieved custom attribute, if found;
            otherwise, the default value for the type of the custom attribute.
            </param>
            <returns>
            True if a custom attribute was found; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified member is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.Windows.Forms.Document">
            <summary>
            Abstract base class for a documents.
            </summary>
            <summary>
            Abstract base class for a documents.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.QueryClose(System.Windows.Forms.Control)">
            <summary>
            Checks whether the document can be closed.
            </summary>
            <param name="owner">
            The control/form making the check; or null if not applicable.
            </param>
            <returns>
            True if the document can be closed; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.Document"/> class.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.Document.PropertyChanged">
            <summary>
            Fired when a property value of the document changes.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.Document.ContainerControl">
            <summary>
            Gets or sets the control the component has been placed on.
            </summary>
            <value>
            The control the component has been placed on; or a null reference if the component
            has not been placed on a control.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.Document.File">
            <summary>
            Gets a <see cref="T:System.IO.FileInfo"/> describing the file location of the document.
            </summary>
            <value>
            A <see cref="T:System.IO.FileInfo"/> describing the file location of the document; or null if the
            document has never been saved.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.Document.Filter">
            <summary>
            Gets or sets the file name filter string to be used when opening and saving files.
            </summary>
            <value>
            The file name filter string to be used when opening and saving files.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.Document.Modified">
            <summary>
            Gets or sets a value indicating whether the document has been modified.
            </summary>
            <value>
            True if the document has been modified; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.Document.Name">
            <summary>
            Gets the name of the document.
            </summary>
            <value>
            The name of the document.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.Document.RecentFiles">
            <summary>
            Gets a sequence containing the names of the most recently opened files.
            </summary>
            <value>
            A sequence containing the names of the most recently opened files.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.Document.RecentFilesCapacity">
            <summary>
            Gets or sets the capacity of the recently used files list.
            </summary>
            <value>
            The capacity of the recently used files list.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.Document.SaveSettings">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.Document.SettingsKey">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.Document.Site">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.ForceNew">
            <summary>
            Resets the document to its empty state without checking for modifications.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.LoadComponentSettings">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.New">
            <summary>
            Resets the document to its empty state.
            </summary>
            <returns>
            True if a new document was created successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.Open">
            <summary>
            Opens a document from a file specified in an open file dialog box.
            </summary>
            <returns>
            True if a document was opened successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.Open(System.String)">
            <summary>
            Opens a document from the specified file.
            </summary>
            <param name="fileName">
            The file containing the document.
            </param>
            <returns>
            True if a document was opened successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.Open(System.String,System.Boolean)">
            <summary>
            Opens a document from the specified file.
            </summary>
            <param name="fileName">
            The file containing the document.
            </param>
            <param name="handleExceptions">
            True to handle exceptions by displaying a message box to the user; false to allow the
            caller to handle them.
            </param>
            <returns>
            True if a document was opened successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.QueryClose">
            <summary>
            Checks whether the document can be closed.
            </summary>
            <returns>
            True if the document can be closed; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.ResetComponentSettings">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.Save">
            <summary>
            Saves the document.
            </summary>
            <returns>
            True if the file was saved successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.SaveAs">
            <summary>
            Saves the document to a file specified in a save file dialog box.
            </summary>
            <returns>
            True if the file was saved successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.SaveComponentSettings">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.Initialize">
            <summary>
            Resets the document to it empty state.
            </summary>
            <remarks>
            Derived classes should override this method to define what their empty state is.
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.Document.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property that changed.
            </param>
            <remarks>
            A null value for <paramref name="propertyName"/> indicates that all of the properties have changed.
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.Open(System.IO.FileInfo,System.Boolean)">
            <summary>
            Opens a document from the specified file.
            </summary>
            <param name="file">
            The file containing the document.
            </param>
            <param name="handleExceptions">
            True to handle exceptions by displaying a message box to the user; false to allow the
            caller to handle them.
            </param>
            <returns>
            True if a document was opened successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the document from an XML reader.
            </summary>
            <param name="reader">
            The XML reader to deserialize from.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified XML reader is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.Document.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the document to an XML writer.
            </summary>
            <param name="writer">
            The XML writer to serialize to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified XML writer is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.Windows.Forms.AsyncOperationDialog">
            <summary>
            A wait dialog that can be displayed when performing a lengthy operation.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.AsyncOperationDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.AsyncOperationDialog"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.AsyncOperationDialog.Text">
            <summary>
            Gets or sets the text to display in the dialog.
            </summary>
            <value>
            The text to display in the dialog.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.AsyncOperationDialog.DoAsyncOperation(System.Windows.Forms.Control,System.Action)">
            <summary>
            Displays the dialog while performing an asynchronous operation.
            </summary>
            <param name="owner">
            The parent window of the dialog; or a null reference is the parent window is unknown.
            </param>
            <param name="operation">
            The asynchronous operation to perform.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified operation is a null reference.
            </exception>
        </member>
        <member name="F:Simphony.Windows.Forms.AsyncOperationDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.AsyncOperationDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Windows.Forms.AsyncOperationDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.BreadCrumbClickedEventArgs">
            <summary>
            Provides data for the <see cref="E:Simphony.Windows.Forms.BreadCrumbStrip.BreadCrumbClicked"/> event.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.BreadCrumbClickedEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.BreadCrumbClickedEventArgs"/> class.
            </summary>
            <param name="clickedItem">
            The item that was clicked.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified item is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Windows.Forms.BreadCrumbClickedEventArgs.ClickedItem">
            <summary>
            Gets the item that was clicked.
            </summary>
            <value>
            The item that was clicked.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.BreadCrumbStrip">
            <summary>
            Implements a breadcrumb control using a <see cref="T:System.Windows.Forms.ToolStrip"/>.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.BreadCrumbStrip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.BreadCrumbStrip"/> class.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.BreadCrumbStrip.BackgroundImageChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.BackgroundImageChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.BreadCrumbStrip.BackgroundImageLayoutChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.BreadCrumbStrip.BreadCrumbClicked">
            <summary>
            Occurs when a breadcrumb is clicked.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.BreadCrumbStrip.ControlAdded">
            <inheritdoc cref="E:System.Windows.Forms.Control.ControlAdded"/>
        </member>
        <member name="E:Simphony.Windows.Forms.BreadCrumbStrip.ControlRemoved">
            <inheritdoc cref="E:System.Windows.Forms.Control.ControlRemoved"/>
        </member>
        <member name="E:Simphony.Windows.Forms.BreadCrumbStrip.ForeColorChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.ForeColorChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.BreadCrumbStrip.SelectedItemChanged">
            <summary>
            Occurs when the value of the <see cref="P:Simphony.Windows.Forms.BreadCrumbStrip.SelectedItem"/> property has changed.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.BreadCrumbStrip.BackColor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.BreadCrumbStrip.BackgroundImage">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.BreadCrumbStrip.BackgroundImageLayout">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.BreadCrumbStrip.Cursor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.BreadCrumbStrip.Dock">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.BreadCrumbStrip.Font">
            <inheritdoc cref="P:System.Windows.Forms.Control.Font"/>
        </member>
        <member name="P:Simphony.Windows.Forms.BreadCrumbStrip.ForeColor">
            <inheritdoc cref="P:System.Windows.Forms.Control.ForeColor"/>
        </member>
        <member name="P:Simphony.Windows.Forms.BreadCrumbStrip.Padding">
            <inheritdoc cref="P:System.Windows.Forms.Control.Padding"/>
        </member>
        <member name="P:Simphony.Windows.Forms.BreadCrumbStrip.Renderer">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Forms.ToolStripRenderer" /> used to customize the look and feel of
            the control.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.ToolStripRenderer" /> used to customize the look and feel of the control.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.BreadCrumbStrip.SelectedItem">
            <summary>
            Gets or sets the object for which the control should generate breadcrumbs.
            </summary>
            <value>
            The object for which the control should generate breadcrumbs.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.BreadCrumbStrip.OnBreadCrumbClicked(System.Object)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.BreadCrumbStrip.BreadCrumbClicked"/> event.
            </summary>
            <param name="clickedItem">
            The item that was clicked.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified item is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.BreadCrumbStrip.OnResize(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.BreadCrumbStrip.OnSelectedItemChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.BreadCrumbStrip.SelectedItemChanged"/> event.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.BreadCrumbStrip.ToolStripBreadCrumbButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.BreadCrumbStrip.ToolStripBreadCrumbButton"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.BreadCrumbStrip.ToolStripBreadCrumbButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.CalendarView">
            <summary>
            An alternative to the .NET MonthCalendar control based on a control in Microsoft Project.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.CalendarView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.CalendarView"/> class.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.CalendarView.DateChanged">
            <summary>
            Occurs after the date selected in the control changes.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.CalendarView.QueryDateAppearance">
            <summary>
            Occurs when the control is about to render a date in the calendar.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.CalendarView.BackgroundImage">
            <summary>
            Gets or sets the background image displayed in the control.
            </summary>
            <value>
            The background image displayed in the control.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.CalendarView.BackgroundImageLayout">
            <summary>
            Gets or sets the background image layout.
            </summary>
            <value>
            The background image layout.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.CalendarView.Date">
            <summary>
            Gets or sets the date selected in the control.
            </summary>
            <value>
            The date selected in the control.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.CalendarView.MaximumSize">
            <summary>
            Gets or sets the maximum size of the control.
            </summary>
            <value>
            The  maximum size of the control.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.CalendarView.MinimumSize">
            <summary>
            Gets or sets the minimum size of the control.
            </summary>
            <value>
            The  minimum size of the control.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.CalendarView.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
            <value>
            The text associated with this control.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.CalendarView.IsInputKey(System.Windows.Forms.Keys)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.CalendarView.OnDateChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.CalendarView.DateChanged"/> event.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.CalendarView.OnGotFocus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.CalendarView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.CalendarView.OnLostFocus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.CalendarView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.CalendarView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.CalendarView.OnQueryDateAppearance(Simphony.Windows.Forms.QueryDateAppearanceEventArgs)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.CalendarView.QueryDateAppearance"/> event.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.CalendarView.MonthDiff(System.DateTime,System.DateTime)">
            <summary>
            Calculates the number of months between two dates without taking the day
            of the month into account.
            </summary>
            <param name="left">
            The left-hand date.
            </param>
            <param name="right">
            The right-hand date.
            </param>
            <returns>
            The number of months between two dates.
            </returns>
        </member>
        <member name="T:Simphony.Windows.Forms.CalendarView.CalendarViewDesigner">
            <summary>
            Custom control designer for the <see cref="T:Simphony.Windows.Forms.CalendarView"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.CalendarView.CalendarViewDesigner.SelectionRules">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.ChartPaletteColors">
            <summary>
            Static class defining the color palettes.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ChartPaletteColors.resourceQuantityColorsBerry">
            <summary>
            The array of colors for the Berry charting palette.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ChartPaletteColors.resourceQuantityColorsBrightPastel">
            <summary>
            The array of colors for the BrightPastel charting palette.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ChartPaletteColors.resourceQuantityColorsChocolate">
            <summary>
            The array of colors for the Chocolate charting palette.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ChartPaletteColors.resourceQuantityColorsDefault">
            <summary>
            The array of colors for the Default charting palette.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ChartPaletteColors.resourceQuantityColorsEarth">
            <summary>
            The array of colors for the Earth charting palette.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ChartPaletteColors.resourceQuantityColorsExcel">
            <summary>
            The array of colors for the Excel charting palette.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ChartPaletteColors.resourceQuantityColorsFire">
            <summary>
            The array of colors for the Fire charting palette.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ChartPaletteColors.resourceQuantityColorsLight">
            <summary>
            The array of colors for the Light charting palette.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ChartPaletteColors.resourceQuantityColorsPastel">
            <summary>
            The array of colors for the Pastel charting palette.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ChartPaletteColors.resourceQuantityColorsSeaGreen">
            <summary>
            The array of colors for the SeaGreen charting palette.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ChartPaletteColors.resourceQuantityColorsSemiTransparent">
            <summary>
            The array of colors for the SemiTransparent charting palette.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.ChartPaletteColors.GetPaletteColors(System.Windows.Forms.DataVisualization.Charting.ChartColorPalette,System.Int32)">
            <summary>
            Returns an indexed color from the argument palette.
            </summary>
            <param name="palette">
            The selected color palette.
            </param>
            <param name="index">
            The index of the desired color.
            </param>
            <returns>
            The indexed color from the palette.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.ChartPaletteColors.InitializeGrayScaleColors">
            <summary>
            Creates an array of grayscale colors for the Grayscale color palette.
            </summary>
            <returns>
            The array of grayscale colors for the Grayscale color palette.
            </returns>
        </member>
        <member name="T:Simphony.Windows.Forms.ContextMenuButton">
            <summary>
            A button control that displays a context menu strip when clicked.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.ContextMenuButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.ContextMenuButton"/> class.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.ContextMenuButton.ArrowStyleChanged">
            <summary>
            Occurs when the value of the <see cref="P:Simphony.Windows.Forms.ContextMenuButton.ArrowStyle"/> property has changed.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.ContextMenuButton.BackColorChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.BackColorChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.ContextMenuButton.BackgroundImageChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.BackgroundImageChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.ContextMenuButton.BackgroundImageLayoutChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.ContextMenuButton.DoubleClick">
            <inheritdoc cref="E:System.Windows.Forms.Control.DoubleClick"/>
        </member>
        <member name="E:Simphony.Windows.Forms.ContextMenuButton.DropDown">
            <summary>
            Occurs when the context menu is shown.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.ContextMenuButton.DropDownClosed">
            <summary>
            Occurs when the context menu is no longer visible.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.ContextMenuButton.ForeColorChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.ForeColorChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.ContextMenuButton.PaddingChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.PaddingChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.ContextMenuButton.Paint">
            <inheritdoc cref="E:System.Windows.Forms.Control.Paint"/>
        </member>
        <member name="P:Simphony.Windows.Forms.ContextMenuButton.ArrowStyle">
            <summary>
            Gets or sets a value specifying the style of the drop-down arrow.
            </summary>
            <value>
            A <see cref="T:Simphony.Windows.Forms.ContextMenuButtonArrowStyle"/> specifying the style of the
            drop-down arrow.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.ContextMenuButton.BackColor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.ContextMenuButton.BackgroundImage">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.ContextMenuButton.BackgroundImageLayout">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.ContextMenuButton.ContextMenuStrip">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.ContextMenuButton.DroppedDown">
            <summary>
            Gets or sets a value indicating whether the context menu is being displayed.
            </summary>
            <value>
            True if the context menu is currently visible; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.ContextMenuButton.ForeColor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.ContextMenuButton.Padding">
            <inheritdoc cref="P:System.Windows.Forms.Control.Padding"/>
        </member>
        <member name="M:Simphony.Windows.Forms.ContextMenuButton.OnArrowStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.ContextMenuButton.ArrowStyleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.ContextMenuButton.OnDropDown(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.ContextMenuButton.DropDown"/> event.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.ContextMenuButton.OnDropDownClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.ContextMenuButton.DropDownClosed"/> event.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.ContextMenuButton.OnFontChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ContextMenuButton.OnGotFocus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ContextMenuButton.OnLostFocus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ContextMenuButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ContextMenuButton.OnMouseEnter(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ContextMenuButton.OnMouseLeave(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ContextMenuButton.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ContextMenuButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ContextMenuButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ContextMenuButton.OnTextChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ContextMenuButton.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ContextMenuButton.WndProc(System.Windows.Forms.Message@)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.ContextMenuButton.ContextMenuButtonDesigner">
            <summary>
            Custom control designer for the <see cref="T:Simphony.Windows.Forms.ContextMenuButton"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.ContextMenuButton.ContextMenuButtonDesigner.SelectionRules">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.ContextMenuButtonArrowStyle">
            <summary>
            The arrow styles available to the <see cref="T:Simphony.Windows.Forms.ContextMenuButton"/> control.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ContextMenuButtonArrowStyle.Show">
            <summary>
            The arrow is displayed.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ContextMenuButtonArrowStyle.Split">
            <summary>
            The arrow is displayed but is separated from the main portion of the control.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ContextMenuButtonArrowStyle.Hide">
            <summary>
            The arrow is hidden.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.DynamicTreeViewItemMovingEventArgs">
            <summary>
            Provides data for the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.ItemMoved"/> event of a
            <see cref="T:Simphony.Windows.Forms.DynamicTreeView"/> control.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeViewItemMovingEventArgs.#ctor(System.Object,System.Object,System.Int32,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DynamicTreeViewItemMovingEventArgs"/> class.
            </summary>
            <param name="item">
            The item that was moved.
            </param>
            <param name="oldParent">
            The item's parent before it was moved.
            </param>
            <param name="oldIndex">
            The item's index before it was moved.
            </param>
            <param name="newParent">
            The item's parent after it was moved.
            </param>
            <param name="newIndex">
            The item's index after it was moved.
            </param>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewItemMovingEventArgs.Item">
            <summary>
            Gets the item that was moved.
            </summary>
            <value>
            The item that was moved.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewItemMovingEventArgs.NewIndex">
            <summary>
            Gets the item's index after it was moved.
            </summary>
            <value>
            The item's index after it was moved.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewItemMovingEventArgs.NewParent">
            <summary>
            Gets the item's parent after it was moved.
            </summary>
            <value>
            The item's parent after it was moved.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewItemMovingEventArgs.OldIndex">
            <summary>
            Gets the item's index before it was moved.
            </summary>
            <value>
            The item's index before it was moved.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewItemMovingEventArgs.OldParent">
            <summary>
            Gets the item's parent before it was moved.
            </summary>
            <value>
            The item's parent before it was moved.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.ExcelExporter">
            <summary>
            Abstract base class for exporters targeting Microsoft Excel.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.ExcelExporter.FileExtension">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.ExcelExporter.FileName">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ExcelExporter.Export">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ExcelExporter.ExportWorksheet(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Performs an export to a specified <see cref="T:OfficeOpenXml.ExcelWorksheet"/>.
            </summary>
            <param name="worksheet">
            The <see cref="T:OfficeOpenXml.ExcelWorksheet"/> to export to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:OfficeOpenXml.ExcelWorksheet"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.ExcelExporter.ValidateInputs">
            <summary>
            Performs validation of the user provided inputs prior to exporting.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if there is a validation error.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.ExcelExporter.ExcelFileNameEditor.InitializeDialog(System.Windows.Forms.SaveFileDialog)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.ExcelImporter">
            <summary>
            Abstract base class for importers targeting Microsoft Excel.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.ExcelImporter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.ExcelImporter"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.ExcelImporter.FileName">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.ExcelImporter.HeaderRow">
            <summary>
            Gets or sets the row in which the column headers are located.
            </summary>
            <value>
            The one-based index of the row in which the column headers are located.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.ExcelImporter.Worksheet">
            <summary>
            Gets or sets the index of the worksheet to be imported from.
            </summary>
            <value>
            The zero-based index of the worksheet to be imported from.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.ExcelImporter.ExcelCache">
            <summary>
            Gets a dictionary containing cached information loaded from the Excel document.
            </summary>
            <value>
            A dictionary containing cached information loaded from the Excel document.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.ExcelImporter.ClearCache">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ExcelImporter.Import">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ExcelImporter.ImportWorksheet(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32)">
            <summary>
            Performs an import from a specified <see cref="T:OfficeOpenXml.ExcelWorksheet"/>.
            </summary>
            <param name="worksheet">
            The <see cref="T:OfficeOpenXml.ExcelWorksheet"/> to import from.
            </param>
            <param name="rowStart">
            The one-based index of the first row to import.
            </param>
            <param name="rowCount">
            The number of rows to import.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:OfficeOpenXml.ExcelWorksheet"/> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either <paramref name="rowStart"/> or <paramref name="rowCount"/> is invalid.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.ExcelImporter.OnPropertyChanged(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ExcelImporter.ValidateWorksheet(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32)">
            <summary>
            Performs validation prior to importing from a specified <see cref="T:OfficeOpenXml.ExcelWorksheet"/>.
            </summary>
            <param name="worksheet">
            The <see cref="T:OfficeOpenXml.ExcelWorksheet"/> to validate.
            </param>
            <param name="rowStart">
            The one-based index of the first row to validate.
            </param>
            <param name="rowCount">
            The number of rows to validate.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:OfficeOpenXml.ExcelWorksheet"/> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either <paramref name="rowStart"/> or <paramref name="rowCount"/> is invalid.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Thrown if there is a validation error.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.ExcelImporter.ExcelFileNameEditor.InitializeDialog(System.Windows.Forms.OpenFileDialog)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.Exporter">
            <summary>
            Abstract base class for exporters.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.Exporter.Enabled">
            <summary>
            Gets a value indicating whether of not the exporter should be enabled in the
            export menu.
            </summary>
            <value>
            True if the exporter should be enabled; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.Exporter.FileExtension">
            <summary>
            Gets the file extension for the exported file.
            </summary>
            <value>
            The file extension for the exported file, including the period (.). For example, if
            exporting to a text file this property returns ".txt".
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.Exporter.FileName">
            <summary>
            Gets or sets the file location to be exported to.
            </summary>
            <value>
            The file location to be exported to.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.Exporter.DoWork">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.Exporter.Export">
            <summary>
            Performs an export.
            </summary>
            <returns>
            The result of the import.
            </returns>
        </member>
        <member name="T:Simphony.Windows.Forms.ExportSuccessfulBox">
            <summary>
            A dialog box that reports successful completion of an export operation, and optionally
            allows the user to open the exported file.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.ExportSuccessfulBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.ExportSuccessfulBox"/> class.
            </summary>
            <param name="fileName">
            The path of the file that was exported to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified file name is a null reference.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            Thrown if the caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the file name is empty, contains only white spaces, or contains invalid
            characters.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Thrown if access to the file is denied.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            Thrown if the specified path, file name, or both exceed the system-defined maximum
            length. For example, on Windows-based platforms, paths must be less than 248 characters,
            and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown if the file name contains a colon (:) in the middle of the string.
            </exception>
        </member>
        <member name="P:Simphony.Windows.Forms.ExportSuccessfulBox.Caption">
            <summary>
            Gets or sets the text to be used for the dialog's caption.
            </summary>
            <value>
            The text to be used for the dialog's caption.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.ExportSuccessfulBox.Description">
            <summary>
            Gets or sets a short description of the data that was exported.
            </summary>
            <value>
            A short description of the data that was exported.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.ExportSuccessfulBox.Show">
            <summary>
            Displays the dialog with a default owner.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.ExportSuccessfulBox.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Displays the dialog with the specified owner.
            </summary>
            <param name="owner">
            Any object that implements <see cref="T:System.Windows.Forms.IWin32Window"/> that represents the top-level
            window that will own the modal dialog box.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.ExportSuccessfulBox.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.FontFaceDialog">
            <summary>
            Custom dialog box for choosing a font face.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.FontFaceDialog.FamilyName">
            <summary>
            Gets or sets the font family name.
            </summary>
            <value>
            The font family name.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.FontFaceDialog.FontSize">
            <summary>
            Gets or sets the font size.
            </summary>
            <value>
            The font size.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.FontFaceDialog.ShowDialog">
            <summary>
            Runs the dialog box with a default owner.
            </summary>
            <returns>
            <see cref="F:System.Windows.Forms.DialogResult.OK"/> if the user clicks OK in the dialog box; otherwise,
            <see cref="F:System.Windows.Forms.DialogResult.Cancel"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if the current object has been disposed.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.FontFaceDialog.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.FontFaceForm">
            <summary>
            The underlying form for the <see cref="T:Simphony.Windows.Forms.FontFaceDialog"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.FontFaceForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.FontFaceForm"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.FontFaceForm.FamilyName">
            <summary>
            Gets or sets the font family name.
            </summary>
            <value>
            The font family name.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.FontFaceForm.FontSize">
            <summary>
            Gets or sets the font size.
            </summary>
            <value>
            The font size.
            </value>
        </member>
        <member name="F:Simphony.Windows.Forms.FontFaceForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.FontFaceForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Windows.Forms.FontFaceForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.Importer">
            <summary>
            Abstract base class for importers.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.Importer.Enabled">
            <summary>
            Gets a value indicating whether of not the importer should be enabled in the
            import menu.
            </summary>
            <value>
            True if the importer should be enabled; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.Importer.FileName">
            <summary>
            Gets or sets the file location to be imported from.
            </summary>
            <value>
            The file location to be imported from.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.Importer.DoWork">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.Importer.Import">
            <summary>
            Performs an import.
            </summary>
            <returns>
            The result of the import.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.Importer.UserConfirmation">
            <summary>
            Returns dialog result (override to add a confirmation box).
            </summary>
            <returns>
            The result of the dialog.
            </returns>
        </member>
        <member name="T:Simphony.Windows.Forms.ImportExportDialog">
            <summary>
            Dialog box providing an user interface for exporters.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.ImportExportDialog.#ctor(Simphony.Windows.Forms.Exporter,System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.ImportExportDialog"/> class.
            </summary>
            <param name="worker">
            The <see cref="T:Simphony.Windows.Forms.Exporter"/> that will perform the import/export.
            </param>
            <param name="projectFile">
            A <see cref="T:System.IO.FileInfo"/> providing the file name of the project.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Windows.Forms.Exporter"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.ImportExportDialog.#ctor(Simphony.Windows.Forms.Importer)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.ImportExportDialog"/> class.
            </summary>
            <param name="worker">
            The <see cref="T:Simphony.Windows.Forms.Importer"/> that will perform the import.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Windows.Forms.Importer"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.ImportExportDialog.#ctor(Simphony.Windows.Forms.NotifyingWorker)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.ImportExportDialog"/> class.
            </summary>
            <param name="worker">
            The <see cref="T:Simphony.Windows.Forms.NotifyingWorker"/> that will perform the import/export.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:Simphony.Windows.Forms.NotifyingWorker"/> is a null reference.
            </exception>
        </member>
        <member name="F:Simphony.Windows.Forms.ImportExportDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.ImportExportDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Windows.Forms.ImportExportDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.ImportSuccessfulBox">
            <summary>
            A dialog box that reports successful completion of an import operation.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.ImportSuccessfulBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.ImportSuccessfulBox"/> class.
            </summary>
            <param name="fileName">
            The path of the file that was exported to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified file name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified file name is an empty string.
            </exception>
        </member>
        <member name="P:Simphony.Windows.Forms.ImportSuccessfulBox.Caption">
            <summary>
            Gets or sets the text to be used for the dialog's caption.
            </summary>
            <value>
            The text to be used for the dialog's caption.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.ImportSuccessfulBox.Description">
            <summary>
            Gets or sets a short description of the data that was exported.
            </summary>
            <value>
            A short description of the data that was exported.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.ImportSuccessfulBox.Show">
            <summary>
            Displays the dialog with a default owner.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.ImportSuccessfulBox.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Displays the dialog with the specified owner.
            </summary>
            <param name="owner">
            Any object that implements <see cref="T:System.Windows.Forms.IWin32Window"/> that represents the top-level
            window that will own the modal dialog box.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.ImportSuccessfulBox.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.MainFormBase">
            <summary>
            A base class for the main form of an application.  The main functionality of this class is
            that it can remember its position between runs.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MainFormBase.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Simphony.Windows.Forms.MainFormBase"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MainFormBase.StartPosition">
            <inheritdoc cref="P:System.Windows.Forms.Form.StartPosition"/>
        </member>
        <member name="P:Simphony.Windows.Forms.MainFormBase.WindowState">
            <inheritdoc cref="P:System.Windows.Forms.Form.WindowState"/>
        </member>
        <member name="M:Simphony.Windows.Forms.MainFormBase.OnClosed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MainFormBase.OnLoad(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.NotifyingWorker">
            <summary>
            Abstract base class for objects that implement import/export operations.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.NotifyingWorker.ProgressChanged">
            <summary>
            Occurs when <see cref="M:Simphony.Windows.Forms.NotifyingWorker.ReportProgress(System.Int32)"/> is called.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.NotifyingWorker.WorkComplete">
            <summary>
            Occurs when the operation has completed or has raised an exception.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.NotifyingWorker.WorkStaring">
            <summary>
            Occurs when the operation is about to begin.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.NotifyingWorker.FootnoteIcon">
            <summary>
            Gets or sets the icon that will be displayed in the footnote portion of the import/export
            dialog box.
            </summary>
            <value>
            The icon that will be displayed in the footnote portion of the import/export dialog box.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.NotifyingWorker.FootnoteText">
            <summary>
            Gets or sets the text that will be displayed in the footnote portion of the import/export
            dialog box.
            </summary>
            <value>
            The text that will be displayed in the footnote portion of the import/export dialog box.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.NotifyingWorker.Owner">
            <summary>
            Gets or sets the user interface component that owns the worker.
            </summary>
            <value>
            The <see cref="T:System.Windows.Forms.Control"/> that owns the worker; or a null reference if the worker is
            unowned.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.NotifyingWorker.ClearCache">
            <summary>
            Clears any information cached by the importer/exporter.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.NotifyingWorker.DoWork">
            <summary>
            Starts execution of the operation.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.NotifyingWorker.OnWorkComplete(System.Exception)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.NotifyingWorker.WorkComplete"/> event in response to an exception during the
            operation.
            </summary>
            <param name="ex">
            The error that occurred during the operation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified error is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.NotifyingWorker.OnWorkComplete(System.Object)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.NotifyingWorker.WorkComplete"/> event in response to successful completion of the
            operation.
            </summary>
            <param name="result">
            The result of the operation.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.NotifyingWorker.OnWorkStaring">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.NotifyingWorker.WorkStaring"/> event.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.NotifyingWorker.ReportProgress(System.Int32)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.NotifyingWorker.ProgressChanged"/> event.
            </summary>
            <param name="progressPercentage">
            The percentage, from 0 to 100, of the operation that is complete.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified percentage is outside the range 0 to 100.
            </exception>
        </member>
        <member name="T:Simphony.Windows.Forms.PercentUpDown">
            <summary>
            A <see cref="T:System.Windows.Forms.NumericUpDown"/> control for displaying percentages.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.PercentUpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.PercentUpDown"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.PercentUpDown.DecimalPlaces">
            <inheritdoc cref="P:System.Windows.Forms.NumericUpDown.Increment"/>
        </member>
        <member name="P:Simphony.Windows.Forms.PercentUpDown.Increment">
            <inheritdoc cref="P:System.Windows.Forms.NumericUpDown.Increment"/>
        </member>
        <member name="P:Simphony.Windows.Forms.PercentUpDown.Maximum">
            <inheritdoc cref="P:System.Windows.Forms.NumericUpDown.Increment"/>
        </member>
        <member name="P:Simphony.Windows.Forms.PercentUpDown.Minimum">
            <inheritdoc cref="P:System.Windows.Forms.NumericUpDown.Increment"/>
        </member>
        <member name="P:Simphony.Windows.Forms.PercentUpDown.Value">
            <inheritdoc cref="P:System.Windows.Forms.NumericUpDown.Increment"/>
        </member>
        <member name="M:Simphony.Windows.Forms.PercentUpDown.ParseEditText">
            <inheritdoc cref="M:System.Windows.Forms.NumericUpDown.ParseEditText"/>
        </member>
        <member name="M:Simphony.Windows.Forms.PercentUpDown.UpdateEditText">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.RichTextLineSpacing">
            <summary>
            Defines the different line spacing formats in a <see cref="T:System.Windows.Forms.RichTextBox"/> control.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.RichTextLineSpacing.Single">
            <summary>
            Single spacing.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.RichTextLineSpacing.SinglePlus">
            <summary>
            1.15 spacing.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.RichTextLineSpacing.SingleAndHalf">
            <summary>
            One-and-a-half spacing.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.RichTextLineSpacing.Double">
            <summary>
            Double spacing.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.ParagraphDialog">
            <summary>
            A dialog box for editing paragraph formatting information.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.ParagraphDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.ParagraphDialog"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.ParagraphDialog.Alignment">
            <summary>
            Gets or sets the paragraph alignment.
            </summary>
            <value>
            The paragraph alignment.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.RichTextAlignment">
            <summary>
            Defines the different paragraph formats in a <see cref="T:System.Windows.Forms.RichTextBox"/> control.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.RichTextAlignment.Center">
            <summary>
            Paragraphs are centered.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.RichTextAlignment.Justify">
            <summary>
            Paragraphs are justified.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.RichTextAlignment.Left">
            <summary>
            Paragraphs are aligned with the left margin.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.RichTextAlignment.Right">
            <summary>
            Paragraphs are aligned with the right margin.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.DataGridViewRichTextCell">
            <summary>
            A <see cref="T:System.Windows.Forms.DataGridViewCell"/> used to edit rich text.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewRichTextCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewRichTextCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewRichTextCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.DataGridViewRichTextColumn">
            <summary>
            A <see cref="T:System.Windows.Forms.DataGridViewColumn"/> used to edit rich text.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.DataGridViewRichTextControl">
            <summary>
            A <see cref="T:System.Windows.Forms.IDataGridViewEditingControl"/> used to edit rich text.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewRichTextControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DataGridViewRichTextControl"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewRichTextControl.EditingControlDataGridView">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewRichTextControl.EditingControlFormattedValue">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewRichTextControl.EditingControlRowIndex">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewRichTextControl.EditingControlValueChanged">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewRichTextControl.EditingPanelCursor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewRichTextControl.RepositionEditingControlOnValueChange">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewRichTextControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewRichTextControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewRichTextControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewRichTextControl.PrepareEditingControlForEdit(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewRichTextControl.OnTextChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewRichTextControl.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.DynamicTreeViewEventArgs">
            <summary>
            Provides data for the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.AfterCollapse"/>, <see cref="E:Simphony.Windows.Forms.DynamicTreeView.AfterExpand"/>,
            and <see cref="E:Simphony.Windows.Forms.DynamicTreeView.SelectedItemChanged"/> events of a <see cref="T:Simphony.Windows.Forms.DynamicTreeView"/> control.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeViewEventArgs.#ctor(System.Object,System.Windows.Forms.TreeViewAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DynamicTreeViewEventArgs"/> class.
            </summary>
            <param name="item">
            The item that was expanded, collapsed, or selected.
            </param>
            <param name="action">
            One of the <see cref="T:System.Windows.Forms.TreeViewAction"/> values indicating the type of action that raised
            the event.
            </param>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewEventArgs.Action">
            <summary>
            Gets the type of <see cref="T:System.Windows.Forms.TreeView"/> action that raised the event.
            </summary>
            <value>
            One of the <see cref="T:System.Windows.Forms.TreeViewAction"/> values.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewEventArgs.Item">
            <summary>
            Gets the item to be expanded, collapsed, or selected.
            </summary>
            <value>
            The item to be expanded, collapsed, or selected.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.DynamicTreeView">
            <summary>
            A custom <see cref="T:System.Windows.Forms.TreeView"/> control that can populate itself from an object tree.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DynamicTreeView"/> class.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.AfterCollapse">
            <summary>
            Occurs when a node has been collapsed.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.AfterCopy">
            <summary>
            Occurs when a node has been copied to the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.AfterCut">
            <summary>
            Occurs when a node has been moved to the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.AfterDelete">
            <summary>
            Occurs when a node has been deleted.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.AfterExpand">
            <summary>
            Occurs when a node has been expanded.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.AfterLabelEdit">
            <summary>
            Occurs when the text of a node has been edited by the user.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.AfterPaste">
            <summary>
            Occurs when a node has been pasted into the tree.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.BackgroundImageChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.BackgroundImageChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.BackgroundImageLayoutChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.BeforeCollapse">
            <summary>
            Occurs when a node is about to be collapsed.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.BeforeDelete">
            <summary>
            Occurs when a node is about to be deleted.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.BeforeExpand">
            <summary>
            Occurs when a node is about to be expanded.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.BeforeLabelEdit">
            <summary>
            Occurs when the text of a node is about to be edited by the user.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.BeforePaste">
            <summary>
            Occurs when a node is about to be pasted into the tree.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.ItemMoved">
            <summary>
            Occurs when the user moves an item from one position to another.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.ItemMoving">
            <summary>
            Occurs when the user is about to move an item from one position to another.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.PaddingChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.PaddingChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.Paint">
            <inheritdoc cref="E:System.Windows.Forms.Control.Paint"/>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.PopulateContextMenu">
            <summary>
            Occurs when the context menu needs to be populated with menu items.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.RightToLeftLayoutChanged">
            <inheritdoc cref="E:System.Windows.Forms.TreeView.RightToLeftLayoutChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.SelectedItemChanged">
            <summary>
            Occurs when the item selected in the control changes.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.SelectedItemChanging">
            <summary>
            Occurs when the item selected in the control is about to change.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DynamicTreeView.TextChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TextChanged"/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.AllowCopy">
            <summary>
            Gets or sets a value indicating whether data can be copied from the tree onto
            the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <value>
            True if data can be copied from the tree onto the <see cref="T:System.Windows.Forms.Clipboard"/>;
            otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.AllowCut">
            <summary>
            Gets or sets a value indicating whether data can be moved from the tree onto
            the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <value>
            True if data can be moved from the tree onto the <see cref="T:System.Windows.Forms.Clipboard"/>;
            otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.AllowDelete">
            <summary>
            Gets or sets a value indicating whether data can be deleted from the tree.
            </summary>
            <value>
            True if data can be deleted from the tree; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.AllowNodeMove">
            <summary>
            Gets or sets a value indicating whether nodes can be moved by the user.
            </summary>
            <value>
            True if the user can move nodes; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.AllowPaste">
            <summary>
            Gets or sets a value indicating whether data can be pasted into the tree from
            the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <value>
            True if data can be pasted into the tree from the <see cref="T:System.Windows.Forms.Clipboard"/>;
            otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.BackColor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.BackgroundImage">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.BackgroundImageLayout">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.BorderStyle">
            <summary>
            Gets or sets a value indicating the border style for the control.
            </summary>
            <value>
            One of the <see cref="P:Simphony.Windows.Forms.DynamicTreeView.BorderStyle"/> values.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.CanCopy">
            <summary>
            Gets a value indicating whether the state of the tree is such that data can be copied to the
            <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <value>
            True if the state of the tree is such that data can be copied to the <see cref="T:System.Windows.Forms.Clipboard"/>;
            otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.CanCut">
            <summary>
            Gets a value indicating whether the state of the tree is such that data can be moved to the
            <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <value>
            True if the state of the tree is such that data can be moved to the <see cref="T:System.Windows.Forms.Clipboard"/>;
            otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.CanDelete">
            <summary>
            Gets a value indicating whether the state of the tree is such that data can be deleted.
            </summary>
            <value>
            True if the state of the tree is such that data can be deleted; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.CanPaste">
            <summary>
            Gets a value indicating whether the state of the tree is such that data can be pasted from the
            <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <value>
            True if the state of the tree is such that data can be pasted from the <see cref="T:System.Windows.Forms.Clipboard"/>;
            otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.Capture">
            <inheritdoc cref="P:System.Windows.Forms.Control.Capture"/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.ForeColor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.FullRowSelect">
            <inheritdoc cref="P:System.Windows.Forms.TreeView.FullRowSelect"/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.HideSelection">
            <inheritdoc cref="P:System.Windows.Forms.TreeView.HideSelection"/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.HotTracking">
            <inheritdoc cref="P:System.Windows.Forms.TreeView.HotTracking"/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.Indent">
            <inheritdoc cref="P:System.Windows.Forms.TreeView.Indent"/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.ItemHeight">
            <inheritdoc cref="P:System.Windows.Forms.TreeView.ItemHeight"/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.LabelEditOnF2">
            <summary>
            Gets or sets a value indicating whether the user can edit the label text of nodes by
            pressing the F2 key.
            </summary>
            <value>
            True if the user can edit the label text of nodes by pressing the F2 key; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.LineColor">
            <inheritdoc cref="P:System.Windows.Forms.TreeView.LineColor"/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.Padding">
            <inheritdoc cref="P:System.Windows.Forms.Control.Padding"/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.RightToLeftLayout">
            <inheritdoc cref="P:System.Windows.Forms.TreeView.RightToLeftLayout"/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.RootItem">
            <summary>
            Gets or sets the root item that the tree will display.
            </summary>
            <value>
            The root item that the tree will display.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.Scrollable">
            <inheritdoc cref="P:System.Windows.Forms.TreeView.Scrollable"/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.SelectedItem">
            <summary>
            Gets or sets the currently selected item.
            </summary>
            <value>
            The currently selected item.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.SelectedLevel">
            <summary>
            Gets the zero-based depth of the currently selected item in the tree.
            </summary>
            <value>
            The zero-based depth of the currently selected item in the tree; or -1 if no item is
            currently selected.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.ShowImages">
            <summary>
            Gets or sets a value indicating whether node images should be displayed.
            </summary>
            <value>
            True if node images should be displayed; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.ShowLines">
            <inheritdoc cref="P:System.Windows.Forms.TreeView.ShowLines"/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.ShowNodeToolTips">
            <inheritdoc cref="P:System.Windows.Forms.TreeView.ShowNodeToolTips"/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.ShowPlusMinus">
            <inheritdoc cref="P:System.Windows.Forms.TreeView.ShowPlusMinus"/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.ShowRootLines">
            <inheritdoc cref="P:System.Windows.Forms.TreeView.ShowRootLines"/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.Text">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.ToolStrip">
            <summary>
            Gets the <see cref="P:Simphony.Windows.Forms.DynamicTreeView.ToolStrip"/> that represents the tree's toolbar.
            </summary>
            <value>
            The <see cref="P:Simphony.Windows.Forms.DynamicTreeView.ToolStrip"/> that represents the tree's toolbar.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.ToolStripLocation">
            <summary>
            Gets or sets a value indicating where to display the toolbar.
            </summary>
            <value>
            An <see cref="T:System.Windows.Forms.AnchorStyles"/> indicating where to display the toolbar.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeView.CreateParams">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.BeginLabelEdit">
            <summary>
            Begins editing the label of the currently selected item.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if there is no currently selected item in the tree.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.Copy">
            <summary>
            Copies the current selection in the tree to the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <remarks>
            If the tree is not in a state in which data can be copied to the <see cref="T:System.Windows.Forms.Clipboard"/>, this
            method simply does nothing (no exception will be thrown).
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.Cut">
            <summary>
            Moves the current selection in the tree to the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <remarks>
            If the tree is not in a state in which data can be moved to the <see cref="T:System.Windows.Forms.Clipboard"/>,
            this method simply does nothing (no exception will be thrown).
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.Delete">
            <summary>
            Deletes the current selection in the tree.
            </summary>
            <remarks>
            If the tree is not in a state in which data can be deleted, this method simply
            does nothing (no exception will be thrown).
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.GetPermittedChildTypes">
            <summary>
            Gets a sequence containing the permissible types of children the currently selected item
            may have.
            </summary>
            <returns>
            A sequence containing the permissible types of children the currently selected item may
            have.
            </returns>
            <remarks>
            This method searches for permissible child types in the assembly to which the selected
            item belongs. If there is no item currently selected in the control, this method returns
            an empty sequence.
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.GetPermittedChildTypes(System.Reflection.Assembly[])">
            <summary>
            Gets a sequence containing the permissible types of children the currently selected item
            may have.
            </summary>
            <param name="assemblies">
            The assemblies to search for permissible child types.
            </param>
            <returns>
            A sequence containing the permissible types of children the currently selected item may
            have.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of assemblies is a null reference.
            </exception>
            <remarks>
            If there is no item currently selected in the control, this method returns an empty
            sequence.
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.GetPermittedSiblingTypes">
            <summary>
            Gets a sequence containing the permissible types of sibling the currently selected item
            may have.
            </summary>
            <returns>
            A sequence containing the permissible types of sibling the currently selected item may
            have.
            </returns>
            <remarks>
            This method searches for permissible sibling types in the assembly to which the selected
            item belongs. If there is no item currently selected in the control or if the currently
            selected item is the root item, this method returns an empty sequence.
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.GetPermittedSiblingTypes(System.Reflection.Assembly[])">
            <summary>
            Gets a sequence containing the permissible types of sibling the currently selected item
            may have.
            </summary>
            <param name="assemblies">
            The assemblies to search for permissible sibling types.
            </param>
            <returns>
            A sequence containing the permissible types of sibling the currently selected item may
            have.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array of assemblies is a null reference.
            </exception>
            <remarks>
            If there is no item currently selected in the control or if the currently selected item
            is the root item, this method returns an empty sequence.
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.Paste">
            <summary>
            Inserts an item into the tree using the contents of the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <remarks>
            If the <see cref="T:System.Windows.Forms.Clipboard"/> does not contain data that can be inserted into the
            tree, this method simply does nothing (no exception will be thrown).
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.CreateHandle">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnAfterCollapse(System.Object,System.Windows.Forms.TreeViewAction)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.AfterCollapse"/> event.
            </summary>
            <param name="item">
            The item that was collapsed.
            </param>
            <param name="action">
            One of the <see cref="T:System.Windows.Forms.TreeViewAction"/> values indicating the type of action that raised
            the event.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnAfterCopy(System.Object,System.Windows.Forms.TreeViewAction)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.AfterCopy"/> event.
            </summary>
            <param name="item">
            The item that was copied.
            </param>
            <param name="action">
            One of the <see cref="T:System.Windows.Forms.TreeViewAction"/> values indicating the type of action that raised
            the event.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnAfterCut(System.Object,System.Windows.Forms.TreeViewAction)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.AfterCut"/> event.
            </summary>
            <param name="item">
            The item that was cut.
            </param>
            <param name="action">
            One of the <see cref="T:System.Windows.Forms.TreeViewAction"/> values indicating the type of action that raised
            the event.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnAfterDelete(System.Object,System.Windows.Forms.TreeViewAction)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.AfterDelete"/> event.
            </summary>
            <param name="item">
            The item that was deleted.
            </param>
            <param name="action">
            One of the <see cref="T:System.Windows.Forms.TreeViewAction"/> values indicating the type of action that raised
            the event.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnAfterExpand(System.Object,System.Windows.Forms.TreeViewAction)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.AfterExpand"/> event.
            </summary>
            <param name="item">
            The item that was expanded.
            </param>
            <param name="action">
            One of the <see cref="T:System.Windows.Forms.TreeViewAction"/> values indicating the type of action that raised
            the event.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnAfterLabelEdit(System.Object,System.String)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.AfterLabelEdit"/> event.
            </summary>
            <param name="item">
            The item containing the text to edit.
            </param>
            <param name="label">
            The new text to associate with the item.
            </param>
            <returns>
            True to cancel the event; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnAfterPaste(System.Object,System.Windows.Forms.TreeViewAction)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.AfterPaste"/> event.
            </summary>
            <param name="item">
            The item that was pasted.
            </param>
            <param name="action">
            One of the <see cref="T:System.Windows.Forms.TreeViewAction"/> values indicating the type of action that raised
            the event.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnBeforeCollapse(System.Object,System.Windows.Forms.TreeViewAction)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.BeforeCollapse"/> event.
            </summary>
            <param name="item">
            The item to be collapsed.
            </param>
            <param name="action">
            One of the <see cref="T:System.Windows.Forms.TreeViewAction"/> values indicating the type of action that raised
            the event.
            </param>
            <returns>
            True to cancel the event; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnBeforeDelete(System.Object,System.Windows.Forms.TreeViewAction)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.BeforeDelete"/> event.
            </summary>
            <param name="item">
            The item to be deleted.
            </param>
            <param name="action">
            One of the <see cref="T:System.Windows.Forms.TreeViewAction"/> values indicating the type of action that raised
            the event.
            </param>
            <returns>
            True to cancel the event; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnBeforeExpand(System.Object,System.Windows.Forms.TreeViewAction)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.BeforeExpand"/> event.
            </summary>
            <param name="item">
            The item to be expanded.
            </param>
            <param name="action">
            One of the <see cref="T:System.Windows.Forms.TreeViewAction"/> values indicating the type of action that raised
            the event.
            </param>
            <returns>
            True to cancel the event; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnBeforeLabelEdit(System.Object)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.BeforeLabelEdit"/> event.
            </summary>
            <param name="item">
            The item containing the text to edit.
            </param>
            <returns>
            True to cancel the event; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnBeforePaste(System.Object,System.Windows.Forms.TreeViewAction)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.BeforePaste"/> event.
            </summary>
            <param name="item">
            The item to be expanded.
            </param>
            <param name="action">
            One of the <see cref="T:System.Windows.Forms.TreeViewAction"/> values indicating the type of action that raised
            the event.
            </param>
            <returns>
            True to cancel the event; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnItemMoved(System.Object,System.Object,System.Int32,System.Object,System.Int32)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.ItemMoved"/> event.
            </summary>
            <param name="item">
            The item that was moved.
            </param>
            <param name="oldParent">
            The item's parent before it was moved.
            </param>
            <param name="oldIndex">
            The item's index before it was moved.
            </param>
            <param name="newParent">
            The item's parent after it was moved.
            </param>
            <param name="newIndex">
            The item's index after it was moved.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnItemMoving(System.Object,System.Object,System.Int32,System.Object,System.Int32)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.ItemMoving"/> event.
            </summary>
            <param name="item">
            The item that was moved.
            </param>
            <param name="oldParent">
            The item's parent before it was moved.
            </param>
            <param name="oldIndex">
            The item's index before it was moved.
            </param>
            <param name="newParent">
            The item's parent after it was moved.
            </param>
            <param name="newIndex">
            The item's index after it was moved.
            </param>
            <returns>
            True to cancel the event; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnParentBackColorChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnParentForeColorChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnPopulateContextMenu(System.Collections.Generic.IList{System.Windows.Forms.ToolStripItem})">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.PopulateContextMenu"/> event.
            </summary>
            <param name="items">
            A list to be populated with the menu items to be displayed by the context menu.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnSelectedItemChanged(System.Object,System.Windows.Forms.TreeViewAction)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.SelectedItemChanged"/> event.
            </summary>
            <param name="item">
            The item that was selected.
            </param>
            <param name="action">
            One of the <see cref="T:System.Windows.Forms.TreeViewAction"/> values indicating the type of action that raised
            the event.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeView.OnSelectedItemChanging(System.Object,System.Windows.Forms.TreeViewAction)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.SelectedItemChanging"/> event.
            </summary>
            <param name="item">
            The item to be selected.
            </param>
            <param name="action">
            One of the <see cref="T:System.Windows.Forms.TreeViewAction"/> values indicating the type of action that raised
            the event.
            </param>
            <returns>
            True to cancel the event; otherwise, false.
            </returns>
        </member>
        <member name="T:Simphony.Windows.Forms.DynamicTreeViewCancelEventArgs">
            <summary>
            Provides data for the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.BeforeCollapse"/>, <see cref="E:Simphony.Windows.Forms.DynamicTreeView.BeforeExpand"/>,
            and <see cref="E:Simphony.Windows.Forms.DynamicTreeView.SelectedItemChanging"/> events of a <see cref="T:Simphony.Windows.Forms.DynamicTreeView"/> control.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeViewCancelEventArgs.#ctor(System.Object,System.Windows.Forms.TreeViewAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DynamicTreeViewCancelEventArgs"/> class.
            </summary>
            <param name="item">
            The item to be expanded, collapsed, or selected.
            </param>
            <param name="action">
            One of the <see cref="T:System.Windows.Forms.TreeViewAction"/> values indicating the type of action that raised
            the event.
            </param>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewCancelEventArgs.Action">
            <summary>
            Gets the type of <see cref="T:System.Windows.Forms.TreeView"/> action that raised the event.
            </summary>
            <value>
            One of the <see cref="T:System.Windows.Forms.TreeViewAction"/> values.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewCancelEventArgs.Item">
            <summary>
            Gets the item to be expanded, collapsed, or selected.
            </summary>
            <value>
            The item to be expanded, collapsed, or selected.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.DynamicTreeViewLabelEventArgs">
            <summary>
            Provides data for the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.AfterLabelEdit"/> and
            <see cref="E:Simphony.Windows.Forms.DynamicTreeView.BeforeLabelEdit"/> events of a <see cref="T:Simphony.Windows.Forms.DynamicTreeView"/> control.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeViewLabelEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DynamicTreeViewLabelEventArgs"/> class.
            </summary>
            <param name="item">
            The item containing the text to edit.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeViewLabelEventArgs.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DynamicTreeViewLabelEventArgs"/> class.
            </summary>
            <param name="item">
            The item containing the text to edit.
            </param>
            <param name="label">
            The new text to associate with the item.
            </param>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewLabelEventArgs.CancelEdit">
            <summary>
            Gets or sets a value indicating whether the edit has been canceled.
            </summary>
            <value>
            True if the edit has been canceled; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewLabelEventArgs.Item">
            <summary>
            Gets the item to be expanded, collapsed, or selected.
            </summary>
            <value>
            The item to be expanded, collapsed, or selected.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewLabelEventArgs.Label">
            <summary>
            Gets the new text to associate with the item.
            </summary>
            <value>
            The new text to associate with the item.
            </value>
            <remarks>
            The value of this property is null if the user presses ESC to cancel the edit
            or presses ENTER without modifying the label text. If the user edits the label
            text, the value of this property is the new label text. This is true even if
            the final value of edited label text is the same as its original value.
            </remarks>
        </member>
        <member name="T:Simphony.Windows.Forms.DynamicTreeViewItemMovedEventArgs">
            <summary>
            Provides data for the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.ItemMoved"/> event of a
            <see cref="T:Simphony.Windows.Forms.DynamicTreeView"/> control.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DynamicTreeViewItemMovedEventArgs.#ctor(System.Object,System.Object,System.Int32,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DynamicTreeViewItemMovedEventArgs"/> class.
            </summary>
            <param name="item">
            The item that was moved.
            </param>
            <param name="oldParent">
            The item's parent before it was moved.
            </param>
            <param name="oldIndex">
            The item's index before it was moved.
            </param>
            <param name="newParent">
            The item's parent after it was moved.
            </param>
            <param name="newIndex">
            The item's index after it was moved.
            </param>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewItemMovedEventArgs.Item">
            <summary>
            Gets the item that was moved.
            </summary>
            <value>
            The item that was moved.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewItemMovedEventArgs.NewIndex">
            <summary>
            Gets the item's index after it was moved.
            </summary>
            <value>
            The item's index after it was moved.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewItemMovedEventArgs.NewParent">
            <summary>
            Gets the item's parent after it was moved.
            </summary>
            <value>
            The item's parent after it was moved.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewItemMovedEventArgs.OldIndex">
            <summary>
            Gets the item's index before it was moved.
            </summary>
            <value>
            The item's index before it was moved.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DynamicTreeViewItemMovedEventArgs.OldParent">
            <summary>
            Gets the item's parent before it was moved.
            </summary>
            <value>
            The item's parent before it was moved.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.EllipsisButtonTextBox">
            <summary>
            A textbox control that contains an ellipsis button.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.EllipsisButtonTextBox"/> class.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.EllipsisButtonTextBox.BackgroundImageChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.BackgroundImageChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.EllipsisButtonTextBox.BackgroundImageLayoutChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.EllipsisButtonTextBox.ButtonClicked">
            <summary>
            Occurs when the ellipsis button is clicked.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.EllipsisButtonTextBox.ButtonEnabledChanged">
            <summary>
            Occurs when the value of the <see cref="P:Simphony.Windows.Forms.EllipsisButtonTextBox.ButtonEnabled"/> property has changed.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.EllipsisButtonTextBox.HideSelectionChanged">
            <inheritdoc cref="E:System.Windows.Forms.TextBoxBase.HideSelectionChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.EllipsisButtonTextBox.ModifiedChanged">
            <inheritdoc cref="E:System.Windows.Forms.TextBoxBase.ModifiedChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.EllipsisButtonTextBox.PaddingChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.PaddingChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.EllipsisButtonTextBox.Paint">
            <inheritdoc cref="E:System.Windows.Forms.Control.Paint"/>
        </member>
        <member name="E:Simphony.Windows.Forms.EllipsisButtonTextBox.ReadOnlyChanged">
            <inheritdoc cref="E:System.Windows.Forms.TextBoxBase.ReadOnlyChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.EllipsisButtonTextBox.TextAlignChanged">
            <inheritdoc cref="E:System.Windows.Forms.TextBox.TextAlignChanged"/>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.BackColor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.BackgroundImage">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.BackgroundImageLayout">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.BorderStyle">
            <summary>
            Gets or sets a value indicating the border style for the control.
            </summary>
            <value>
            One of the <see cref="P:Simphony.Windows.Forms.EllipsisButtonTextBox.BorderStyle"/> values.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.ButtonEnabled">
            <summary>
            Gets or sets a value indicating whether the ellipsis button is enabled.
            </summary>
            <value>
            True if the the ellipsis button is enabled; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.CharacterCasing">
            <inheritdoc cref="P:System.Windows.Forms.TextBox.CharacterCasing"/>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.ForeColor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.HideSelection">
            <inheritdoc cref="P:System.Windows.Forms.TextBoxBase.HideSelection"/>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.MaxLength">
            <inheritdoc cref="P:System.Windows.Forms.TextBoxBase.MaxLength"/>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.Modified">
            <inheritdoc cref="P:System.Windows.Forms.TextBoxBase.Modified"/>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.Padding">
            <inheritdoc cref="P:System.Windows.Forms.Control.Padding"/>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.PasswordChar">
            <inheritdoc cref="P:System.Windows.Forms.TextBox.PasswordChar"/>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.ReadOnly">
            <inheritdoc cref="P:System.Windows.Forms.TextBoxBase.ReadOnly"/>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.Text">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.TextAlign">
            <inheritdoc cref="P:System.Windows.Forms.TextBox.TextAlign"/>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.UseSystemPasswordChar">
            <inheritdoc cref="P:System.Windows.Forms.TextBox.UseSystemPasswordChar"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.AppendText(System.String)">
            <inheritdoc cref="M:System.Windows.Forms.TextBoxBase.AppendText(System.String)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.Clear">
            <inheritdoc cref="M:System.Windows.Forms.TextBoxBase.Clear"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.ClearUndo">
            <inheritdoc cref="M:System.Windows.Forms.TextBoxBase.ClearUndo"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.Copy">
            <inheritdoc cref="M:System.Windows.Forms.TextBoxBase.Copy"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.Cut">
            <inheritdoc cref="M:System.Windows.Forms.TextBoxBase.Cut"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.DeselectAll">
            <inheritdoc cref="M:System.Windows.Forms.TextBoxBase.DeselectAll"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.GetCharFromPosition(System.Drawing.Point)">
            <inheritdoc cref="M:System.Windows.Forms.TextBoxBase.GetCharFromPosition(System.Drawing.Point)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.GetCharIndexFromPosition(System.Drawing.Point)">
            <inheritdoc cref="M:System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition(System.Drawing.Point)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.GetPositionFromCharIndex(System.Int32)">
            <inheritdoc cref="M:System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex(System.Int32)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.Paste">
            <inheritdoc cref="M:System.Windows.Forms.TextBoxBase.Paste"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.Paste(System.String)">
            <inheritdoc cref="M:System.Windows.Forms.TextBox.Paste(System.String)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.Select(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Windows.Forms.TextBoxBase.Select(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.SelectAll">
            <inheritdoc cref="M:System.Windows.Forms.TextBoxBase.SelectAll"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.Undo">
            <inheritdoc cref="M:System.Windows.Forms.TextBoxBase.Undo"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnButtonClicked(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.EllipsisButtonTextBox.ButtonClicked"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnButtonEnabledChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.EllipsisButtonTextBox.ButtonEnabledChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnClick(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnFontChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnGotFocus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnHideSelectionChanged(System.EventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.TextBoxBase.OnHideSelectionChanged(System.EventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnLostFocus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnModifiedChanged(System.EventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.TextBoxBase.OnModifiedChanged(System.EventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnMouseEnter(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnMouseLeave(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnParentBackColorChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnParentForeColorChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnReadOnlyChanged(System.EventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.TextBoxBase.OnReadOnlyChanged(System.EventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnRightToLeftChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnSizeChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.OnTextAlignChanged(System.EventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.TextBox.OnTextAlignChanged(System.EventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.EllipsisButtonTextBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.EllipsisButtonTextBox.EllipsisButtonTextBoxDesigner">
            <summary>
            Custom control designer for the <see cref="T:Simphony.Windows.Forms.EllipsisButtonTextBox"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.EllipsisButtonTextBox.EllipsisButtonTextBoxDesigner.SelectionRules">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.FlatRichTextBox">
            <summary>
            A customized version of the <see cref="T:System.Windows.Forms.RichTextBox"/> control that supports styled borders
            and a toolbar.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatRichTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.FlatRichTextBox"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.FlatRichTextBox.CanCopy">
            <summary>
            Gets a value indicating whether the state of the control is such that data can be copied
            to the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <value>
            True if the state of the control is such that data can be copied to the
            <see cref="T:System.Windows.Forms.Clipboard"/>; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.FlatRichTextBox.CanCut">
            <summary>
            Gets a value indicating whether the state of the control is such that data can be moved
            to the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <value>
            True if the state of the grid is such that data can be moved to the
            <see cref="T:System.Windows.Forms.Clipboard"/>; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.FlatRichTextBox.CanDelete">
            <summary>
            Gets a value indicating whether the state of the control is such that data can be
            deleted.
            </summary>
            <value>
            True if the state of the control is such that data can be deleted; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.FlatRichTextBox.CanPaste">
            <summary>
            Gets a value indicating whether the state of the control is such that data can be pasted
            from the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <value>
            True if the state of the control is such that data can be pasted from the
            <see cref="T:System.Windows.Forms.Clipboard"/>; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.FlatRichTextBox.EnforceFontFace">
            <summary>
            Gets or sets a value indicating whether the font face specified by the
            <see cref="P:System.Windows.Forms.RichTextBox.Font"/> property is the only font face permitted.
            </summary>
            <value>
            True if the font face specified by the <see cref="P:System.Windows.Forms.RichTextBox.Font"/> property is the
            only font face permitted; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.FlatRichTextBox.Padding">
            <inheritdoc cref="P:System.Windows.Forms.Control.Padding"/>
        </member>
        <member name="P:Simphony.Windows.Forms.FlatRichTextBox.SelectionBold">
            <summary>
            Gets or sets a value indicating whether the bold font style is applied to the current
            selection.
            </summary>
            <value>
            True if the bold font style is applied to the current selection; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.FlatRichTextBox.SelectionItalic">
            <summary>
            Gets or sets a value indicating whether the italic font style is applied to the current
            selection.
            </summary>
            <value>
            True if the italic font style is applied to the current selection; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.FlatRichTextBox.SelectionStruck">
            <summary>
            Gets or sets a value indicating whether the strikethrough font style is applied to the
            current selection.
            </summary>
            <value>
            True if the strikethrough font style is applied to the current selection; otherwise,
            false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.FlatRichTextBox.SelectionUnderlined">
            <summary>
            Gets or sets a value indicating whether the underline font style is applied to the
            current selection.
            </summary>
            <value>
            True if the underline font style is applied to the current selection; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.FlatRichTextBox.ToolStripLocation">
            <summary>
            Gets or sets a value indicating where to display the toolbar.
            </summary>
            <value>
            An <see cref="T:System.Windows.Forms.AnchorStyles"/> indicating where to display the toolbar.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.FlatRichTextBox.CreateParams">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.FlatRichTextBox.ToolStrip">
            <summary>
            Gets the <see cref="P:Simphony.Windows.Forms.FlatRichTextBox.ToolStrip"/> displayed by the control.
            </summary>
            <value>
            The <see cref="P:Simphony.Windows.Forms.FlatRichTextBox.ToolStrip"/> displayed by the control.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatRichTextBox.GrowSelectionFont">
            <summary>
            Increases the size of the font in the current selection.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatRichTextBox.IndentSelection">
            <summary>
            Increases the paragraph indent of the current selection.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatRichTextBox.OutdentSelection">
            <summary>
            Decreases the paragraph indent of the current selection.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatRichTextBox.SetSelectionAlignment(Simphony.Windows.Forms.RichTextAlignment)">
            <summary>
            Sets the paragraph alignment of the current selection.
            </summary>
            <param name="alignment">
            The paragraph alignment to which the current selection should be set.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatRichTextBox.SetSelectionLineSpacing(Simphony.Windows.Forms.RichTextLineSpacing)">
            <summary>
            Sets the paragraph line spacing of the current selection.
            </summary>
            <param name="lineSpacing">
            The paragraph line spacing to which the current selection should be set.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatRichTextBox.SetSelectionNumbering(Simphony.Windows.Forms.RichTextNumbering)">
            <summary>
            Sets the paragraph numbering of the current selection.
            </summary>
            <param name="numbering">
            The paragraph numbering to which the current selection should be set.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatRichTextBox.ShrinkSelectionFont">
            <summary>
            Decreases the size of the font in the current selection.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatRichTextBox.CreateHandle">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatRichTextBox.OnSelectionChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatRichTextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatRichTextBox.WndProc(System.Windows.Forms.Message@)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.FullScreenManager">
            <summary>
            Component used to cause a form to enter/exit full screen mode.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.FullScreenManager.ContainerControl">
            <summary>
            Gets or sets the control the component has been placed on.
            </summary>
            <value>
            The control the component has been placed on; or a null reference if the component
            has not been placed on a control.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.FullScreenManager.Site">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.FullScreenManager.EnterFullScreen">
            <summary>
            Causes the form to enter full screen mode.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the form is already in full screen mode.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.FullScreenManager.ExitFullScreen">
            <summary>
            Causes the form to exit full screen mode.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the form is not in full screen mode.
            </exception>
        </member>
        <member name="T:Simphony.Windows.Forms.ITableGridColumn">
            <summary>
            Interface implemented by classes implementing a <see cref="T:System.Windows.Forms.DataGridViewColumn"/> intended to
            be used with the <see cref="T:Simphony.Windows.Forms.TableGrid"/>.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.ITableGridColumn.Property">
            <summary>
            Gets the property descriptor associated with the column.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.PopulateContextMenuEventArgs">
            <summary>
            Provides data for the <see cref="E:Simphony.Windows.Forms.DynamicTreeView.PopulateContextMenu"/> event.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.PopulateContextMenuEventArgs.#ctor(System.Collections.Generic.IList{System.Windows.Forms.ToolStripItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.PopulateContextMenuEventArgs"/> class.
            </summary>
            <param name="items">
            A list to be populated with the menu items to be displayed by the context menu.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified list is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Windows.Forms.PopulateContextMenuEventArgs.Items">
            <summary>
            Gets a list to be populated with the menu items to be displayed by the context menu.
            </summary>
            <value>
            A list to be populated with the menu items to be displayed by the context menu.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.PopupWindow">
            <summary>
            A custom control for creating a popup window.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.PopupWindow.#ctor(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.PopupWindow"/> class.
            </summary>
            <param name="owner">
            The control that opened the popup window.
            </param>
            <param name="child">
            The control to display in the popup window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified owner control or the specified child control is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Windows.Forms.PopupWindow.CreateParams">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.PopupWindow.PreFilterMessage(System.Windows.Forms.Message@)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.PopupWindow.ShowModal">
            <summary>
            Displays the popup window to the user and does not return until the popup window has been
            closed.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.PopupWindow.WndProc(System.Windows.Forms.Message@)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.PropertyGridDialog">
            <summary>
            A dialog box that edits the primitive-type properties of an object using a property grid.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.PropertyGridDialog.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.PropertyGridDialog"/> class.
            </summary>
            <param name="selectedObject">
            The object to be edited by the dialog.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.PropertyGridDialog.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.PropertyGridDialog"/> class.
            </summary>
            <param name="selectedObject">
            The object to be edited by the dialog.
            </param>
            <param name="category">
            The category to filter for; or a null reference if the dialog should not filter by category.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Windows.Forms.PropertyGridDialog.HelpVisible">
            <summary>
            Gets or sets a value indicating whether the help text is visible.
            </summary>
            <value>
            True if the help text is visible; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.PropertyGridDialog.PropertySort">
            <summary>
            Gets or sets the type of sorting the property grid uses to display properties.
            </summary>
            <value>
            The type of sorting the property grid uses to display properties.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.PropertyGridDialog.ToolbarVisible">
            <summary>
            Gets or sets a value indicating whether the toolbar is visible.
            </summary>
            <value>
            True if the toolbar is visible; otherwise false.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.RichTextNumbering">
            <summary>
            Defines the different numbering formats in a <see cref="T:System.Windows.Forms.RichTextBox"/> control.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.RichTextNumbering.Arabic">
            <summary>
            Use Arabic numbers (0, 1, 2, and so on).
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.RichTextNumbering.Bullet">
            <summary>
            Insert a bullet at the beginning of each selected paragraph.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.RichTextNumbering.LowerCaseLetter">
            <summary>
            Use lowercase letters (a, b, c, and so on).
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.RichTextNumbering.LowerCaseRoman">
            <summary>
            Use lowercase Roman letters (i, ii, iii, and so on).
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.RichTextNumbering.None">
            <summary>
            No paragraph numbering or bullets.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.RichTextNumbering.UpperCaseLetter">
            <summary>
            Use uppercase letters (A, B, C, and so on).
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.RichTextNumbering.UpperCaseRoman">
            <summary>
            Use uppercase Roman letters (I, II, III, and so on).
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.SimphonyCommonColorTable">
            <summary>
            A custom <see cref="T:System.Windows.Forms.ProfessionalColorTable"/> containing color information common to both
            menu strips and tool strips.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.SimphonyCommonColorTable.ButtonCheckedGradientBegin">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.SimphonyCommonColorTable.ButtonCheckedGradientEnd">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.SimphonyMenuStripColorTable">
            <summary>
            A custom <see cref="T:System.Windows.Forms.ProfessionalColorTable"/> containing color information for menu strips.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.SimphonyMenuStripRenderer">
            <summary>
            A custom <see cref="T:System.Windows.Forms.ToolStripRenderer"/> for rendering menu strips.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.SimphonyMenuStripRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.SimphonyMenuStripRenderer"/> class.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.SimphonyToolStripColorTable">
            <summary>
            A custom <see cref="T:System.Windows.Forms.ProfessionalColorTable"/> containing color information for tool strips.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.SimphonyToolStripRenderer">
            <summary>
            A custom <see cref="T:System.Windows.Forms.ToolStripRenderer"/> for rendering tool strips.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.SimphonyToolStripRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.SimphonyToolStripRenderer"/> class.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.TableGridControl">
            <summary>
            Abstract base class for an <see cref="T:System.Windows.Forms.IDataGridViewEditingControl"/> intended to be used with
            the <see cref="T:Simphony.Windows.Forms.TableGrid"/>.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridControl.EditingControlDataGridView">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridControl.EditingControlFormattedValue">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridControl.EditingControlRowIndex">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridControl.EditingControlValueChanged">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridControl.EditingPanelCursor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridControl.RepositionEditingControlOnValueChange">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridControl.Context">
            <summary>
            Gets the type descriptor context to use when invoking the control's associated type converter or editor.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridControl.Converter">
            <summary>
            Gets the type converter associated with the control.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridControl.Editor">
            <summary>
            Gets the design value editor associated with the control.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridControl.Property">
            <summary>
            Gets the property descriptor associated with the cell.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridControl.Provider">
            <summary>
            Gets the service provider to use when invoking the control's associated type converter or editor.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridControl.PrepareEditingControlForEdit(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.TableGridCell`2">
            <summary>
            Base class for classes implementing a <see cref="T:System.Windows.Forms.DataGridViewCell"/> intended to be used with
            the <see cref="T:Simphony.Windows.Forms.TableGrid"/>.
            </summary>
            <typeparam name="TControl">
            The type of control to be hosted by the cell.
            </typeparam>
            <typeparam name="TValue">
            The type of value to be edited by the cell.
            </typeparam>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridCell`2.Container">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridCell`2.EditType">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridCell`2.Instance">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridCell`2.PropertyDescriptor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridCell`2.ValueType">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridCell`2.Property">
            <summary>
            Gets the property descriptor associated with the cell.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridCell`2.Converter">
            <summary>
            Gets the type converter associated with the cell.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridCell`2.Editor">
            <summary>
            Gets the design value editor associated with the cell.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridCell`2.CloseDropDown">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridCell`2.DropDownControl(System.Windows.Forms.Control)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridCell`2.GetService(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridCell`2.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridCell`2.OnComponentChanged">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridCell`2.OnComponentChanging">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridCell`2.ShowDialog(System.Windows.Forms.Form)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridCell`2.ParseFormattedValue(System.Object,System.Windows.Forms.DataGridViewCellStyle,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridCell`2.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridCell`2.ShowsEditingControl(System.Int32)">
            <summary>
            Determines whether this cell, at the given row index, shows the grid's editing control or
            not.
            </summary>
            <param name="rowIndex">
            The row index in question.
            </param>
            <returns>
            True if this cell shows the grid's editing control; otherwise false.
            </returns>
            <remarks>
            The row index needs to be provided as a parameter because this cell may be shared among
            multiple rows.
            </remarks>
        </member>
        <member name="T:Simphony.Windows.Forms.TableGridColumn`1">
            <summary>
            Base class for classes implementing a <see cref="T:System.Windows.Forms.DataGridViewColumn"/> intended to be used
            with the <see cref="T:Simphony.Windows.Forms.TableGrid"/>.
            </summary>
            <typeparam name="T">
            The type of cell to use as a cell template.
            </typeparam>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridColumn`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TableGridColumn`1"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridColumn`1.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TableGridColumn`1"/> class.
            </summary>
            <param name="property">
            The <see cref="T:System.ComponentModel.PropertyDescriptor"/> associated with the column.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:System.ComponentModel.PropertyDescriptor"/> is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridColumn`1.CellTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridColumn`1.Simphony#Windows#Forms#ITableGridColumn#Property">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridColumn`1.Property">
            <summary>
            Gets the property descriptor associated with the column.
            </summary>
            <value>
            The property descriptor associated with the column.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.StatisticalChart">
            <summary>
            A chart control that can display percentile bars along the secondary x-axis.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.StatisticalChart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.StatisticalChart"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.StatisticalChart.ErrorText">
            <summary>
            Gets or sets an error message to display on the surface of the control if all chart areas are hidden.
            </summary>
            <value>
            An error message to display on the surface of the control if all chart areas are hidden.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.StatisticalChart.ShowDiagonalTrendLine">
            <summary>
            Gets or sets a value indicating whether the diagonal trend line should be visible.
            </summary>
            <value>
            True if the diagonal trend line should be visible; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.StatisticalChart.ShowPercentileBars">
            <summary>
            Gets or sets a value indicating whether the percentile bars are visible.
            </summary>
            <value>
            True if the percentile bars are visible; otherwise false.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.StatisticalChart.ResetPercentileBars">
            <summary>
            Reinitializes the percentile bar annotations.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.StatisticalChart.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.TabClosingEventArgs">
            <summary>
            Provides data for the <see cref="E:Simphony.Windows.Forms.TabSheet.TabClosing"/> event of the <see cref="T:Simphony.Windows.Forms.TabSheet"/>
            control.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TabClosingEventArgs.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TabClosingEventArgs"/> class.
            </summary>
            <param name="item">
            The item corresponding to the tab being closed.
            </param>
            <param name="cancel">
            True to cancel the event; otherwise, false.
            </param>
        </member>
        <member name="P:Simphony.Windows.Forms.TabClosingEventArgs.Item">
            <summary>
            Gets the item corresponding to the tab being closed.
            </summary>
            <value>
            The item corresponding to the tab being closed.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.TabClosedEventArgs">
            <summary>
            Provides data for the <see cref="E:Simphony.Windows.Forms.TabSheet.TabClosed"/> event of the <see cref="T:Simphony.Windows.Forms.TabSheet"/>
            control.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TabClosedEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TabClosedEventArgs"/> class.
            </summary>
            <param name="item">
            The item corresponding to the tab that was closed.
            </param>
        </member>
        <member name="P:Simphony.Windows.Forms.TabClosedEventArgs.Item">
            <summary>
            Gets the item corresponding to the tab that was closed.
            </summary>
            <value>
            The item corresponding to the tab that was closed.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.TableGridDropDownCell">
            <summary>
            A <see cref="T:System.Windows.Forms.DataGridViewCell"/> used to edit a property with standard values.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridDropDownCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridDropDownCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.TableGridDropDownColumn">
            <summary>
            A <see cref="T:System.Windows.Forms.DataGridViewColumn"/> used to edit a property with standard values.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridDropDownColumn.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TableGridDropDownColumn"/> class.
            </summary>
            <param name="property">
            The <see cref="T:System.ComponentModel.PropertyDescriptor"/> associated with the column.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:System.ComponentModel.PropertyDescriptor"/> is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.Windows.Forms.TableGridDropDownControl">
            <summary>
            A TableGrid control used to edit a property with standard values.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridDropDownControl.EditingControlDataGridView">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridDropDownControl.EditingControlFormattedValue">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridDropDownControl.EditingControlRowIndex">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridDropDownControl.EditingControlValueChanged">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridDropDownControl.EditingPanelCursor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridDropDownControl.RepositionEditingControlOnValueChange">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridDropDownControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridDropDownControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridDropDownControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridDropDownControl.PrepareEditingControlForEdit(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridDropDownControl.OnSelectedIndexChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridDropDownControl.OnTextChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridDropDownControl.WndProc(System.Windows.Forms.Message@)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridDropDownControl.DrawBackground(System.IntPtr)">
            <summary>
            Draws the background for the control.
            </summary>
            <param name="hdc">
            The device context on which the control is being rendered.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridDropDownControl.DrawButton(System.IntPtr)">
            <summary>
            Draws the drop down button for the control.
            </summary>
            <param name="hdc">
            The device context on which the control is being rendered.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridDropDownControl.DrawText(System.IntPtr)">
            <summary>
            Draws the text for the control.
            </summary>
            <param name="hdc">
            The device context on which the control is being rendered.
            </param>
        </member>
        <member name="T:Simphony.Windows.Forms.TableGridEditorCell">
            <summary>
            A <see cref="T:System.Windows.Forms.DataGridViewCell"/> used to edit a property with a design value editor.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridEditorCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridEditorCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.TableGridEditorColumn">
            <summary>
            A <see cref="T:System.Windows.Forms.DataGridViewColumn"/> used to edit a property with a design value editor.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridEditorColumn.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TableGridEditorColumn"/> class.
            </summary>
            <param name="property">
            The <see cref="T:System.ComponentModel.PropertyDescriptor"/> associated with the column.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:System.ComponentModel.PropertyDescriptor"/> is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridEditorColumn.ReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.DataGridViewDistributionControl">
            <summary>
            A <see cref="T:System.Windows.Forms.IDataGridViewEditingControl"/> used to edit a <see cref="T:Simphony.Mathematics.Distribution"/> object.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDistributionControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DataGridViewDistributionControl"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewDistributionControl.EditingControlDataGridView">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewDistributionControl.EditingControlFormattedValue">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewDistributionControl.EditingControlRowIndex">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewDistributionControl.EditingControlValueChanged">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewDistributionControl.EditingPanelCursor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewDistributionControl.RepositionEditingControlOnValueChange">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDistributionControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDistributionControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDistributionControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDistributionControl.PrepareEditingControlForEdit(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDistributionControl.OnValueChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDistributionControl.NotifyDataGridViewOfValueChange">
            <summary>
            Updates the local dirty state and notifies the grid of the value change.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.DataGridViewDistributionCell">
            <summary>
            A <see cref="T:System.Windows.Forms.DataGridViewCell"/> used to edit a <see cref="T:Simphony.Mathematics.Distribution"/> object.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDistributionCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.DataGridViewDistributionColumn">
            <summary>
            A <see cref="T:System.Windows.Forms.DataGridViewColumn"/> used to edit a <see cref="T:Simphony.Mathematics.Distribution"/> object.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.DataGridViewSpinBoxCell">
            <summary>
            A <see cref="T:System.Windows.Forms.DataGridViewCell"/> used to edit a numeric value using a spin box.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewSpinBoxCell.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places to display in the spin box.
            </summary>
            <value>
            The number of decimal places to display in the spin box.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewSpinBoxCell.Increment">
            <summary>
            Gets or sets the value to increment or decrement the spin box when the up or down buttons
            are clicked.
            </summary>
            <value>
            The value to increment or decrement the spin box when the up or down buttons are clicked.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewSpinBoxCell.Maximum">
            <summary>
            Gets or sets the maximum allowed value for the spin box.
            </summary>
            <value>
            The maximum allowed value for the spin box.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewSpinBoxCell.Minimum">
            <summary>
            Gets or sets the minimum allowed value for the spin box.
            </summary>
            <value>
            The minimum allowed value for the spin box.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewSpinBoxCell.ThousandsSeparator">
            <summary>
            Gets or sets a value indicating whether a thousands separator is displayed in the spin
            box when appropriate.
            </summary>
            <value>
            True if the thousands separator should be displayed; otherwise false.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxCell.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxCell.KeyEntersEditMode(System.Windows.Forms.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxCell.SetDecimalPlaces(System.Int32,System.Int32)">
            <summary>
            Sets the value of the <see cref="P:Simphony.Windows.Forms.DataGridViewSpinBoxCell.DecimalPlaces"/> property.
            </summary>
            <param name="rowIndex">
            The index of the row.
            </param>
            <param name="value">
            The value to which the property should be set.
            </param>
            <remarks>
            This method is provided for performance reasons: the column calls this method so it can
            invalidate the entire column at once instead of invalidating each cell individually.
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxCell.SetIncrement(System.Int32,System.Decimal)">
            <summary>
            Sets the value of the <see cref="P:Simphony.Windows.Forms.DataGridViewSpinBoxCell.Increment"/> property.
            </summary>
            <param name="rowIndex">
            The index of the row.
            </param>
            <param name="value">
            The value to which the property should be set.
            </param>
            <remarks>
            This method is provided for performance reasons: the column calls this method so it can
            invalidate the entire column at once instead of invalidating each cell individually.
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxCell.SetMaximum(System.Int32,System.Decimal)">
            <summary>
            Sets the value of the <see cref="P:Simphony.Windows.Forms.DataGridViewSpinBoxCell.Maximum"/> property.
            </summary>
            <param name="rowIndex">
            The index of the row.
            </param>
            <param name="value">
            The value to which the property should be set.
            </param>
            <remarks>
            This method is provided for performance reasons: the column calls this method so it can
            invalidate the entire column at once instead of invalidating each cell individually.
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxCell.SetMinimum(System.Int32,System.Decimal)">
            <summary>
            Sets the value of the <see cref="P:Simphony.Windows.Forms.DataGridViewSpinBoxCell.Minimum"/> property.
            </summary>
            <param name="rowIndex">
            The index of the row.
            </param>
            <param name="value">
            The value to which the property should be set.
            </param>
            <remarks>
            This method is provided for performance reasons: the column calls this method so it can
            invalidate the entire column at once instead of invalidating each cell individually.
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxCell.SetThousandsSeparator(System.Int32,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Simphony.Windows.Forms.DataGridViewSpinBoxCell.ThousandsSeparator"/> property.
            </summary>
            <param name="rowIndex">
            The index of the row.
            </param>
            <param name="value">
            The value to which the property should be set.
            </param>
            <remarks>
            This method is provided for performance reasons: the column calls this method so it can
            invalidate the entire column at once instead of invalidating each cell individually.
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxCell.OnCommonChange">
            <summary>
            Called when a cell characteristic that affects its rendering and/or preferred size has
            changed.
            </summary>
            <remarks>
            This implementation only takes care of repainting the cells. The DataGridView's
            auto-sizing methods also need to be called in cases where some grid elements auto-size.
            </remarks>
        </member>
        <member name="T:Simphony.Windows.Forms.DataGridViewSpinBoxColumn">
            <summary>
            A <see cref="T:System.Windows.Forms.DataGridViewColumn"/> used to edit a numeric value using a spin box.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewSpinBoxColumn.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places to display in the spin box.
            </summary>
            <value>
            The number of decimal places to display in the spin box.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewSpinBoxColumn.Increment">
            <summary>
            Gets or sets the value to increment or decrement the spin box when the up or down buttons
            are clicked.
            </summary>
            <value>
            The value to increment or decrement the spin box when the up or down buttons are clicked.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewSpinBoxColumn.Maximum">
            <summary>
            Gets or sets the maximum allowed value for the spin box.
            </summary>
            <value>
            The maximum allowed value for the spin box.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewSpinBoxColumn.Minimum">
            <summary>
            Gets or sets the minimum allowed value for the spin box.
            </summary>
            <value>
            The minimum allowed value for the spin box.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewSpinBoxColumn.ThousandsSeparator">
            <summary>
            Gets or sets a value indicating whether a thousands separator is displayed in the spin
            box when appropriate.
            </summary>
            <value>
            True if the thousands separator should be displayed; otherwise false.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.DataGridViewSpinBoxControl">
            <summary>
            A <see cref="T:System.Windows.Forms.IDataGridViewEditingControl"/> used to edit a numeric value using a spin box.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DataGridViewSpinBoxControl"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewSpinBoxControl.EditingControlDataGridView">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewSpinBoxControl.EditingControlFormattedValue">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewSpinBoxControl.EditingControlRowIndex">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewSpinBoxControl.EditingControlValueChanged">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewSpinBoxControl.EditingPanelCursor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewSpinBoxControl.RepositionEditingControlOnValueChange">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxControl.PrepareEditingControlForEdit(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxControl.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxControl.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxControl.OnTextBoxResize(System.Object,System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxControl.OnValueChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewSpinBoxControl.NotifyDataGridViewOfValueChange">
            <summary>
            Updates the local dirty state and notifies the grid of the value change.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.DataGridViewTimeControl">
            <summary>
            A <see cref="T:System.Windows.Forms.IDataGridViewEditingControl"/> used to edit a <see cref="T:System.TimeSpan"/> object.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewTimeControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DataGridViewTimeControl"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewTimeControl.EditingControlDataGridView">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewTimeControl.EditingControlFormattedValue">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewTimeControl.EditingControlRowIndex">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewTimeControl.EditingControlValueChanged">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewTimeControl.EditingPanelCursor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewTimeControl.RepositionEditingControlOnValueChange">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewTimeControl.Value">
            <summary>
            Gets or sets the time value assigned to the control.
            </summary>
            <value>
            The time value assigned to the control.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewTimeControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewTimeControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewTimeControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewTimeControl.PrepareEditingControlForEdit(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewTimeControl.OnValueChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewTimeControl.NotifyDataGridViewOfValueChange">
            <summary>
            Updates the local dirty state and notifies the grid of the value change.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.DataGridViewTimeCell">
            <summary>
            A <see cref="T:System.Windows.Forms.DataGridViewCell"/> used to edit a <see cref="T:System.TimeSpan"/> object.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewTimeCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DataGridViewTimeCell"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewTimeCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.DataGridViewTimeColumn">
            <summary>
            A <see cref="T:System.Windows.Forms.DataGridViewColumn"/> used to edit a <see cref="T:System.TimeSpan"/> object.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.DistributionBox">
            <summary>
            A custom control for editing <see cref="T:Simphony.Mathematics.Distribution"/> objects.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.DistributionBox.ButtonClicked">
            <inheritdoc cref="E:Simphony.Windows.Forms.EllipsisButtonTextBox.ButtonClicked"/>
        </member>
        <member name="E:Simphony.Windows.Forms.DistributionBox.ValueChanged">
            <summary>
            Occurs when the value of the control changes.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DistributionBox.Text">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DistributionBox.Value">
            <summary>
            Gets or sets the probability distribution the control will edit.
            </summary>
            <value>
            The probability distribution the control will edit.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.DistributionBox.CloseDropDown">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DistributionBox.DropDownControl(System.Windows.Forms.Control)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DistributionBox.System#IServiceProvider#GetService(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DistributionBox.ShowDialog(System.Windows.Forms.Form)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DistributionBox.OnButtonClicked(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DistributionBox.OnValidating(System.ComponentModel.CancelEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DistributionBox.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.DistributionBox.ValueChanged"/> event.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="T:Simphony.Windows.Forms.DualButtonDialogBase">
            <summary>
            Base class from which dialog boxes can be derived.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.DualButtonDialogBase.AcceptButton">
            <summary>
            The form's OK button.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.DualButtonDialogBase.CancelButton">
            <summary>
            The form's cancel button.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DualButtonDialogBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DualButtonDialogBase"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DualButtonDialogBase.SystemMenuCloseItemEnabled">
            <summary>
            Gets or sets a value indicating whether the close item on the system menu is enabled.
            </summary>
            <value>
            True if the close item on the system menu is enabled; false if it is disabled.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.DualButtonDialogBase.ButtonStripHeight">
            <summary>
            Gets the height of the button strip.
            </summary>
            <value>
            The height of the button strip in pixels.
            </value>
            <remarks>
            The button strip is the area at the bottom of the dialog containing the OK and Cancel buttons.
            </remarks>
        </member>
        <member name="T:Simphony.Windows.Forms.FilteredTextBox">
            <summary>
            Represents a read-only multi-line text box control whose individual lines can be filtered for
            a specified string.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.FilteredTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.FilteredTextBox"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.FilteredTextBox.Filter">
            <summary>
            Gets or sets the string to filter for.
            </summary>
            <value>
            The string to filter for.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.FilteredTextBox.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether or not the filter should ignore case.
            </summary>
            <value>
            True if the filter should ignore case; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.FilteredTextBox.IsFiltered">
            <summary>
            Gets a value indicating whether a filter has been applied.
            </summary>
            <value>
            True if a filter has been applied; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.FilteredTextBox.Text">
            <summary>
            Gets the current text in the FilteredTextBox.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.FilteredTextBox.AppendText(System.String)">
            <summary>
            Appends text to the text box.
            </summary>
            <param name="text">
            The text to append to the text box.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.FilteredTextBox.Clear">
            <summary>
            Clears all text from the text box.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.FilteredTextBoxTraceListener">
            <summary>
            Implements a listener that will send trace and debug output to a FilteredTextBox.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.FilteredTextBoxTraceListener.#ctor(Simphony.Windows.Forms.FilteredTextBox)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.FilteredTextBoxTraceListener"/> class.
            </summary>
            <param name="textBox">
            The FilteredTextbox the listener is to send output to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified FilteredTextBox is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Windows.Forms.FilteredTextBoxTraceListener.Enabled">
            <summary>
            Gets or sets a value indicating whether or not trace and debug output should be routed
            the text box.
            </summary>
            <value>
            True if trace and debug output should be routed the filtered text box; otherwise false.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.FilteredTextBoxTraceListener.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.FilteredTextBoxTraceListener.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.FlatDateTimePicker">
            <summary>
            A customized version of the <see cref="T:System.Windows.Forms.DateTimePicker"/> control that supports styled borders.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatDateTimePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.FlatDateTimePicker"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.FlatDateTimePicker.BorderStyle">
            <summary>
            Gets or sets the border type of the control.
            </summary>
            <value>
            The border type of the control.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatDateTimePicker.WndProc(System.Windows.Forms.Message@)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatDateTimePicker.IsButtonHot(System.IntPtr,Simphony.NativeMethods.RECT)">
            <summary>
            Returns a value indicating whether the drop down button of the control
            is in the hot or pressed state.
            </summary>
            <param name="hdc">
            The device context on which the control is being rendered.
            </param>
            <param name="rect">
            A rectangle defining the bounds of the control.
            </param>
            <returns>
            True if the drop down button is in the hot or pressed state; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatDateTimePicker.DrawFixedSingle(System.IntPtr,Simphony.NativeMethods.RECT)">
            <summary>
            Draws a single pixel border around the control.
            </summary>
            <param name="hdc">
            The device context on which the control is being rendered.
            </param>
            <param name="rect">
            A rectangle defining the bounds of the control.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.FlatDateTimePicker.EraseBorder(System.IntPtr,Simphony.NativeMethods.RECT)">
            <summary>
            Erases the 3D border drawn by the underlying control.
            </summary>
            <param name="hdc">
            The device context on which the control is being rendered.
            </param>
            <param name="rect">
            A rectangle defining the bounds of the control.
            </param>
        </member>
        <member name="T:Simphony.Windows.Forms.QueryDateAppearanceEventArgs">
            <summary>
            Provides data for the <see cref="E:Simphony.Windows.Forms.CalendarView.QueryDateAppearance"/> event of the
            <see cref="T:Simphony.Windows.Forms.CalendarView"/> control.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.QueryDateAppearanceEventArgs.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.QueryDateAppearanceEventArgs"/> class.
            </summary>
            <param name="year">
            The year for which appearance information is being sought.
            </param>
            <param name="month">
            The month for which appearance information is being sought.
            </param>
            <param name="day">
            The day for which appearance information is being sought.
            </param>
        </member>
        <member name="P:Simphony.Windows.Forms.QueryDateAppearanceEventArgs.BackColor">
            <summary>
            Gets or sets the background color for the date.
            </summary>
            <value>
            The background color for the date.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.QueryDateAppearanceEventArgs.Date">
            <summary>
            Gets the date for which appearance information is being sought.
            </summary>
            <value>
            The date for which appearance information is being sought.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.QueryDateAppearanceEventArgs.FontStyle">
            <summary>
            Gets or sets the font style for the date.
            </summary>
            <value>
            The font style for the date.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.QueryDateAppearanceEventArgs.ForeColor">
            <summary>
            Gets or sets the foreground color for the date.
            </summary>
            <value>
            The foreground color for the date.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.SingleButtonDialogBase">
            <summary>
            Base class from which dialog boxes can be derived.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.SingleButtonDialogBase.AcceptButton">
            <summary>
            The form's close button.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.SingleButtonDialogBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.SingleButtonDialogBase"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.SingleButtonDialogBase.SystemMenuCloseItemEnabled">
            <summary>
            Gets or sets a value indicating whether the close item on the system menu is enabled.
            </summary>
            <value>
            True if the close item on the system menu is enabled; false if it is disabled.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.SingleButtonDialogBase.ButtonStripHeight">
            <summary>
            Gets the height of the button strip.
            </summary>
            <value>
            The height of the button strip in pixels.
            </value>
            <remarks>
            The button strip is the area at the bottom of the dialog containing the Close button.
            </remarks>
        </member>
        <member name="T:Simphony.Windows.Forms.StaticBorderImageConverter">
            <summary>
            Custom type converter for the <see cref="T:Simphony.Windows.Forms.StaticBorderImage"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderImageConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderImageConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderImageConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderImageConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.DataGridViewDateCell">
            <summary>
            A <see cref="T:System.Windows.Forms.DataGridViewCell"/> used to edit a <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDateCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DataGridViewDateCell"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDateCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.DataGridViewDateColumn">
            <summary>
            A <see cref="T:System.Windows.Forms.DataGridViewColumn"/> used to edit a <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.DataGridViewDateControl">
            <summary>
            A <see cref="T:System.Windows.Forms.IDataGridViewEditingControl"/> used to edit a <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDateControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DataGridViewDateControl"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewDateControl.EditingControlDataGridView">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewDateControl.EditingControlFormattedValue">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewDateControl.EditingControlRowIndex">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewDateControl.EditingControlValueChanged">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewDateControl.EditingPanelCursor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataGridViewDateControl.RepositionEditingControlOnValueChange">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDateControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDateControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDateControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDateControl.PrepareEditingControlForEdit(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDateControl.OnValueChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataGridViewDateControl.NotifyDataGridViewOfValueChange">
            <summary>
            Updates the local dirty state and notifies the grid of the value change.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.DataTableGridTypeConverterCell">
            <summary>
            A DataGridViewComboBoxCell that can be either DropDownList or DropDown style depending on whether its column's type converter
            is standard values exclusive or not.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGridTypeConverterCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DataTableGridTypeConverterCell"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGridTypeConverterCell.EditType">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGridTypeConverterCell.FormattedValueType">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGridTypeConverterCell.ValueType">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGridTypeConverterCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGridTypeConverterCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.DataTableGridTypeConverterColumn">
            <summary>
            A DataGridViewComboBoxColumn that can be either DropDownList or DropDown style depending on whether its column's type converter
            is standard values exclusive or not.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGridTypeConverterColumn.#ctor(Simphony.Windows.Forms.DataTableGrid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DataTableGridTypeConverterColumn"/> class.
            </summary>
            <param name="tableGrid">The owning DataTableGrid of this column.</param>
            <param name="sourceTableColumnIndex">The index of the DataColumn in the source DataTable
            this column is to represent.</param>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGridTypeConverterColumn.TableGrid">
            <summary>
            Gets the TableGrid instance that owns this column.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGridTypeConverterColumn.TypeConverter">
            <summary>
            Gets or sets the typeConverter instance used by this column.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl">
            <summary>
            A DataGridViewComboBoxEditingControl that can be either DropDownList or DropDown style depending on whether its column's type converter
            is standard values exclusive or not.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl"/>
            class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl.EditingControlDataGridView">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.DataGridView"/> that contains the cell.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl.EditingControlFormattedValue">
            <summary>
            Gets or sets the formatted value of the cell being modified by the editor.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl.EditingControlRowIndex">
            <summary>
            Gets or sets the index of the hosting cell's parent row.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl.EditingControlValueChanged">
            <summary>
            Gets or sets a value indicating whether the value of the editing control differs from the value of the hosting cell.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl.EditingPanelCursor">
            <summary>
            Gets the cursor used when the mouse pointer is over the DataGridView.EditingPanel but not over the editing control.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl.OwningCell">
            <summary>
            Gets the DataGridViewComboBoxCell that called up this particular instance of the editing control.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl.OwningColumn">
            <summary>
            Gets the DataGridViewComboBoxColumn that called up this particular instance of the editing control.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl.RepositionEditingControlOnValueChange">
            <summary>
            Gets a value indicating whether the cell contents need to be repositioned whenever the value changes.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Changes the control's user interface (UI) to be consistent with the specified cell style.
            </summary>
            <param name="dataGridViewCellStyle">The DataGridViewCellStyle to use as the model for the UI.</param>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Determines whether the specified key is a regular input key that the editing control should process or a special key that the DataGridView should process.
            </summary>
            <param name="key">A Keys that represents the key that was pressed.</param>
            <param name="dataGridViewWantsInputKey">True when the DataGridView wants to process the Keys in keyData; otherwise, false.</param>
            <returns>true if the specified key is a regular input key that should be handled by the editing control; otherwise, false.</returns>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Implements the IDataGridViewEditingControl.GetEditingControlFormattedValue method.
            </summary>
            <param name="context">A bitwise combination of DataGridViewDataErrorContexts values that specifies the context in which the data is needed.</param>
            <returns>An Object that represents the formatted version of the cell contents.</returns>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl.PrepareEditingControlForEdit(System.Boolean)">
            <summary>
            Prepares the currently selected cell for editing.
            </summary>
            <param name="selectAll">True to select all of the cell's content; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Notify the DataGridView that the contents of the cell
            have changed.
            </summary>
            <param name="e">Carries the event data.</param>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl.OnTextChanged(System.EventArgs)">
            <summary>
            Notify the DataGridView that the contents of the cell
            have changed.
            </summary>
            <param name="e">Carries the event data.</param>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGridTypeConverterEditingControl.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the Validating event.
            </summary>
            <param name="e">Provides data for a cancelable event.</param>
        </member>
        <member name="T:Simphony.Windows.Forms.DataTableGrid">
            <summary>
            A Custom DataGridView Control used to directly edit DataTable objects.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.DataTableGrid"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGrid.AllowUserToAddRows">
            <summary>
            Gets or sets a value indicating whether the user is allowed to add rows to the data table.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGrid.AllowUserToDeleteRows">
            <summary>
            Gets or sets a value indicating whether the user is allowed to delete rows in the data table.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGrid.DataSource">
            <summary>
            Gets or sets The DataTableView's Data Source.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGrid.Descriptions">
            <summary>
            Gets or sets A dictionary of strings that describe each column in the DataTable.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.DataTableGrid.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the data table is read only.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGrid.AcceptChanges">
            <summary>
            Commit the changes made to the DataSource by restoring it with backup.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGrid.DiscardChanges">
            <summary>
            Discard the changes made to the DataSource by restoring it with backup.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.DataTableGrid.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGrid.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Simphony.Windows.Forms.DataTableGrid.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.Extensions">
            <summary>
            Provides extensions methods to System.Data.DataColumn to allow the user to attach Extended Properties.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.Extensions.GetArray(System.Data.DataColumn)">
            <summary>
            Get the array in the column's ExtendedProperties.
            </summary>
            <param name="theColumn">
            The column which the ExtendedProperties will be retrieved from.
            </param>
            <returns>
            An object array containing the array potentially used for the DataSource of the specific DataColumn.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.Extensions.GetBrowsable(System.Data.DataColumn)">
            <summary>
            Get the Browsable boolean in the column's ExtendedProperties.
            </summary>
            <param name="theColumn">
            The column which the Browsable boolean will be retrieved from.
            </param>
            <returns>
            The boolean denoting whether the specific DataColumn is browsable.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.Extensions.GetDescription(System.Data.DataColumn)">
            <summary>
            Get the description string in the column's ExtendedProperties.
            </summary>
            <param name="theColumn">
            The column which the description will be retrieved from.
            </param>
            <returns>
            The string that is the specific DataColumn's description.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.Extensions.GetReadonly(System.Data.DataColumn)">
            <summary>
            Get the Readonly boolean in the column's ExtendedProperties.
            </summary>
            <param name="theColumn">
            The column which the Readonly boolean will be retrieved from.
            </param>
            <returns>
            The boolean denoting whether the specific DataColumn is readonly.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.Extensions.GetTypeConverter(System.Data.DataColumn)">
            <summary>
            Get the TypeConverter type in the column's ExtendedProperties.
            </summary>
            <param name="theColumn">
            The column which the ExtendedProperties will be retrieved from.
            </param>
            <returns>
            A Type containing the type of the TypeConverter of the specific DataColumn.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.Extensions.SetArray(System.Data.DataColumn,System.Object[])">
            <summary>
            Set the array in the column's ExtendedProperties.
            </summary>
            <param name="theColumn">
            The column which the ExtendedProperties will be set.
            </param>
            <param name="array">
            The array the column will use.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.Extensions.SetBrowsable(System.Data.DataColumn,System.Boolean)">
            <summary>
            Set the Browsable boolean in the column's ExtendedProperties.
            </summary>
            <param name="theColumn">
            The column which the Browsable boolean will be set.
            </param>
            <param name="isBrowsable">
            The the boolean dictating whether the column will be browsable.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.Extensions.SetDescription(System.Data.DataColumn,System.String)">
            <summary>
            Set the description string in the column's ExtendedProperties.
            </summary>
            <param name="theColumn">
            The column which the description will be set.
            </param>
            <param name="description">
            The string that describes the column.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.Extensions.SetReadonly(System.Data.DataColumn,System.Boolean)">
            <summary>
            Set the Readonly boolean in the column's ExtendedProperties.
            </summary>
            <param name="theColumn">
            The column which the Readonly boolean will be set.
            </param>
            <param name="isReadonly">
            The the boolean dictating whether the column will be readonly.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.Extensions.SetTypeConverter(System.Data.DataColumn,System.Type)">
            <summary>
            Set the TypeConverter type in the column's ExtendedProperties.
            </summary>
            <param name="theColumn">
            The column which the ExtendedProperties will be set.
            </param>
            <param name="converterType">
            The Type of TypeConverter the column will use.
            </param>
        </member>
        <member name="T:Simphony.Windows.Forms.MediaSlider">
            <summary>
            Custom media slider control.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.MediaSlider"/> class.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.MediaSlider.BufferValueChangedDelegate">
            <summary>
            The buffer value changed delegate.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="T:Simphony.Windows.Forms.MediaSlider.ScrollDelegate">
            <summary>
            The scroll delegate.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="T:Simphony.Windows.Forms.MediaSlider.ValueChangedDelegate">
            <summary>
            The value changed delegate.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="E:Simphony.Windows.Forms.MediaSlider.BufferValueChanged">
            <summary>
            Raised when the Buffer Value property changes.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.MediaSlider.FlyOutInfo">
            <summary>
            Callback event for the FlyOut window.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.MediaSlider.Scrolled">
            <summary>
            Raised when the mSlider has scrolled.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.MediaSlider.ValueChanged">
            <summary>
            Raised when the Slider Value property changes.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.MediaSlider.AnimateSpeed">
            <summary>
            The speed of pulse effect.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.AnimateSpeed.Fast">
            <summary>
            The pulse effect animate at fast speed.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.AnimateSpeed.Normal">
            <summary>
            The pulse effect animate at normal speed.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.AnimateSpeed.Slow">
            <summary>
            The pulse effect animate at slow speed.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.MediaSlider.ButtonType">
            <summary>
            The types of media slider button.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.ButtonType.Round">
            <summary>
            A round button.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.ButtonType.RoundedRectInline">
            <summary>
            A rounded rectangle inline button.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.ButtonType.RoundedRectOverlap">
            <summary>
            A rounded rectangle overlap button.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.ButtonType.PointerUpRight">
            <summary>
            A pointer up-right button.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.ButtonType.PointerDownLeft">
            <summary>
            A pointer down-left button.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.ButtonType.Hybrid">
            <summary>
            A hybrid button.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.ButtonType.GlassInline">
            <summary>
            A glass inline button.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.ButtonType.GlassOverlap">
            <summary>
            A glass overlap button.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.MediaSlider.FlyOutStyle">
            <summary>
            The fly-out style.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.FlyOutStyle.None">
            <summary>
            No fly-out effect.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.FlyOutStyle.OnFocus">
            <summary>
            Show fly-out when a cursor focuses on the slider button.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.FlyOutStyle.Persistant">
            <summary>
            Always show fly-out.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.MediaSlider.PresetType">
            <summary>
            The preset type of media slider control.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.PresetType.WmpVolume">
            <summary>
            Set style to window media player volume control.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.PresetType.WmpTrackbar">
            <summary>
            Set style to window media player track bar control.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.PresetType.WmcTrackBar">
            <summary>
            Set style to window media centre track bar control.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.PresetType.Office2007">
            <summary>
            Set style to office 2007.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.PresetType.Glass">
            <summary>
            Set style to glass.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.MediaSlider.TickMode">
            <summary>
            The tick mode.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.TickMode.Standard">
            <summary>
            Set tick mode to standard.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.TickMode.Composite">
            <summary>
            Set tick mode to composite.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.TickMode.Precision">
            <summary>
            Set tick mode to precision.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.TickMode.LargeStepped">
            <summary>
            Set tick mode to large stepped.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.MediaSlider.TrackType">
            <summary>
            The track type.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.TrackType.Progress">
            <summary>
            Set track type to progress.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.TrackType.Value">
            <summary>
            Set track type to value.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.AllowDrop">
            <inheritdoc cref="P:System.Windows.Forms.Control.AllowDrop"/>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.Anchor">
            <inheritdoc cref="P:System.Windows.Forms.Control.Anchor"/>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.Animated">
            <summary>
            Gets or sets a value indicating whether to run the animation effect when focused.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.AnimationSize">
            <summary>
            Gets or sets the percentage of size of sprite height/width to track height/width
            [min 0.05 - max 0.20].
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.AnimationSpeed">
            <summary>
            Gets or sets the animation cycle speed.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.AutoScroll">
            <inheritdoc cref="P:System.Windows.Forms.ScrollableControl.AutoScroll"/>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.AutoScrollMargin">
            <inheritdoc cref="P:System.Windows.Forms.ScrollableControl.AutoScrollMargin"/>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.AutoScrollMinSize">
            <inheritdoc cref="P:System.Windows.Forms.ScrollableControl.AutoScrollMinSize"/>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.AutoSizeMode">
            <inheritdoc cref="P:System.Windows.Forms.UserControl.AutoSizeMode"/>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.AutoValidate">
            <inheritdoc cref="P:System.Windows.Forms.UserControl.AutoValidate"/>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.BackgroundImage">
            <inheritdoc cref="P:System.Windows.Forms.Control.BackgroundImage"/>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.BackgroundImageLayout">
            <inheritdoc cref="P:System.Windows.Forms.Control.BackgroundImageLayout"/>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.BufferValue">
            <summary>
            Gets or sets the position of the buffer.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.ButtonAccentColor">
            <summary>
            Gets or sets the modify button accent color.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.ButtonBorderColor">
            <summary>
            Gets or sets the modify button border color.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.ButtonColor">
            <summary>
            Gets or sets the modify button base color.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.ButtonCornerRadius">
            <summary>
            Gets or sets the slider buttons corner radius.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.ButtonSize">
            <summary>
            Gets or sets the modify slider button size.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.ButtonStyle">
            <summary>
            Gets or sets the button style.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.ContextMenuStrip">
            <inheritdoc cref="P:System.Windows.Forms.Control.ContextMenuStrip"/>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.Dock">
            <inheritdoc cref="P:System.Windows.Forms.Control.Dock"/>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.Font">
            <inheritdoc cref="P:System.Windows.Forms.Control.Font"/>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.ForeColor">
            <inheritdoc cref="P:System.Windows.Forms.Control.ForeColor"/>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.IsInited">
            <summary>
            Gets a value indicating whether the control has been initialized.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.LargeChange">
            <summary>
            Gets or sets the number of clicks the slider moves in response to mouse clicks or
            page-up/page-down.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.Maximum">
            <summary>
            Gets or sets the maximum value for the position of the slider.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.MaxSize">
            <summary>
            Gets the maximum Size value for the control.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.Minimum">
            <summary>
            Gets or sets the minimum value for the position of the slider.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.MinSize">
            <summary>
            Gets the minimum Size value for the control.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.MyBackGroundImage">
            <summary>
            Gets or sets an image for the slider background.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.Orientation">
            <summary>
            Gets or sets the orientation of the control.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.Padding">
            <inheritdoc cref="P:System.Windows.Forms.Control.Padding"/>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.PrecisionValue">
            <summary>
            Gets the slider position as a floating point, requires SmoothScrolling set to true.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.RightToLeft">
            <inheritdoc cref="P:System.Windows.Forms.Control.RightToLeft"/>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.ShowButtonOnHover">
            <summary>
            Gets or sets a value indicating whether to show the slider button only when control is
            focused or mouse is hovering.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.SliderFlyOut">
            <summary>
            Gets or sets the fly-out caption window style.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.SmallChange">
            <summary>
            Gets or sets the number of positions the slider movers in response to arrow keys.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.SmoothScrolling">
            <summary>
            Gets or sets a value indicating whether to run the animation effect when focused.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.TickColor">
            <summary>
            Gets or sets the slider tick color.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.TickStyle">
            <summary>
            Gets or sets the tick-style.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.TickType">
            <summary>
            Gets or sets the tick drawing style.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.TrackBorderColor">
            <summary>
            Gets or sets the slider border color.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.TrackBufferColor">
            <summary>
            Gets or sets the track buffer color.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.TrackDepth">
            <summary>
            Gets or sets the slider track depth.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.TrackFillColor">
            <summary>
            Gets or sets the track fill color.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.TrackProgressColor">
            <summary>
            Gets or sets the track progress color.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.TrackShadow">
            <summary>
            Gets or sets a value indicating whether track border shadow is enabled.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.TrackShadowColor">
            <summary>
            Gets or sets the track shadow color.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.TrackStyle">
            <summary>
            Gets or sets the display style of track.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.Value">
            <summary>
            Gets or sets the position of the slider.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.OnBackColorChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.OnCreateControl">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.OnGotFocus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.OnHandleCreated(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.OnHandleDestroyed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.OnLostFocus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.OnMouseHover(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.OnMouseLeave(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.OnResize(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.AlphaBlend(System.Drawing.Graphics,System.Drawing.Bitmap,System.Drawing.Rectangle,System.Single)">
            <summary>AlphaBlend an image, alpha 0.1 to 1.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.CalculateMaximumSize">
            <summary>Maximum size based on control options.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.CalculateMinimumSize">
            <summary>Minimum size based on control options.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.CreateButtonBitmap">
            <summary>Create the button bitmap.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.CreateGraphicsObjects">
            <summary>Create graphics objects.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.CreateRoundPath(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>Create a round GraphicsPath [not used].</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.CreateRoundRectanglePath(System.Drawing.Graphics,System.Drawing.Rectangle,System.Single)">
            <summary>Create a rounded rectangle GraphicsPath.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.CreateSprite">
            <summary>Create the animations sprite.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.CreateTrack">
            <summary>Create the track dc.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.DefaultButtonSize(Simphony.Windows.Forms.MediaSlider.ButtonType)">
            <summary>Set default button sizes.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.DestroyGraphicsObjects">
            <summary>Destroy graphics objects.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.DestroySprite">
            <summary>Destroy animation sprite.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.DrawBackGround(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>Backfill the buffer.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.DrawBrightImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Single)">
            <summary>Adjust gamma of an image [not used].</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.DrawDisabledImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>Draw a disabled image using the control.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>Draw an unaltered image.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.DrawPulseSprite(System.IntPtr,System.Drawing.Bitmap,System.Drawing.Rectangle,System.Single)">
            <summary>Draws the line sprite.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.DrawSlider">
            <summary>Drawing hub.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.DrawTicks(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>Draw the slider ticks.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.DrawTrack">
            <summary>Draw slider and background dc.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.GetButtonRectangle">
            <summary>Return button size and coordinates.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.GetTrackRectangle">
            <summary>Return track size and coordinates.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.Increment">
            <summary>Exact size between ticks.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.IncrementalValue">
            <summary>The incremental size between the Minimum and Value.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.IncrementOffset">
            <summary>Offset number if Minimum and Maximum are negative to positive integers.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.IncrementScale">
            <summary>The total number of tick increments.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.Mod(System.Int32,System.Int32)">
            <summary>Modulus returns true if divisible with no remainder.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.PosFromValue(System.Int32)">
            <summary>Return position coordinates from value.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.PropertyChange">
            <summary>Repaint and optionally resize.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.Repaint">
            <summary>Repaint the control.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.ResizeThis">
            <summary>Resize the control via alignments and options.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.ScrollChange(Simphony.Windows.Forms.MediaSlider.ChangeType,System.Boolean)">
            <summary>Scroll by large or small change values.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.ScrollThis(System.Double)">
            <summary>Scroll the slider to a position and set value.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.SliderHitTest">
            <summary>Mouse Hit test.</summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.ValueFromPos(System.Double)">
            <summary>The value at a provided position.</summary>
        </member>
        <member name="T:Simphony.Windows.Forms.MediaSlider.FlyOutInfoEventArgs">
            <summary>
            Data for the <see cref="E:Simphony.Windows.Forms.MediaSlider.FlyOutInfo"/> event.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.MediaSlider.FlyOutInfoEventArgs.Text">
            <summary>
            Gets or sets the text to draw in the flyout.
            </summary>
            <value>
            The text to draw in the flyout.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.MediaSlider.FadeTimer">
            <summary>
            Effect timer class.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.MediaSlider.GraphicsMode">
            <summary>
            Maintains graphic object state.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.GraphicsMode.#ctor(System.Drawing.Graphics,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.MediaSlider.GraphicsMode"/> class.
            </summary>
            <param name="g">Graphics instance.</param>
            <param name="mode">Desired Smoothing mode.</param>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.GraphicsMode.Dispose">
            <summary>
            Revert the SmoothingMode to original setting.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.MediaSlider.StoreDc">
            <summary>
            DC buffer class.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.MediaSlider.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MediaSlider.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.StaticBorderImage">
            <summary>
            A class for encapsulating an <see cref="P:Simphony.Windows.Forms.StaticBorderImage.Image"/>, its border dimensions, and its DrawMethod
            for drawing a <see cref="T:Simphony.Windows.Forms.StaticBorderProgressBar"/>.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.StaticBorderImage.DrawMethodProperty">
            <summary>
            The name of the DrawMethod property.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.StaticBorderImage.ImageProperty">
            <summary>
            The name of the Image property.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.StaticBorderImage.StaticPixelsProperty">
            <summary>
            The name of the StaticPixels property.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderImage.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.StaticBorderImage"/> class with a standard
            size border and scale draw method.
            </summary>
            <param name="image">
            The image to use.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderImage.#ctor(System.Drawing.Image,Simphony.Windows.Forms.StaticBorderProgressBar.DrawMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.StaticBorderImage"/> class with a standard
            size border.
            </summary>
            <param name="image">
            The image to use.
            </param>
            <param name="drawMethod">
            Indicates whether the portion of the image inside the border should be stretched or tiled.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderImage.#ctor(System.Drawing.Image,Simphony.Windows.Forms.StaticBorderProgressBar.DrawMethod,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.StaticBorderImage"/> class with a uniform
            border.
            </summary>
            <param name="image">
            The image to use.
            </param>
            <param name="drawMethod">
            Indicates whether the portion of the image inside the border should be stretched or tiled.
            </param>
            <param name="borderWidth">
            The width of the static border, in pixels.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderImage.#ctor(System.Drawing.Image,Simphony.Windows.Forms.StaticBorderProgressBar.DrawMethod,System.Windows.Forms.Padding)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.StaticBorderImage"/> class.
            </summary>
            <param name="image">
            The image to use.
            </param>
            <param name="drawMethod">
            Indicates whether the portion of the image inside the border should be stretched or tiled.
            </param>
            <param name="staticPixels">
            Indicates the dimensions of the static border, in pixels.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderImage.#ctor(System.Drawing.Image,Simphony.Windows.Forms.StaticBorderProgressBar.DrawMethod,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.StaticBorderImage"/> class.
            </summary>
            <param name="image">
            The image to use.
            </param>
            <param name="drawMethod">
            Indicates whether the portion of the image inside the border should be stretched or tiled.
            </param>
            <param name="leftBorderWidth">
            The width of the static left border, in pixels.
            </param>
            <param name="topBorderWidth">
            The height of the static top border, in pixels.
            </param>
            <param name="rightBorderWidth">
            The width of the static right border, in pixels.
            </param>
            <param name="bottomBorderWidth">
            The height of the static bottom border, in pixels.
            </param>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderImage.BottomLeftRectangle">
            <summary>
            Gets the <see cref="T:System.Drawing.Rectangle"/> representing the bottom-left corner.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderImage.BottomRectangle">
            <summary>
            Gets the <see cref="T:System.Drawing.Rectangle"/> representing the bottom edge.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderImage.BottomRightRectangle">
            <summary>
            Gets the <see cref="T:System.Drawing.Rectangle"/> representing the top-right corner.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderImage.CenterRectangle">
            <summary>
            Gets the <see cref="T:System.Drawing.Rectangle"/> representing the center.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderImage.DrawMethod">
            <summary>
            Gets or sets a value that determines whether the center and edges of the image, as defined
            by <see cref="P:Simphony.Windows.Forms.StaticBorderImage.StaticPixels"/>, should be tiled or stretched when drawn to the control.
            </summary>
            <value>
            A value that determines whether the center and edges of the image, as defined by
            <see cref="P:Simphony.Windows.Forms.StaticBorderImage.StaticPixels"/>, should be tiled or stretched when drawn to the control.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderImage.Image">
            <summary>
            Gets or sets the image to draw onto the control.
            </summary>
            <value>
            The image to draw onto the control.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderImage.LeftRectangle">
            <summary>
            Gets the <see cref="T:System.Drawing.Rectangle"/> representing the left edge.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderImage.RightRectangle">
            <summary>
            Gets the <see cref="T:System.Drawing.Rectangle"/> representing the right edge.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderImage.StaticPixels">
            <summary>
            Gets or sets a value that determines the width, in pixels, of the static interior border on
            each side of the image.
            </summary>
            <value>
            A value that determines the width, in pixels, of the static interior border on each side of
            the image.
            </value>
            <remarks>
            Using these values, the corners are drawn exactly as in the image, the sides are stretched
            or tiled vertically, the top and bottom are stretched or tiled horizontally, and the
            remaining center is stretched or tiled over the center.
            </remarks>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderImage.TopLeftRectangle">
            <summary>
            Gets the <see cref="T:System.Drawing.Rectangle"/> representing the top-left corner.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderImage.TopRectangle">
            <summary>
            Gets the <see cref="T:System.Drawing.Rectangle"/> representing the top edge.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderImage.TopRightRectangle">
            <summary>
            Gets the <see cref="T:System.Drawing.Rectangle"/> representing the top-left corner.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderImage.Equals(Simphony.Windows.Forms.StaticBorderImage)">
            <summary>
            Determines whether the specified <see cref="T:Simphony.Windows.Forms.StaticBorderImage"/> is equal to the current
            <see cref="T:Simphony.Windows.Forms.StaticBorderImage"/>.
            </summary>
            <param name="that">
            The <see cref="T:Simphony.Windows.Forms.StaticBorderImage"/> to compare with the current
            <see cref="T:Simphony.Windows.Forms.StaticBorderImage"/>.
            </param>
            <returns>
            True if the specified <see cref="T:Simphony.Windows.Forms.StaticBorderImage"/> is equal to the current
            <see cref="T:Simphony.Windows.Forms.StaticBorderImage"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderImage.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.StaticBorderProgressBar">
            <summary>
            Represents a flexible, multi-directional progress bar with several custom appearance options.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.StaticBorderProgressBar"/> class.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.StaticBorderProgressBar.DrawMethod">
            <summary>
            Specifies draw methods for the images used to draw a <see cref="T:Simphony.Windows.Forms.StaticBorderProgressBar"/>.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.StaticBorderProgressBar.DrawMethod.Tile">
            <summary>
            The sides and center of the StaticBorderImage are tiled.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.StaticBorderProgressBar.DrawMethod.Stretch">
            <summary>
            The sides and center of the StaticBorderImage are stretched.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.StaticBorderProgressBar.ForegroundMode">
            <summary>
            Specifies motion characteristics for the foreground of a
            <see cref="T:Simphony.Windows.Forms.StaticBorderProgressBar"/>.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.StaticBorderProgressBar.ForegroundMode.Grow">
            <summary>
            The foreground image grows as the StaticBorderProgressBar Value increases.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.StaticBorderProgressBar.ForegroundMode.Slide">
            <summary>
            The foreground image slides into view as the StaticBorderProgressBar Value increases.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.StaticBorderProgressBar.ProgressBarEdge">
            <summary>
            Specifies progress bar edges from which the foreground image of a
            <see cref="T:Simphony.Windows.Forms.StaticBorderProgressBar"/> bar can be drawn.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.StaticBorderProgressBar.ProgressBarEdge.Left">
            <summary>
            The foreground image is draw at the left edge of the StaticBorderProgressBar.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.StaticBorderProgressBar.ProgressBarEdge.Top">
            <summary>
            The foreground image is draw at the top edge of the StaticBorderProgressBar.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.StaticBorderProgressBar.ProgressBarEdge.Bottom">
            <summary>
            The foreground image is draw at the bottom edge of the StaticBorderProgressBar.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.StaticBorderProgressBar.ProgressBarEdge.Right">
            <summary>
            The foreground image is draw at the right edge of the StaticBorderProgressBar.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderProgressBar.BackColor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderProgressBar.Background">
            <summary>
            Gets or sets the image to render behind the whole StaticBorderProgressBar.
            </summary>
            <remarks>
            This image is rendered first.
            </remarks>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderProgressBar.BackgroundImage">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderProgressBar.BackgroundImageLayout">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderProgressBar.Font">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderProgressBar.ForeColor">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderProgressBar.Foreground">
            <summary>
            Gets or sets the image to use for the filled portion of the control.
            </summary>
            <value>
            The image to use for the filled portion of the control.
            </value>
            <remarks>
            This is rendered after the Background and before the Overlay.
            </remarks>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderProgressBar.ForegroundLocation">
            <summary>
            Gets or sets the progress bar edge from which the foreground image is drawn.
            </summary>
            <value>
            The progress bar edge from which the foreground image is drawn.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderProgressBar.Maximum">
            <summary>
            Gets or sets the upper bound of the range this <see cref="T:Simphony.Windows.Forms.StaticBorderProgressBar"/> is
            working with.
            </summary>
            <value>
            The upper bound of the range this <see cref="T:Simphony.Windows.Forms.StaticBorderProgressBar"/> is working with.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderProgressBar.Minimum">
            <summary>
            Gets or sets the lower bound of the range this <see cref="T:Simphony.Windows.Forms.StaticBorderProgressBar"/> is
            working with.
            </summary>
            <value>
            The lower bound of the range this <see cref="T:Simphony.Windows.Forms.StaticBorderProgressBar"/> is working with.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderProgressBar.Orientation">
            <summary>
            Gets a value indicating whether the control is horizontal or vertical.
            </summary>
            <value>
            A value indicating whether the control is horizontal or vertical.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderProgressBar.Overlay">
            <summary>
            Gets or sets the image to render over the whole bar.
            </summary>
            <value>
            The image to render over the whole bar.
            </value>
            <remarks>
            This image should be mostly transparent.
            </remarks>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderProgressBar.ProgressMode">
            <summary>
            Gets or sets the motion of the foreground image as the progress value changes.
            </summary>
            <value>
            The motion of the foreground image as the progress value changes.
            </value>
            <remarks>
            This has no effect if the Foreground DrawMethod is Stretch.
            </remarks>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderProgressBar.TabStop">
            <inheritdoc cref="P:System.Windows.Forms.Control.TabStop"/>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderProgressBar.Text">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.StaticBorderProgressBar.Value">
            <summary>
            Gets or sets the current value for the control.
            </summary>
            <value>
            A value in the range specified by the <see cref="P:Simphony.Windows.Forms.StaticBorderProgressBar.Minimum"/> and <see cref="P:Simphony.Windows.Forms.StaticBorderProgressBar.Maximum"/>
            properties.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.DoLayout">
            <summary>
            Ensures that the sides of the progress bar are always rendered correctly.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.Render(System.Drawing.Graphics,Simphony.Windows.Forms.StaticBorderImage,System.Boolean)">
            <summary>
            Renders an image using the parameters.
            </summary>
            <param name="graphics">
            The Graphics object to draw to.
            </param>
            <param name="sourceImage">
            The Image to draw from.
            </param>
            <param name="foreground">
            Determines whether the render should be over the full area or just the foreground area.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.Render(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,Simphony.Windows.Forms.StaticBorderProgressBar.DrawMethod)">
            <summary>
            Draws the specified portion of the specified Image to the specified location in the specified way.
            </summary>
            <param name="graphics">
            The Graphics object to draw to.
            </param>
            <param name="sourceImage">
            The Image to draw from.
            </param>
            <param name="destRect">
            A Rectangle that determines the location and size of the drawn image.
            </param>
            <param name="srcRect">
            A Rectangle that determines the portion of the image of draw.
            </param>
            <param name="drawMethod">
            Determines whether the image should be tiled or stretched across the draw area.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.RenderCacheImages">
            <summary>
            Creates the background and overlay images.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.DisposeToNull``1(``0@)">
            <summary>
            Provides a shortcut for disposing an <see cref="T:System.IDisposable"/> and the setting it to null
            if it is not null already.
            </summary>
            <typeparam name="T">
            An <see cref="T:System.IDisposable"/> class.
            </typeparam>
            <param name="disposable">
            The object to dispose and set to null, if not null already.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.Animate">
            <summary>
            Displays a preview of the progress bar appearance based on the current settings.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.CreateOffScreen">
            <summary>
            Creates off-screen image for custom double-buffering.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.DisabledImage">
            <summary>
            Creates a "disabled" appearance for this control, using the transparency of the off-screen
            Image's pixels and a shade of grey.
            </summary>
            <returns>
            A Bitmap to use for a "disabled" appearance.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.ShiftRectangle(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Adjusts the location of a rectangle by the specified amount.
            </summary>
            <param name="rectangle">
            The rectangle to shift.
            </param>
            <param name="x">
            The horizontal offset.
            </param>
            <param name="y">
            The vertical offset.
            </param>
            <returns>
            The shifted rectangle.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.StaticBorderProgressBarResize(System.Object,System.EventArgs)">
            <summary>
            Takes necessary steps to change cached images and create new ones when the control is
            resized.
            </summary>
            <param name="sender">
            The object that raised the event.
            </param>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="F:Simphony.Windows.Forms.StaticBorderProgressBar.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.StaticBorderProgressBar.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.TableGrid">
            <summary>
            A custom grid control for binding to a generic list or binding list.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TableGrid"/> class.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.TableGrid.CellBeginEdit">
            <summary>
            Occurs when edit mode starts for the selected cell.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.TableGrid.CellDoubleClick">
            <summary>
            Occurs when the user double-clicks anywhere in a cell.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.TableGrid.CellEndEdit">
            <summary>
            Occurs when edit mode stops for the currently selected cell.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.TableGrid.CellFormatting">
            <summary>
            Occurs when the contents of a cell need to be formatted for display.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.TableGrid.CurrentCellChanged">
            <summary>
            Occurs when the current cell changes.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.TableGrid.DataError">
            <summary>
            Occurs when an external data-parsing or validation operation throws an exception,
            or when an attempt to commit data to a data source does not succeed.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.TableGrid.RowEnter">
            <summary>
            Occurs when a row receives input focus and becomes the current row.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.TableGrid.RowLeave">
            <summary>
            Occurs when a row loses input focus and is no longer the current row.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.TableGrid.RowsAdded">
            <summary>
            Occurs after a new row is added to the grid.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.TableGrid.RowsRemoved">
            <summary>
            Occurs when a row or rows are deleted from the grid.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.TableGrid.RowValidating">
            <summary>
            Occurs when a row is validating.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.TableGrid.SelectionChanged">
            <inheritdoc cref="E:System.Windows.Forms.DataGridView.SelectionChanged"/>
        </member>
        <member name="E:Simphony.Windows.Forms.TableGrid.UserDeletingRow">
            <summary>
            Occurs when the user deletes a row from the grid control.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.AllowUserToAddRows">
            <summary>
            Gets or sets a value indicating whether the option to add rows is displayed to the user.
            </summary>
            <value>
            True if the add-row option is displayed to the user; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.AllowUserToDeleteRows">
            <summary>
            Gets or sets a value indicating whether the user is allowed to delete rows from the grid.
            </summary>
            <value>
            True if the user can delete rows; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.AllowUserToSortColumns">
            <summary>
            Gets or sets a value indicating whether the user can sort columns.
            </summary>
            <value>
            True if the the user can sort columns; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.AutoSizeColumnsMode">
            <summary>
            Gets or sets a value indicating how column widths are determined.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode"/> value indicating the sizing mode.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.AutoSizeRowsMode">
            <summary>
            Gets or sets a value indicating how row heights are determined.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode"/> value indicating the sizing mode.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.BoldColumnHeaders">
            <summary>
            Gets or sets a value indicating whether the column headers in the grid should display bold text.
            </summary>
            <value>
            True if the column headers in the grid should display bold text; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.CanCopy">
            <summary>
            Gets a value indicating whether the state of the grid is such that data can be copied to the
            <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <value>
            True if the state of the grid is such that data can be copied to the <see cref="T:System.Windows.Forms.Clipboard"/>;
            otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.CanCut">
            <summary>
            Gets a value indicating whether the state of the grid is such that data can be moved to the
            <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <value>
            True if the state of the grid is such that data can be moved to the <see cref="T:System.Windows.Forms.Clipboard"/>;
            otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.CanDelete">
            <summary>
            Gets a value indicating whether the state of the grid is such that data can be deleted.
            </summary>
            <value>
            True if the state of the grid is such that data can be deleted; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.CanPaste">
            <summary>
            Gets a value indicating whether the state of the grid is such that data can be pasted from the
            <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <value>
            True if the state of the grid is such that data can be pasted from the <see cref="T:System.Windows.Forms.Clipboard"/>;
            otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.Categorized">
            <summary>
            Gets or sets a value indicating whether the table grid is categorized.
            </summary>
            <value>
            True if the table grid is categorized; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.ColumnCount">
            <summary>
            Gets the number of columns displayed in the grid.
            </summary>
            <value>
            The number of columns displayed in the grid.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.ColumnHeadersVisible">
            <summary>
            Gets or sets a value indicating whether the row that contains column headers is displayed.
            </summary>
            <value>
            True if the row that contains column headers is displayed; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.ColumnIndex">
            <summary>
            Gets the zero-based index of the current column.
            </summary>
            <value>
            The zero-based index of the current column; or -1 if the grid does not have
            a current column.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.DataBoundItem">
            <summary>
            Gets the data-bound object that populates the current row.
            </summary>
            <value>
            The data-bound object that populates the current row; or null if there is no current row.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.DataSource">
            <summary>
            Gets or sets the data source the grid is bound to.
            </summary>
            <value>
            The data source the grid is bound to.
            </value>
            <remarks>
            The data source must be of type <see cref="T:System.Collections.IList"/>.
            </remarks>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.GridBackgroundStyle">
            <summary>
            Gets or sets the background style for the grid.
            </summary>
            <value>
            The background style for the grid.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.GridBorderStyle">
            <summary>
            Gets or sets the border style for the grid.
            </summary>
            <value>
            The border style for the grid.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.HasCurrentColumn">
            <summary>
            Gets a value indicating whether the grid has a current column.
            </summary>
            <value>
            True if the grid has a current column; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.HasCurrentRow">
            <summary>
            Gets a value indicating whether the grid has a current row.
            </summary>
            <value>
            True if the grid has a current row; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.HelpVisible">
            <summary>
            Gets or sets a value indicating whether the help text is visible.
            </summary>
            <value>
            True if the help text is visible; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.HideSelection">
            <summary>
            Gets or sets a value indicating whether the selection in the grid remains highlighted
            when the control loses focus.
            </summary>
            <value>
            True if the selection in the grid remains highlighted when the control loses focus;
            otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.HighlightCurrentRow">
            <summary>
            Gets or sets a value indicating whether the current row in the grid is slightly
            highlighted.
            </summary>
            <value>
            True if the the current row in the grid is slightly highlighted; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.IsCurrentCellInEditMode">
            <summary>
            Gets a value indicating whether the currently active cell is being edited.
            </summary>
            <value>
            True if the the currently active cell is being edited; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.IsCurrentRowDirty">
            <summary>
            Gets a value indicating whether the current row has uncommitted changes.
            </summary>
            <value>
            True if the the current row has uncommitted changes; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.IsCurrentRowNew">
            <summary>
            Gets a value indicating whether the current row is the row for new records.
            </summary>
            <value>
            True if the the current row is the row for new records; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the user can edit the cells of the TableGrid control.
            </summary>
            <value>
            True if the user cannot edit the cells of the TableGrid control; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.RowCount">
            <summary>
            Gets the number of rows displayed in the grid.
            </summary>
            <value>
            The number of rows displayed in the grid.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.RowHeadersVisible">
            <summary>
            Gets or sets a value indicating whether the column that contains row headers is displayed.
            </summary>
            <value>
            True if the column that contains row headers is displayed; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.RowIndex">
            <summary>
            Gets the zero-based index of the current row.
            </summary>
            <value>
            The zero-based index of the current row; or -1 if the grid does not have
            a current row.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGrid.SelectionMode">
            <summary>
            Gets or sets a value indicating how the cells of the table grid can be selected.
            </summary>
            <value>
            A value indicating how the cells of the table grid can be selected.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.BeginEdit(System.Boolean)">
            <summary>
            Puts the current cell in edit mode.
            </summary>
            <param name="selectAll">
            True to select all the cell's contents; false to not select any contents.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.ClearErrorText(System.Int32)">
            <summary>
            Clears the error text for a cell with a specified column index in the current row.
            </summary>
            <param name="columnIndex">
            The zero-based index of the column.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified column index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if there is no current row.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.Copy">
            <summary>
            Copies the current selection in the grid to the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <remarks>
            If the grid is not in a state in which data can be copied to the <see cref="T:System.Windows.Forms.Clipboard"/>, this
            method simply does nothing (no exception will be thrown).
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.Cut">
            <summary>
            Moves the current selection in the grid to the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <remarks>
            If the grid is not in a state in which data can be moved to the <see cref="T:System.Windows.Forms.Clipboard"/>,
            this method simply does nothing (no exception will be thrown).
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.Delete">
            <summary>
            Deletes the current selection in the grid.
            </summary>
            <remarks>
            If the grid is not in a state in which data can be deleted, this method simply
            does nothing (no exception will be thrown).
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.DeleteCurrentRow">
            <summary>
            Deletes the current row.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if there is no current row.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.EndEdit">
            <summary>
            Commits and ends the edit operation on the current cell.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.Paste">
            <summary>
            Replaces the current selection in the grid with the contents of the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <remarks>
            If the <see cref="T:System.Windows.Forms.Clipboard"/> does not contain data that can be pasted into the grid, this
            method simply does nothing (no exception will be thrown).
            </remarks>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.Refresh">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.ResumeBinding">
            <summary>
            Resumes data binding, thus allowing changes to update the grid.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.SetErrorText(System.Int32,System.String)">
            <summary>
            Sets the error text for a cell with a specified column index in the current row.
            </summary>
            <param name="columnIndex">
            The zero-based index of the column.
            </param>
            <param name="errorText">
            The error text.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified error text is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified column index is invalid or if the specified error text is
            an empty string.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if there is no current row.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.SortAscending(System.Int32)">
            <summary>
            Sorts a column in ascending order.
            </summary>
            <param name="index">
            The zero-based index of the column to sort.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The underlying list does not support sorting.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.SortDescending(System.Int32)">
            <summary>
            Sorts a column in descending order.
            </summary>
            <param name="index">
            The zero-based index of the column to sort.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The underlying list does not support sorting.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.SuspendBinding">
            <summary>
            Suspends data binding to prevent changes from updating the grid.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnCellBeginEdit(System.Windows.Forms.DataGridViewCellCancelEventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.DataGridView.OnCellBeginEdit(System.Windows.Forms.DataGridViewCellCancelEventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnCellDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.DataGridView.OnCellDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnCellEndEdit(System.Windows.Forms.DataGridViewCellEventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.DataGridView.OnCellEndEdit(System.Windows.Forms.DataGridViewCellEventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnCellFormatting(System.Windows.Forms.DataGridViewCellFormattingEventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.DataGridView.OnCellFormatting(System.Windows.Forms.DataGridViewCellFormattingEventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnCurrentCellChanged(System.EventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.DataGridView.OnCurrentCellChanged(System.EventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnDataError(System.Windows.Forms.DataGridViewDataErrorEventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.DataGridView.OnDataError(System.Boolean,System.Windows.Forms.DataGridViewDataErrorEventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnEnabledChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnEnter(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnLeave(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnResize(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnRowEnter(System.Windows.Forms.DataGridViewCellEventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.DataGridView.OnRowEnter(System.Windows.Forms.DataGridViewCellEventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnRowLeave(System.Windows.Forms.DataGridViewCellEventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.DataGridView.OnRowLeave(System.Windows.Forms.DataGridViewCellEventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnRowsAdded(System.Windows.Forms.DataGridViewRowsAddedEventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.DataGridView.OnRowsAdded(System.Windows.Forms.DataGridViewRowsAddedEventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnRowsRemoved(System.Windows.Forms.DataGridViewRowsRemovedEventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.DataGridView.OnRowsRemoved(System.Windows.Forms.DataGridViewRowsRemovedEventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnRowValidating(System.Windows.Forms.DataGridViewCellCancelEventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.DataGridView.OnRowValidating(System.Windows.Forms.DataGridViewCellCancelEventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnSelectionChanged(System.EventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.DataGridView.OnSelectionChanged(System.EventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.OnUserDeletingRow(System.Windows.Forms.DataGridViewRowCancelEventArgs)">
            <inheritdoc cref="M:System.Windows.Forms.DataGridView.OnUserDeletingRow(System.Windows.Forms.DataGridViewRowCancelEventArgs)"/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.GetSpreadsheetData">
            <summary>
            Retrieves the data from the clipboard that can be pasted into a cell or range
            of cells.
            </summary>
            <returns>
            The data as a two-dimensional array of strings; or a null reference if no such
            data is present.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.CustomDataGridView.PaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGrid.CustomDataGridView.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.TableGridEditorControl">
            <summary>
            A <see cref="T:Simphony.Windows.Forms.TableGrid"/> control used for a column that will be edited with a design value
            editor.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridEditorControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TableGridEditorControl"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridEditorControl.Text">
            <inheritdoc/>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridEditorControl.Value">
            <summary>
            Gets or sets the object the control will edit.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.TableGridEditorControl.Property">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridEditorControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridEditorControl.OnClick(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridEditorControl.OnGotFocus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridEditorControl.OnLostFocus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridEditorControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridEditorControl.OnMouseEnter(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridEditorControl.OnMouseLeave(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridEditorControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridEditorControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TableGridEditorControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.TabSheet">
            <summary>
            A tab control providing an appearance similar to the worksheet tabs in Microsoft Excel.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TabSheet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TabSheet"/> class.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.TabSheet.SelectedItemChanged">
            <summary>
            Fired when the value of the <see cref="P:Simphony.Windows.Forms.TabSheet.SelectedItem"/> property is changed.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.TabSheet.SelectedItemChanging">
            <summary>
            Fired when the value of the <see cref="P:Simphony.Windows.Forms.TabSheet.SelectedItem"/> property is about to change.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.TabSheet.TabClosed">
            <summary>
            Fired after the user has closed a tab.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.TabSheet.TabClosing">
            <summary>
            Fired fired when the user attempts to close a tab.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.TabSheet.AllowClose">
            <summary>
            Gets or sets a value indicating whether the user can close tabs.
            </summary>
            <value>
            True if the user can close tabs; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TabSheet.ButtonsVisible">
            <summary>
            Gets or sets a value indicating whether the tab navigation buttons are visible.
            </summary>
            <value>
            True if the tab navigation buttons are visible; otherwise false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TabSheet.Dock">
            <summary>
            Gets or sets the docking location of the control, indicating which borders are docked
            to the container.
            </summary>
            <value>
            The docking location of the control.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TabSheet.Items">
            <summary>
            Gets a list containing the items displayed by the control.
            </summary>
            <value>
            A list containing the items displayed by the control.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TabSheet.SelectedIndex">
            <summary>
            Gets the zero-based index of the currently selected item.
            </summary>
            <value>
            The zero-based index of the currently selected item.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TabSheet.SelectedItem">
            <summary>
            Gets or sets the currently selected item.
            </summary>
            <value>
            The currently selected item; or a null reference if there is no currently selected item.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.TabSheet.IsVisible(System.Int32)">
            <summary>
            Determines if a specified tab is visible to the user.
            </summary>
            <param name="index">
            Index of the tab in question.
            </param>
            <returns>
            True if the specified tab is visible; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if there is no tab associated with the specified index.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.TabSheet.MakeVisible(System.Int32)">
            <summary>
            Makes the specified tab visible to the user if it is not already.
            </summary>
            <param name="index">
            Index of the tab in question.
            </param>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if there is no tab associated with the specified index.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.TabSheet.OnFontChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TabSheet.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TabSheet.OnMouseLeave(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TabSheet.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TabSheet.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TabSheet.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TabSheet.OnSelectedItemChanged(System.Object,System.Object)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.TabSheet.SelectedItemChanged"/> event.
            </summary>
            <param name="oldItem">
            The previously selected item.
            </param>
            <param name="newItem">
            The newly selected item.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.TabSheet.OnSelectedItemChanging(System.Object,System.Object)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.TabSheet.SelectedItemChanging"/> event.
            </summary>
            <param name="oldItem">
            The currently selected item.
            </param>
            <param name="newItem">
            The item being switched to.
            </param>
            <returns>
            True if the change was canceled; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.TabSheet.OnTabClosed(System.Object)">
            <summary>
            Raises the TabClosed event.
            </summary>
            <param name="item">
            The item corresponding to the tab that was closed.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.TabSheet.OnTabClosing(System.Object)">
            <summary>
            Raises the TabClosing event.
            </summary>
            <param name="item">
            The item corresponding to the tab being closed.
            </param>
            <returns>
            True if the close was canceled; otherwise false.
            </returns>
        </member>
        <member name="T:Simphony.Windows.Forms.TabSheet.TabSheetDesigner">
            <summary>
            Defines the design mode behavior of the tab sheet control.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TabSheet.TabSheetDesigner.PostFilterProperties(System.Collections.IDictionary)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.TabSheetCancelEventArgs">
            <summary>
            Provides data for the <see cref="E:Simphony.Windows.Forms.TabSheet.SelectedItemChanging"/> event of the
            <see cref="T:Simphony.Windows.Forms.TabSheet"/> control.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TabSheetCancelEventArgs.#ctor(System.Object,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TabSheetCancelEventArgs"/> class.
            </summary>
            <param name="oldItem">
            The currently selected item.
            </param>
            <param name="newItem">
            The item being switched to.
            </param>
            <param name="cancel">
            True to cancel the event; otherwise, false.
            </param>
        </member>
        <member name="P:Simphony.Windows.Forms.TabSheetCancelEventArgs.NewItem">
            <summary>
            Gets the item being switched to.
            </summary>
            <value>
            The item being switched to.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TabSheetCancelEventArgs.OldItem">
            <summary>
            Gets the currently selected item.
            </summary>
            <value>
            The currently selected item.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.TabSheetDockStyle">
            <summary>
            The docking styles available to the tab sheet control.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TabSheetDockStyle.Bottom">
            <summary>
            The control's bottom edge is docked to the bottom of its containing control (default).
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TabSheetDockStyle.Top">
            <summary>
            The control's top edge is docked to the top of its containing control.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.TabSheetEventArgs">
            <summary>
            Provides data for the <see cref="E:Simphony.Windows.Forms.TabSheet.SelectedItemChanged"/> event of the tab sheet control.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TabSheetEventArgs.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TabSheetEventArgs"/> class.
            </summary>
            <param name="oldItem">
            The previously selected item.
            </param>
            <param name="newItem">
            The newly selected item.
            </param>
        </member>
        <member name="P:Simphony.Windows.Forms.TabSheetEventArgs.NewItem">
            <summary>
            Gets the newly selected item.
            </summary>
            <value>
            The newly selected item.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TabSheetEventArgs.OldItem">
            <summary>
            Gets the previously selected item.
            </summary>
            <value>
            The previously selected item.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.TaskDialog">
            <summary>
            Represents a task dialog that provides functionality above and beyond a standard message box.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TaskDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TaskDialog"/> class.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TaskDialog.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TaskDialog"/> class.
            </summary>
            <param name="container">
            An <see cref="T:System.ComponentModel.IContainer"/> that represents the container for the dialog.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:System.ComponentModel.IContainer"/> is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Windows.Forms.TaskDialog.AllowCancellation">
            <summary>
            Gets or sets a value indicating whether a close button should appear in the dialog's
            caption bar.
            </summary>
            <value>
            True if a close button should appear in the dialog's caption bar; false if the caption
            bar should not contain a close button.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TaskDialog.Caption">
            <summary>
            Gets or sets the text to be used for the dialog's caption.
            </summary>
            <value>
            The text to be used for the dialog's caption.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TaskDialog.CommonButtons">
            <summary>
            Gets or sets a value indicating which standard buttons will appear at bottom of the
            dialog.
            </summary>
            <value>
            A bitwise combination of the <see cref="T:Simphony.Windows.Forms.TaskDialogCommonButtons"/> values.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TaskDialog.Content">
            <summary>
            Gets or sets the extra text displayed by the dialog.
            </summary>
            <value>
            The extra text displayed by the dialog.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TaskDialog.CustomButtons">
            <summary>
            Gets a collection containing the captions for the custom buttons to appear in the dialog.
            </summary>
            <value>
            A collection containing the captions for the custom buttons to appear in the dialog.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TaskDialog.DefaultRadioButton">
            <summary>
            Gets or sets the index of the radio button that is selected when the dialog first opens.
            </summary>
            <value>
            The index of the radio button that is selected when the dialog first opens; or -1 if no
            radio button should be selected.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TaskDialog.MainIcon">
            <summary>
            Gets or sets a value specifying the main icon for the dialog.
            </summary>
            <value>
            A <see cref="T:Simphony.Windows.Forms.TaskDialogIcon"/> value.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TaskDialog.MainInstruction">
            <summary>
            Gets or sets the principal text displayed by the dialog.
            </summary>
            <value>
            The principal text displayed by the dialog.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TaskDialog.RadioButtons">
            <summary>
            Gets a collection containing the captions for the radio buttons to appear in the dialog.
            </summary>
            <value>
            A collection containing the captions for the radio buttons to appear in the dialog.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TaskDialog.SelectedCustomButton">
            <summary>
            Gets the index of the custom button that caused the dialog to be dismissed.
            </summary>
            <value>
            The index of the custom button that caused the dialog to be dismissed; or -1 if the
            dialog was dismissed in some other fashion.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TaskDialog.SelectedRadioButton">
            <summary>
            Gets the index of the radio button that was selected when the dialog box was dismissed.
            </summary>
            <value>
            The index of the radio button that was selected when the dialog box was dismissed; or -1
            if there was no radio button selected.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TaskDialog.UseCommandLinks">
            <summary>
            Gets or sets a value indicating whether custom buttons should be displayed as command
            links instead of push buttons.
            </summary>
            <value>
            A <see cref="T:Simphony.Windows.Forms.TaskDialogCommandLinks"/> value indicating whether custom buttons should be
            displayed as command links instead of push buttons.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TaskDialog.VerificationFlag">
            <summary>
            Gets or sets a value indicating whether the verification text box is checked.
            </summary>
            <value>
            True if the verification text box is checked; false if it is unchecked.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TaskDialog.VerificationText">
            <summary>
            Gets or sets the text displayed next to the verification check box.
            </summary>
            <value>
            The text displayed next to the verification check box.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.TaskDialog.ShowDialog">
            <summary>
            Displays the task dialog with a default owner.
            </summary>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:Simphony.Windows.Forms.TaskDialog.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Displays the task dialog with the specified owner.
            </summary>
            <param name="owner">
            Any object that implements <see cref="T:System.Windows.Forms.IWin32Window"/> that represents the top-level
            window that will own the modal dialog box.
            </param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="T:Simphony.Windows.Forms.TaskDialogCommandLinks">
            <summary>
            Specifies constants defining how custom buttons are displayed on a <see cref="T:Simphony.Windows.Forms.TaskDialog"/>.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogCommandLinks.No">
            <summary>
            Custom buttons should be displayed as push buttons.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogCommandLinks.Yes">
            <summary>
            Custom buttons should be displayed as command links.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogCommandLinks.YesNoIcon">
            <summary>
            Custom buttons should be displayed as command links without the standard task dialog glyph.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.TaskDialogCommonButtons">
            <summary>
            Specifies constants defining which buttons to display on a <see cref="T:Simphony.Windows.Forms.TaskDialog"/>.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogCommonButtons.None">
            <summary>
            The task dialog does not contain any common push button. If no common buttons are specified
            and no custom buttons are specified, the task dialog will contain the OK button by default.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogCommonButtons.OK">
            <summary>
            The task dialog contains an OK button.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogCommonButtons.Yes">
            <summary>
            The task dialog contains a Yes button.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogCommonButtons.No">
            <summary>
            The task dialog contains a No button.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogCommonButtons.Cancel">
            <summary>
            The task dialog contains a Cancel button.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogCommonButtons.Retry">
            <summary>
            The task dialog contains a Retry button.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogCommonButtons.Close">
            <summary>
            The task dialog contains a Close button.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogCommonButtons.OKCancel">
            <summary>
            The task dialog contains OK and Cancel buttons.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogCommonButtons.YesNo">
            <summary>
            The task dialog contains Yes and No buttons.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogCommonButtons.YesNoCancel">
            <summary>
            The task dialog contains Yes, No, and Cancel buttons.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogCommonButtons.RetryCancel">
            <summary>
            The task dialog contains Retry and Cancel buttons.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.TaskDialogIcon">
            <summary>
            Specifies constants defining which icons to display on a <see cref="T:Simphony.Windows.Forms.TaskDialog"/>.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogIcon.None">
            <summary>
            No icon will be displayed.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogIcon.Application">
            <summary>
            The default application icon (WIN32: IDI_APPLICATION).
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogIcon.Asterisk">
            <summary>
            The system asterisk icon (WIN32: IDI_ASTERISK).
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogIcon.Error">
            <summary>
            The system error icon (WIN32: IDI_ERROR).
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogIcon.Exclamation">
            <summary>
            The system exclamation icon (WIN32: IDI_EXCLAMATION).
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogIcon.Hand">
            <summary>
            The system hand icon (WIN32: IDI_HAND).
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogIcon.Information">
            <summary>
            The system information icon (WIN32: IDI_INFORMATION).
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogIcon.Question">
            <summary>
            The system question icon (WIN32: IDI_QUESTION).
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogIcon.Shield">
            <summary>
            The shield icon.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogIcon.Warning">
            <summary>
            The system warning icon (WIN32: IDI_WARNING).
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TaskDialogIcon.WinLogo">
            <summary>
            The Windows logo icon (WIN32: IDI_WINLOGO).
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.TextBoxWriter">
            <summary>
            Implements a <see cref="T:System.IO.TextWriter"/> for writing information to a text box.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TextBoxWriter.#ctor(System.Windows.Forms.TextBox)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TextBoxWriter"/> class.
            </summary>
            <param name="textBox">
            The text box to write to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified text box is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.TextBoxWriter.#ctor(System.Windows.Forms.TextBox,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TextBoxWriter"/> class.
            </summary>
            <param name="textBox">
            The text box to write to.
            </param>
            <param name="formatProvider">
            A format provider object that controls formatting.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified text box is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Windows.Forms.TextBoxWriter.Encoding">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TextBoxWriter.Write(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TextBoxWriter.Write(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TextBoxWriter.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TextBoxWriter.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.TextPrintDocument">
            <summary>
            A custom <see cref="T:System.Drawing.Printing.PrintDocument"/> for printing text.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TextPrintDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TextPrintDocument"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.TextPrintDocument.Font">
            <summary>
            Gets or sets the font to use when printing.
            </summary>
            <value>
            The font to use when printing.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TextPrintDocument.TabWidth">
            <summary>
            Gets or sets the width of tabs.
            </summary>
            <value>
            The width of tabs (in spaces).
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.TextPrintDocument.Text">
            <summary>
            Gets or sets the text to print.
            </summary>
            <value>
            The text to print.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.TextPrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TextPrintDocument.OnEndPrint(System.Drawing.Printing.PrintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TextPrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.TableGridBackgroundStyle">
            <summary>
            Specifies the background style for a <see cref="T:Simphony.Windows.Forms.TableGrid"/> control.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TableGridBackgroundStyle.DataGrid">
            <summary>
            The background style is the same as that of a <see cref="T:System.Windows.Forms.DataGridView"/> control.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.TableGridBackgroundStyle.Spreadsheet">
            <summary>
            The background style mimics a spreadsheet.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.ToolStripLocation">
            <summary>
            Specifies the possible locations for a toolbar.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ToolStripLocation.Bottom">
            <summary>
            The toolbar should be located at the bottom.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ToolStripLocation.Left">
            <summary>
            The toolbar should be located at the left-hand edge.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ToolStripLocation.None">
            <summary>
            No toolbar should be present.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ToolStripLocation.Right">
            <summary>
            The toolbar should be located at the right-hand edge.
            </summary>
        </member>
        <member name="F:Simphony.Windows.Forms.ToolStripLocation.Top">
            <summary>
            The toolbar should be located at the top.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.ToolStripCheckableSplitButton">
            <summary>
            A <see cref="T:System.Windows.Forms.ToolStripSplitButton"/> that can be set to a checked state.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.ToolStripCheckableSplitButton.CheckedChanged">
            <summary>
            Occurs when the value of the <see cref="P:Simphony.Windows.Forms.ToolStripCheckableSplitButton.Checked"/> property changes.
            </summary>
        </member>
        <member name="E:Simphony.Windows.Forms.ToolStripCheckableSplitButton.CheckStateChanged">
            <summary>
            Occurs when the value of the <see cref="P:Simphony.Windows.Forms.ToolStripCheckableSplitButton.CheckState"/> property changes.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.ToolStripCheckableSplitButton.Checked">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Simphony.Windows.Forms.ToolStripCheckableSplitButton"/>
            is pressed or not pressed.
            </summary>
            <value>
            True if the <see cref="T:Simphony.Windows.Forms.ToolStripCheckableSplitButton"/> is pressed; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.ToolStripCheckableSplitButton.CheckOnClick">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Simphony.Windows.Forms.ToolStripCheckableSplitButton"/>
            should automatically appear pressed in and not pressed in when clicked.
            </summary>
            <value>
            True if the <see cref="T:Simphony.Windows.Forms.ToolStripCheckableSplitButton"/> should automatically appear
            pressed in and not pressed in when clicked; otherwise, false.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.ToolStripCheckableSplitButton.CheckState">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Simphony.Windows.Forms.ToolStripCheckableSplitButton"/>
            is in the pressed or not pressed state by default, or is in an indeterminate state.
            </summary>
            <value>
            One of the <see cref="P:Simphony.Windows.Forms.ToolStripCheckableSplitButton.CheckState"/> values.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.ToolStripCheckableSplitButton.OnButtonClick(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.ToolStripCheckableSplitButton.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.ToolStripCheckableSplitButton.CheckedChanged"/> event.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.ToolStripCheckableSplitButton.OnCheckStateChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Simphony.Windows.Forms.ToolStripCheckableSplitButton.CheckStateChanged"/> event.
            </summary>
            <param name="e">
            The data for the event.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.ToolStripCheckableSplitButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.Hourglass">
            <summary>
            A simple class for managing nested wait cursors.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.Hourglass.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.Hourglass"/> class .
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.Hourglass.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.Windows.Forms.ICommand">
            <summary>
            Interface used to implement the Command design pattern.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.ICommand.Execute">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.ICommand.Unexecute">
            <summary>
            Reverses the effects of the command.
            </summary>
        </member>
        <member name="T:Simphony.Windows.Forms.InputBox">
            <summary>
            An input box similar to that provided by Visual Basic.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.InputBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.InputBox"/> class.
            </summary>
        </member>
        <member name="P:Simphony.Windows.Forms.InputBox.Icon">
            <summary>
            Sets the icon to display on the input box.
            </summary>
            <value>
            The icon to display on the input box.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.InputBox.Prompt">
            <summary>
            Gets or sets the text to display on the input box.
            </summary>
            <value>
            The text to display on the input box.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.InputBox.Response">
            <summary>
            Gets or sets the user response.
            </summary>
            <value>
            The user response.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.InputBoxBuilder">
            <summary>
            A helper class for generating input boxes.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.InputBoxBuilder.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.InputBoxBuilder"/> class.
            </summary>
            <param name="owner">
            The form/control the input box will be displayed in front of.
            </param>
        </member>
        <member name="P:Simphony.Windows.Forms.InputBoxBuilder.Caption">
            <summary>
            Gets or sets the input box caption.
            </summary>
            <value>
            The input box caption.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.InputBoxBuilder.DefaultResponse">
            <summary>
            Gets or sets the default response to be displayed by the input box.
            </summary>
            <value>
            The default response to be displayed by the input box.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.InputBoxBuilder.Icon">
            <summary>
            Gets or sets the icon to be displayed by the input box.
            </summary>
            <value>
            The icon to be displayed by the input box.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.InputBoxBuilder.Prompt">
            <summary>
            Gets or sets the prompt to be displayed by the input box.
            </summary>
            <value>
            The prompt to be displayed by the input box.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.InputBoxBuilder.Show">
            <summary>
            Displays the input box.
            </summary>
            <returns>
            The string (potentially empty) entered by the user if the OK button was clicked;
            a null reference if the Cancel button was clicked.
            </returns>
        </member>
        <member name="T:Simphony.Windows.Forms.MessageBoxBuilder">
            <summary>
            A helper class for generating message boxes.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MessageBoxBuilder.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.MessageBoxBuilder"/> class.
            </summary>
            <param name="owner">
            The form/control the message box will be displayed in front of.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.MessageBoxBuilder.#ctor(System.Windows.Forms.Control,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.MessageBoxBuilder"/> class.
            </summary>
            <param name="owner">
            The form/control the message box will be displayed in front of.
            </param>
            <param name="ex">
            An exception to be used to initialize the message box properties.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.MessageBoxBuilder.#ctor(System.Windows.Forms.Control,System.Data.OleDb.OleDbException)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.MessageBoxBuilder"/> class.
            </summary>
            <param name="owner">
            The form/control the message box will be displayed in front of.
            </param>
            <param name="ex">
            An exception to be used to initialize the message box properties.
            </param>
        </member>
        <member name="P:Simphony.Windows.Forms.MessageBoxBuilder.Buttons">
            <summary>
            Gets or sets the message box buttons to be displayed.
            </summary>
            <value>
            The message box buttons to be displayed.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.MessageBoxBuilder.Caption">
            <summary>
            Gets or sets the message box caption.
            </summary>
            <value>
            The message box caption.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.MessageBoxBuilder.DefaultButton">
            <summary>
            Gets or sets the a value indicating which button should be the default button.
            </summary>
            <value>
            A value indicating which button should be the default button.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.MessageBoxBuilder.Icon">
            <summary>
            Gets or sets the icon to be displayed by the message box.
            </summary>
            <value>
            The icon to be displayed by the message box.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.MessageBoxBuilder.Options">
            <summary>
            Gets the message box options to be used by the message box.
            </summary>
            <value>
            The message box options to be used by the message box.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.MessageBoxBuilder.Text">
            <summary>
            Gets or sets the text to be displayed by the message box.
            </summary>
            <value>
            The text to be displayed by the message box.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.MessageBoxBuilder.Append(System.String)">
            <summary>
            Appends a copy of the specified string to the <see cref="P:Simphony.Windows.Forms.MessageBoxBuilder.Text"/> property of the
            <see cref="T:Simphony.Windows.Forms.MessageBoxBuilder"/>.
            </summary>
            <param name="value">
            The string to append.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.MessageBoxBuilder.AppendFormat(System.String,System.Object[])">
            <summary>
            Appends the string returned by processing a composite format string, which contains
            zero or more format items, to the <see cref="P:Simphony.Windows.Forms.MessageBoxBuilder.Text"/> property of the
            <see cref="T:Simphony.Windows.Forms.MessageBoxBuilder"/>. Each format item is replaced by the string
            representation of a corresponding argument in a parameter array.
            </summary>
            <param name="format">
            A composite format string.
            </param>
            <param name="args">
            An array of objects to format.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified format string or the specified array is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if a formatting error occurs.
            </exception>
        </member>
        <member name="M:Simphony.Windows.Forms.MessageBoxBuilder.AppendLine">
            <summary>
            Appends a copy of the default line terminator to the <see cref="P:Simphony.Windows.Forms.MessageBoxBuilder.Text"/> property
            of the <see cref="T:Simphony.Windows.Forms.MessageBoxBuilder"/>.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.MessageBoxBuilder.AppendLine(System.String)">
            <summary>
            Appends a copy of the specified string followed by the default line terminator to
            the <see cref="P:Simphony.Windows.Forms.MessageBoxBuilder.Text"/> property of the <see cref="T:Simphony.Windows.Forms.MessageBoxBuilder"/>.
            </summary>
            <param name="value">
            The string to append.
            </param>
        </member>
        <member name="M:Simphony.Windows.Forms.MessageBoxBuilder.Show">
            <summary>
            Displays the message box.
            </summary>
            <returns>
            A DialogResult indicating which button the user clicked to dismiss the message box.
            </returns>
        </member>
        <member name="T:Simphony.Windows.Forms.ObjectAddedEventArgs`1">
            <summary>
            Provides data for events in which an object has been added to a document.
            </summary>
            <typeparam name="T">
            The type of the object.
            </typeparam>
        </member>
        <member name="M:Simphony.Windows.Forms.ObjectAddedEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.ObjectAddedEventArgs`1"/> class.
            </summary>
            <param name="theObject">
            The object associated with the event.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Windows.Forms.ObjectAddedEventArgs`1.Object">
            <summary>
            Gets the object associated with the event.
            </summary>
            <value>
            The object associated with the event.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.ObjectChangedEventArgs`1">
            <summary>
            Provides data for events in which an object within a document has changed.
            </summary>
            <typeparam name="T">
            The type of the object.
            </typeparam>
        </member>
        <member name="M:Simphony.Windows.Forms.ObjectChangedEventArgs`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.ObjectChangedEventArgs`1"/> class.
            </summary>
            <param name="theObject">
            The object associated with the event.
            </param>
            <param name="propertyName">
            The name of the property that changed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object or the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="P:Simphony.Windows.Forms.ObjectChangedEventArgs`1.Object">
            <summary>
            Gets the object associated with the event.
            </summary>
            <value>
            The object associated with the event.
            </value>
        </member>
        <member name="P:Simphony.Windows.Forms.ObjectChangedEventArgs`1.PropertyName">
            <summary>
            Gets the name of the property that changed.
            </summary>
            <value>
            The name of the property that changed.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.ObjectRemovedEventArgs`1">
            <summary>
            Provides data for events in which an object has been removed from a document.
            </summary>
            <typeparam name="T">
            The type of the object.
            </typeparam>
        </member>
        <member name="M:Simphony.Windows.Forms.ObjectRemovedEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.ObjectRemovedEventArgs`1"/> class.
            </summary>
            <param name="theObject">
            The object associated with the event.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Windows.Forms.ObjectRemovedEventArgs`1.Object">
            <summary>
            Gets the object associated with the event.
            </summary>
            <value>
            The object associated with the event.
            </value>
        </member>
        <member name="T:Simphony.Windows.Forms.TextBoxTraceListener">
            <summary>
            Implements a listener that will send trace and debug output to a <see cref="T:System.Windows.Forms.TextBox"/>.
            </summary>
        </member>
        <member name="M:Simphony.Windows.Forms.TextBoxTraceListener.#ctor(System.Windows.Forms.TextBox)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.Windows.Forms.TextBoxTraceListener"/> class.
            </summary>
            <param name="textBox">
            The textbox the listener is to send output to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified textbox is a null reference.
            </exception>
        </member>
        <member name="P:Simphony.Windows.Forms.TextBoxTraceListener.Enabled">
            <summary>
            Gets or sets a value indicating whether or not trace and debug output should be routed
            the text box.
            </summary>
            <value>
            True if trace and debug output should be routed the text box; otherwise false.
            </value>
        </member>
        <member name="M:Simphony.Windows.Forms.TextBoxTraceListener.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.Windows.Forms.TextBoxTraceListener.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Simphony.ReflectionExtensions">
            <summary>
            Extension methods for the System.Reflection namespace.
            </summary>
            <summary>
            Extension methods for the System.Reflection namespace.
            </summary>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetIcon(System.Reflection.Assembly)">
            <summary>
            Gets the icon defined for an assembly by the Icon custom attribute.
            </summary>
            <param name="assembly">
            The assembly for which an icon is to be retrieved.
            </param>
            <returns>
            The icon defined by the Icon custom attribute if found; otherwise
            a null reference.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified assembly is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetIcon(System.Reflection.MemberInfo)">
            <summary>
            Gets the icon defined for a class member by the Icon custom attribute.
            </summary>
            <param name="member">
            The class member.
            </param>
            <returns>
            The icon defined by the Icon custom attribute if found; otherwise
            a null reference.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified class member is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.ExceptionIfExpired(System.Reflection.Assembly,System.DateTime)">
            <summary>
            Throws an exception if the assembly has expired.
            </summary>
            <param name="assembly">
            The assembly.
            </param>
            <param name="lastRun">
            The last time the assembly was run.
            </param>
            <exception cref="T:Simphony.ComponentModel.AssemblyExpiredException">
            Thrown if the assembly's expiry date has passed or if the last time
            the assembly was run was in the future.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetBrowsable(System.Reflection.MemberInfo)">
            <summary>
            Gets a value indicating whether the class member should be displayed in a Properties window.
            </summary>
            <param name="member">
            The class member.
            </param>
            <returns>
            True if the class member should be displayed in a Properties window; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified class member is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetCompany(System.Reflection.Assembly)">
            <summary>
            Gets the company name of the assembly.
            </summary>
            <param name="assembly">
            The assembly.
            </param>
            <returns>
            The company name defined by the AssemblyCompany custom attribute if found;
            otherwise an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified assembly is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetCopyright(System.Reflection.Assembly)">
            <summary>
            Gets the copyright information for the assembly.
            </summary>
            <param name="assembly">
            The assembly.
            </param>
            <returns>
            The copyright information defined by the AssemblyCopyright custom attribute if found;
            otherwise an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified assembly is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetCustomAttributes``1(System.Reflection.Assembly)">
            <summary>
            Gets a sequence of custom attributes applied to a specified assembly.
            </summary>
            <typeparam name="T">
            The type of custom attribute to search for.
            </typeparam>
            <param name="assembly">
            The assembly to search for custom attributes.
            </param>
            <returns>
            A (possible empty) sequence of custom attributes applied to the specified assembly.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified assembly is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets a sequence of custom attributes applied to a specified member.
            </summary>
            <typeparam name="T">
            The type of custom attribute to search for.
            </typeparam>
            <param name="member">
            The member to search for custom attributes.
            </param>
            <param name="inherit">
            True to search this member's inheritance chain to find the attributes; otherwise, false.
            </param>
            <returns>
            A (possible empty) sequence of custom attributes applied to the specified member.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified member is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetDescription(System.Reflection.Assembly)">
            <summary>
            Gets the description of the assembly.
            </summary>
            <param name="assembly">
            The assembly.
            </param>
            <returns>
            The description defined by the AssemblyDescription custom attribute if found;
            otherwise an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified assembly is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            Gets the description of the class member.
            </summary>
            <param name="member">
            The class member.
            </param>
            <returns>
            The description defined by the Description custom attribute if found;
            otherwise an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified class member is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetDisplayIndex(System.Reflection.MemberInfo)">
            <summary>
            Gets the display index of a member.
            </summary>
            <param name="member">
            The member.
            </param>
            <returns>
            The display index of the member.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified member is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetDisplayName(System.Reflection.MemberInfo)">
            <summary>
            Gets the display name defined for a class member by the DisplayName custom attribute.
            </summary>
            <param name="member">
            The class member.
            </param>
            <returns>
            The display name defined by the DisplayName custom attribute if found; otherwise the name of the class member.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified class member is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetExpiryDate(System.Reflection.Assembly)">
            <summary>
            Gets the expiry date of the assembly.
            </summary>
            <param name="assembly">
            The assembly.
            </param>
            <returns>
            The expiry date defined by the ExpiryDate custom attribute if found;
            otherwise DateTime.MaxValue.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified assembly is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetFileVersion(System.Reflection.Assembly)">
            <summary>
            Gets the file version of the assembly.
            </summary>
            <param name="assembly">
            The assembly.
            </param>
            <returns>
            The file version defined by the AssemblyFileVersion custom attribute if found;
            otherwise an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified assembly is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetGenericTypeDefinitions(System.Reflection.Assembly)">
            <summary>
            Gets the generic type definitions defined in the assembly.
            </summary>
            <param name="assembly">
            The assembly.
            </param>
            <returns>
            An array (possibly empty) that contains all the generic type definitions defined in the assembly.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified assembly is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetImage(System.Reflection.Assembly)">
            <summary>
            Gets the image defined for an assembly by the <see cref="T:Simphony.ComponentModel.ImageAttribute"/> custom
            attribute.
            </summary>
            <param name="assembly">
            The assembly for which an image is to be retrieved.
            </param>
            <returns>
            The image defined by the <see cref="T:Simphony.ComponentModel.ImageAttribute"/> custom attribute if found;
            otherwise a null reference.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified assembly is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetImage(System.Reflection.MemberInfo)">
            <summary>
            Gets the image defined for a class member by the <see cref="T:Simphony.ComponentModel.ImageAttribute"/> custom
            attribute.
            </summary>
            <param name="member">
            The class member.
            </param>
            <returns>
            The image defined by the <see cref="T:Simphony.ComponentModel.ImageAttribute"/> custom attribute if found;
            otherwise a null reference.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified class member is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetParenthesizePropertyName(System.Reflection.MemberInfo)">
            <summary>
            Gets a value indicating whether a member should be displayed with parentheses in
            a Properties window.
            </summary>
            <param name="member">
            The member.
            </param>
            <returns>
            True if the member should be displayed with parentheses in a Properties window;
            otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified member is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetProduct(System.Reflection.Assembly)">
            <summary>
            Gets the product name of the assembly.
            </summary>
            <param name="assembly">
            The assembly.
            </param>
            <returns>
            The product name defined by the AssemblyProduct custom attribute if found;
            otherwise an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified assembly is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetRevisionNumber(System.Reflection.Assembly)">
            <summary>
            Gets the revision number of the assembly.
            </summary>
            <param name="assembly">
            The assembly.
            </param>
            <returns>
            The revision number defined by the fourth part of the AssemblyFileVersion custom
            attribute if found; otherwise zero.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified assembly is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetTitle(System.Reflection.Assembly)">
            <summary>
            Gets the title of the assembly.
            </summary>
            <param name="assembly">
            The assembly.
            </param>
            <returns>
            The title defined by the AssemblyTitle custom attribute if found;
            otherwise an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified assembly is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.GetVersion(System.Reflection.Assembly)">
            <summary>
            Gets the version of the assembly.
            </summary>
            <param name="assembly">
            The assembly.
            </param>
            <returns>
            The version of the assembly.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified assembly is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.ParameterCount(System.Reflection.MethodInfo)">
            <summary>
            Gets the number of parameters a method has.
            </summary>
            <param name="method">
            A <see cref="T:System.Reflection.MethodInfo"/> specifying the method.
            </param>
            <returns>
            The number of parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:System.Reflection.MethodInfo"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.TryGetCustomAttribute``1(System.Reflection.Assembly,``0@)">
            <summary>
            Attempts to retrieve the first custom attribute of a specified type defined
            on an assembly.
            </summary>
            <typeparam name="T">
            The type of custom attribute to retrieve.
            </typeparam>
            <param name="assembly">
            The assembly from which to retrieve the custom attribute.
            </param>
            <param name="attribute">
            When this method returns, contains the retrieved custom attribute, if found;
            otherwise, the default value for the type of the custom attribute.
            </param>
            <returns>
            True if a custom attribute was found; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified assembly is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ReflectionExtensions.TryGetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean,``0@)">
            <summary>
            Attempts to retrieve the first custom attribute of a specified type defined
            on an assembly.
            </summary>
            <typeparam name="T">
            The type of custom attribute to retrieve.
            </typeparam>
            <param name="member">
            The member of a class from which to retrieve the custom attribute.
            </param>
            <param name="inherit">
            Specifies whether to search this member's inheritance chain to find the attributes.
            </param>
            <param name="attribute">
            When this method returns, contains the retrieved custom attribute, if found;
            otherwise, the default value for the type of the custom attribute.
            </param>
            <returns>
            True if a custom attribute was found; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified member is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.SystemExtensions">
            <summary>
            Extension methods for the System namespace.
            </summary>
            <summary>
            Extension methods for the System namespace.
            </summary>
        </member>
        <member name="M:Simphony.SystemExtensions.GetIcon(System.Type)">
            <summary>
            Gets the icon defined for a type by the Icon custom attribute.
            </summary>
            <param name="type">
            The type for which an icon is to be retrieved.
            </param>
            <returns>
            The icon defined by the Icon custom attribute if found; otherwise
            a null reference.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.GetBigImage(System.Type)">
            <summary>
            Gets the image defined for a type by the <see cref="T:Simphony.ComponentModel.BigImageAttribute"/> custom
            attribute.
            </summary>
            <param name="type">
            The type for which an image is to be retrieved.
            </param>
            <returns>
            The image defined by the <see cref="T:Simphony.ComponentModel.BigImageAttribute"/> custom attribute if found;
            otherwise a null reference.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.GetBrowsable(System.Type)">
            <summary>
            Gets the browsability defined for a type by the Browsable custom attribute.
            </summary>
            <param name="type">
            The type for which the browsability is to be retrieved.
            </param>
            <returns>
            The browsability defined by the Browsable custom attribute if found; otherwise true.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.GetCategory(System.Type)">
            <summary>
            Gets the category defined for a type by the Category custom attribute.
            </summary>
            <param name="type">
            The type for which the category is to be retrieved.
            </param>
            <returns>
            The category defined by the Category custom attribute if found; otherwise an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.GetCodename(System.Type,System.Management.CodeLanguage)">
            <summary>
            Gets the name of a type as it would be written in a specified programming language.
            </summary>
            <param name="type">
            The type for which the name is to be retrieved.
            </param>
            <param name="language">
            The programming language.
            </param>
            <returns>
            The name of the type as it would be written in the specified programming language.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown if the specified programming language is not supported by the method.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.GetCustomAttributes``1(System.Type,System.Boolean)">
            <summary>
            Gets a sequence of custom attributes applied to a specified type.
            </summary>
            <typeparam name="T">
            The type of custom attribute to search for.
            </typeparam>
            <param name="type">
            The type to search for custom attributes.
            </param>
            <param name="inherit">
            True to search this type's inheritance chain to find the attributes; otherwise, false.
            </param>
            <returns>
            A (possible empty) sequence of custom attributes applied to the specified type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for a type.
            </summary>
            <param name="type">
            The type in question.
            </param>
            <returns>
            The default value for the specified type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.GetDescription(System.Type)">
            <summary>
            Gets the description defined for a type by the Description custom attribute.
            </summary>
            <param name="type">
            The type for which a description is to be retrieved.
            </param>
            <returns>
            The description defined by the Description custom attribute if found;
            otherwise an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.GetDisplayName(System.Type)">
            <summary>
            Gets the display name defined for a type by the DisplayName custom attribute.
            </summary>
            <param name="type">
            The type for which the display name is to be retrieved.
            </param>
            <returns>
            The display name defined by the DisplayName custom attribute if found; otherwise the name of the class.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.GetEditorSize(System.Type)">
            <summary>
            Gets the editor size for the class.
            </summary>
            <param name="type">
            The class.
            </param>
            <returns>
            The editor size for the class.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified class is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.GetEditorSize(System.Type,System.Drawing.Size)">
            <summary>
            Gets the editor size for the class.
            </summary>
            <param name="type">
            The class.
            </param>
            <param name="defaultSize">
            The size to return if no <see cref="T:Simphony.ComponentModel.EditorSizeAttribute"/> is present.
            </param>
            <returns>
            The editor size for the class.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified class is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.GetImage(System.Type)">
            <summary>
            Gets the image defined for a type by the <see cref="T:Simphony.ComponentModel.ImageAttribute"/> custom
            attribute.
            </summary>
            <param name="type">
            The type for which an image is to be retrieved.
            </param>
            <returns>
            The image defined by the <see cref="T:Simphony.ComponentModel.ImageAttribute"/> custom attribute if found;
            otherwise a null reference.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.GetImageResourceName(System.Type)">
            <summary>
            Gets the resource name of the image defined for a type by the <see cref="T:Simphony.ComponentModel.ImageAttribute"/>
            custom attribute.
            </summary>
            <param name="type">
            The type for which an image resource name is to be retrieved.
            </param>
            <returns>
            The resource name of the image defined by the <see cref="T:Simphony.ComponentModel.ImageAttribute"/> custom attribute
            if found; otherwise an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.GetService``1(System.IServiceProvider)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <typeparam name="T">
            The type of service to get.
            </typeparam>
            <param name="provider">
            The provider from which to get the service.
            </param>
            <returns>
            A service object of the specified type or a null reference if there is no service
            of the specified type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified provider is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.HasDefaultConstructor(System.Type)">
            <summary>
            Gets a value indicating whether or not a specified type has a public default constructor.
            </summary>
            <param name="type">
            The type in question.
            </param>
            <returns>
            True if the specified type has a public default constructor; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.InheritsOrImplements(System.Type,System.Type)">
            <summary>
            Determines whether or not a child type inherits from or implements a parent type.
            </summary>
            <param name="child">
            The child type in question.
            </param>
            <param name="parent">
            The parent type in question.
            </param>
            <returns>
            True if the child type inherits from or implements the parent type; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the specified types is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.Initialize``1(``0[],``0)">
            <summary>
            Initializes every element of a one-dimensional array to a specified value.
            </summary>
            <typeparam name="T">
            The type of array.
            </typeparam>
            <param name="array">
            The array to initialize.
            </param>
            <param name="value">
            The value to which every element should be initialized.
            </param>
        </member>
        <member name="M:Simphony.SystemExtensions.InsertColumn``1(``0[0:,0:],System.Int32)">
            <summary>
            Inserts a column into a two-dimensional array.
            </summary>
            <typeparam name="T">
            The type of the array.
            </typeparam>
            <param name="input">
            The array into which a column is to be inserted.
            </param>
            <param name="index">
            The index of the new column.
            </param>
            <returns>
            The new array.
            </returns>
            <remarks>
            The new column is initialized with the default value of the type <typeparamref name="T"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.InsertRow``1(``0[0:,0:],System.Int32)">
            <summary>
            Inserts a row into a two-dimensional array.
            </summary>
            <typeparam name="T">
            The type of the array.
            </typeparam>
            <param name="input">
            The array into which a row is to be inserted.
            </param>
            <param name="index">
            The index of the new row.
            </param>
            <returns>
            The new array.
            </returns>
            <remarks>
            The new row is initialized with the default value of the type <typeparamref name="T"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.IsFinite(System.Double)">
            <summary>
            Determines whether the value is a finite number.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <returns>
            False if the value is infinite or not a number; otherwise, true.
            </returns>
        </member>
        <member name="M:Simphony.SystemExtensions.IsNullable(System.Type)">
            <summary>
            Returns a value indicating whether or not a type can take on a value of null.
            </summary>
            <param name="type">
            The type in question.
            </param>
            <returns>
            True if the specified type can take on a value of null; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.IsNumeric(System.Type)">
            <summary>
            Returns a value indicating whether or not a type is a primitive numeric type.
            </summary>
            <param name="type">
            The type in question.
            </param>
            <returns>
            True if the specified type is a primitive numeric type; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.RemoveColumn``1(``0[0:,0:],System.Int32)">
            <summary>
            Removes a column from a two-dimensional array.
            </summary>
            <typeparam name="T">
            The type of the array.
            </typeparam>
            <param name="input">
            The array from which a column is to be removed.
            </param>
            <param name="index">
            The index of the column to remove.
            </param>
            <returns>
            The new array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified array contains only one column.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.RemoveRow``1(``0[0:,0:],System.Int32)">
            <summary>
            Removes a row from a two-dimensional array.
            </summary>
            <typeparam name="T">
            The type of the array.
            </typeparam>
            <param name="input">
            The array from which a row is to be removed.
            </param>
            <param name="index">
            The index of the row to remove.
            </param>
            <returns>
            The new array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.SafeMakeGenericType(System.Type,System.Type[])">
            <summary>
            Substitutes the elements of an array of types for the type parameters of a specified generic
            type definition and returns a Type object representing the resulting constructed type.
            </summary>
            <param name="genericType">
            The generic type definition.
            </param>
            <param name="typeArguments">
            An array of types to be substituted for the type parameters of the specified generic type
            definition.
            </param>
            <returns>
            The constructed type if the type arguments were compatible with the specified generic type
            definition; otherwise a null reference.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified generic type definition is not a generic type definition.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified generic type definition, the specified array of types, or any
            element in the specified array of types is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.ToFriendlyString(System.TimeSpan)">
            <summary>
            Converts a time span to an easy-to-read string.
            </summary>
            <param name="timeSpan">
            The time span to convert.
            </param>
            <returns>
            An easy-to-read string representing the time span.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown if the specified time span is negative.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.ToFriendlyString(System.TimeSpan,System.String)">
            <summary>
            Converts a time span to an easy-to-read string.
            </summary>
            <param name="timeSpan">
            The time span to convert.
            </param>
            <param name="format">
            The numeric format used to generate the string.
            </param>
            <returns>
            An easy-to-read string representing the time span.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown if the specified time span is negative.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.ToOADate(System.Nullable{System.DateTime})">
            <summary>
            Converts the value of a specified <see cref="T:System.DateTime"/> structure to the equivalent OLE
            Automation date.
            </summary>
            <param name="date">
            The <see cref="T:System.DateTime"/> structure.
            </param>
            <returns>
            A double-precision floating-point number that contains an OLE Automation date equivalent
            to the specified <see cref="T:System.DateTime"/> structure.
            </returns>
        </member>
        <member name="M:Simphony.SystemExtensions.TotalDays(System.Nullable{System.TimeSpan})">
            <summary>
            Gets the value of a specified <see cref="T:System.TimeSpan"/> structure expressed in whole and
            fractional days.
            </summary>
            <param name="time">
            The <see cref="T:System.TimeSpan"/> structure.
            </param>
            <returns>
            The total number of days represented by the specified <see cref="T:System.TimeSpan"/> structure.
            </returns>
        </member>
        <member name="M:Simphony.SystemExtensions.TotalTimeUnits(System.TimeSpan,Simphony.Simulation.TimeUnit)">
            <summary>
            Gets the value of a specified TimeSpan structure expressed in the specified time units.
            </summary>
            <param name="time">
            The TimeSpan structure.
            </param>
            <param name="timeUnit">
            The time units in which the TimeSpan structure's value is to be expressed.
            </param>
            <returns>
            The value of the specified TimeSpan structure expressed in the specified time units.
            </returns>
        </member>
        <member name="M:Simphony.SystemExtensions.TryGetCustomAttribute``1(System.Type,System.Boolean,``0@)">
            <summary>
            Attempts to retrieve the first custom attribute of a specified type defined
            on a type.
            </summary>
            <typeparam name="T">
            The type of custom attribute to retrieve.
            </typeparam>
            <param name="type">
            The type from which to retrieve the custom attribute.
            </param>
            <param name="inherit">
            Specifies whether to search this member's inheritance chain to find the attributes.
            </param>
            <param name="attribute">
            When this method returns, contains the retrieved custom attribute, if found;
            otherwise, the default value for the type of the custom attribute.
            </param>
            <returns>
            True if a custom attribute was found; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.GetXmlIncludeAssemblyQualifiedName(System.Type)">
            <summary>
            Gets the value defined for a type by the XmlIncludeAssemblyQualifiedName
            custom attribute.
            </summary>
            <param name="type">
            The type for which a value is to be retrieved.
            </param>
            <returns>
            The value defined by the XmlIncludeAssemblyQualifiedName custom attribute
            if found; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.GetXmlRootElementName(System.Type)">
            <summary>
            Gets the XML element name defined for a type by the XmlRoot custom attribute.
            </summary>
            <param name="type">
            The type for which an XML element name is to be retrieved.
            </param>
            <returns>
            The XML element name defined by the XmlRoot custom attribute if found; otherwise
            the name of the type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.SystemExtensions.GetXmlRootNamespace(System.Type)">
            <summary>
            Gets the XML namespace defined for a type by the XmlRoot custom attribute.
            </summary>
            <param name="type">
            The type for which an XML namespace is to be retrieved.
            </param>
            <returns>
            The XML namespace defined by the XmlRoot custom attribute if found; otherwise null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified type is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.OfficeOpenXmlExtensions">
            <summary>
            Extension methods for the <see cref="N:OfficeOpenXml"/> namespace.
            </summary>
        </member>
        <member name="M:Simphony.OfficeOpenXmlExtensions.GetEnum``1(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32)">
            <summary>
            Gets the enumerated type contained in a cell.
            </summary>
            <typeparam name="T">
            The enumerated type to get.
            </typeparam>
            <param name="worksheet">
            The worksheet containing the cell.
            </param>
            <param name="row">
            The one-based index of the row containing the cell.
            </param>
            <param name="column">
            The one-based index of the column containing the cell.
            </param>
            <returns>
            The value contained in the cell.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified worksheet is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified row or column is out of range; if the specified type is not an
            <see cref="T:System.Enum"/>; or if the specified cell does not contain one of the named constants
            defined for the enumeration.
            </exception>
        </member>
        <member name="M:Simphony.OfficeOpenXmlExtensions.GetWorksheetOrThrow(OfficeOpenXml.ExcelWorkbook,System.String)">
            <summary>
            Gets the worksheet with the specified name or throws an exception if a worksheet with
            the specified name does not exist.
            </summary>
            <param name="workbook">
            The workbook that contains the worksheet.
            </param>
            <param name="name">
            The name of the worksheet to get.
            </param>
            <returns>
            The worksheet.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified workbook is a null reference.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if the workbook does not contain a worksheet with the specified name.
            </exception>
        </member>
        <member name="M:Simphony.OfficeOpenXmlExtensions.IsCellEmpty(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32)">
            <summary>
            Determines if a cell is empty.
            </summary>
            <param name="worksheet">
            The worksheet containing the cell.
            </param>
            <param name="row">
            The one-based row index of the cell in question.
            </param>
            <param name="column">
            The one-based column index of the cell in question.
            </param>
            <returns>
            True if the cell is empty; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified worksheet is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified row or column index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.OfficeOpenXmlExtensions.IsRowEmpty(OfficeOpenXml.ExcelWorksheet,System.Int32)">
            <summary>
            Determines if a row is empty.
            </summary>
            <param name="worksheet">
            The worksheet containing the row.
            </param>
            <param name="row">
            The one-based index of the row in question.
            </param>
            <returns>
            True if the row is empty; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified worksheet is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified row is out of range.
            </exception>
        </member>
        <member name="M:Simphony.OfficeOpenXmlExtensions.SetCorrectWidth(OfficeOpenXml.ExcelColumn,System.Double)">
            <summary>
            Sets the attribute width for the excel column to the correct value.
            </summary>
            <param name="column">
            The object to edit.
            </param>
            <param name="width">
            The width to set the excel column to.
            </param>
            <remarks>
            See <see href="http://stackoverflow.com/questions/9096176/how-to-set-xlsx-cell-width-with-epplus-in-c-sharp">HERE</see>.
            </remarks>
        </member>
        <member name="M:Simphony.OfficeOpenXmlExtensions.TryGetValue``1(OfficeOpenXml.ExcelRange,``0@)">
            <summary>
            Attempts to get the strongly typed value of a cell.
            </summary>
            <typeparam name="T">
            The type.
            </typeparam>
            <param name="range">
            The cell from which the value should be retrieved.
            </param>
            <param name="result">
            When the method exits, the strongly typed value of the cell if the call is successful;
            otherwise the default value of <typeparamref name="T"/>.
            </param>
            <returns>
            True if the value was successfully retrieved; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified cell is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.OfficeOpenXmlExtensions.TryGetValue``1(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,``0@)">
            <summary>
            Attempts to get the strongly typed value of a cell.
            </summary>
            <typeparam name="T">
            The type.
            </typeparam>
            <param name="worksheet">
            The worksheet containing the cell.
            </param>
            <param name="row">
            The one-based index of the row containing the cell.
            </param>
            <param name="column">
            The one-based index of the column containing the cell.
            </param>
            <param name="result">
            When the method exits, the strongly typed value of the cell if the call is successful;
            otherwise the default value of <typeparamref name="T"/>.
            </param>
            <returns>
            True if the value was successfully retrieved; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified worksheet is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified row or column is out of range; if the specified type if not an
            <see cref="T:System.Enum"/>; or if the specified cell does not contain one of the named constants
            defined for the enumeration.
            </exception>
        </member>
        <member name="T:Simphony.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Accept">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.AlignCenter">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.AlignGrid">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.AlignJustify">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.AlignLeft">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.AlignRight">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Arabic">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.ArrowDown">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.ArrowUp">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Background">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.BetaMomentMatchingFitDataPointsOutsideRange">
            <summary>
              Looks up a localized string similar to The data contains values outside the range {0} to {1}..
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Bold">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Bullet">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.BulletedList">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.ChartHelperPlotScatterPlotNonTwoDimensionalVector">
            <summary>
              Looks up a localized string similar to One or more of the vectors is not two-dimensional..
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Copy">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Cut">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Delete">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Dirt">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Document">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.DropDown">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.EditChart">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.GrowFont">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Indent">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Italic">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.LineSpacing">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.LowerCaseLetter">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.LowerCaseRoman">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.MatrixNotPositiveDefinite">
            <summary>
              Looks up a localized string similar to The specified matrix is not positive definite..
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.MatrixNotPositiveSemiDefinite">
            <summary>
              Looks up a localized string similar to The specified matrix is not positive semi-definite..
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.MultivariateNormalLocationCovarianceMismatch">
            <summary>
              Looks up a localized string similar to The dimension of the location vector does not match that of the covariance matrix..
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.None">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Outdent">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Overlay">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Paste">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Reject">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Report">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Save">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.ShowGrid">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.ShrinkFont">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Strikethrough">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.Underline">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.UpperCaseLetter">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Simphony.Properties.Resources.UpperCaseRoman">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Simphony.TextExtensions">
            <summary>
            Extension methods for the System.Text namespace.
            </summary>
        </member>
        <member name="M:Simphony.TextExtensions.AppendFormatLine(System.Text.StringBuilder,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero
            or more format items, to this instance. Each format item is replaced by the string
            representation of a corresponding argument in a parameter array using a specified format
            provider.
            </summary>
            <param name="builder">
            The <see cref="T:System.Text.StringBuilder"/> to which the operation should be performed.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information.
            </param>
            <param name="format">
            A composite format string.
            </param>
            <param name="args">
            An array of objects to format.
            </param>
            <returns>
            A reference to this instance after the append operation has completed. After the append
            operation, this instance contains any data that existed before the operation, suffixed by a
            copy of <paramref name="format"/> where any format specification is replaced by the string
            representation of the corresponding object argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:System.Text.StringBuilder"/>, the specified format string, or the
            specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the length of the expanded string would exceed the maximum capacity of the
            <see cref="T:System.Text.StringBuilder"/>.
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the format string is invalid.
            </exception>
        </member>
        <member name="M:Simphony.TextExtensions.AppendFormatLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero
            or more format items, to this instance. Each format item is replaced by the string
            representation of a corresponding argument in a parameter array.
            </summary>
            <param name="builder">
            The <see cref="T:System.Text.StringBuilder"/> to which the operation should be performed.
            </param>
            <param name="format">
            A composite format string.
            </param>
            <param name="args">
            An array of objects to format.
            </param>
            <returns>
            A reference to this instance with <paramref name="format"/> appended. Each format item in
            <paramref name="format"/> is replaced by the string representation of the corresponding
            object argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:System.Text.StringBuilder"/>, the specified format string, or the
            specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the length of the expanded string would exceed the maximum capacity of the
            <see cref="T:System.Text.StringBuilder"/>.
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the format string is invalid.
            </exception>
        </member>
        <member name="T:Simphony.ChartHelper">
            <summary>
            Helper class for plotting various types of statistics in a chart control.
            </summary>
        </member>
        <member name="M:Simphony.ChartHelper.ApplyAreaChartStyle(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32)">
            <summary>
            Configures the style of a series in a chart control to display an area chart.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to configure.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ApplyAreaChartStyle(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series)">
            <summary>
            Configures the style of a series in a chart control to display an area chart.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to configure.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified series is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ApplyAreaChartStyle(System.Windows.Forms.DataVisualization.Charting.Chart,System.String)">
            <summary>
            Configures the style of a series in a chart control to display an area chart.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to configure.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ApplyBarChartStyle(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32)">
            <summary>
            Configures the style of a series in a chart control to display a bar chart.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to configure.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ApplyBarChartStyle(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series)">
            <summary>
            Configures the style of a series in a chart control to display a bar chart.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to configure.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified series is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ApplyBarChartStyle(System.Windows.Forms.DataVisualization.Charting.Chart,System.String)">
            <summary>
            Configures the style of a series in a chart control to display a bar chart.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to configure.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ApplyLineChartStyle(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32)">
            <summary>
            Configures the style of a series in a chart control to display a line chart.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to configure.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ApplyLineChartStyle(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series)">
            <summary>
            Configures the style of a series in a chart control to display a line chart.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to configure.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified series is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ApplyLineChartStyle(System.Windows.Forms.DataVisualization.Charting.Chart,System.String)">
            <summary>
            Configures the style of a series in a chart control to display a line chart.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to configure.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ApplyPointChartStyle(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32)">
            <summary>
            Configures the style of a series in a chart control to display a scatter chart.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to configure.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ApplyPointChartStyle(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series)">
            <summary>
            Configures the style of a series in a chart control to display a scatter chart.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to configure.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified series is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ApplyPointChartStyle(System.Windows.Forms.DataVisualization.Charting.Chart,System.String)">
            <summary>
            Configures the style of a series in a chart control to display a scatter chart.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to configure.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxisX(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.ChartArea,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Sets the range of the x-axis for a chart area in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="chartArea">
            The chart area whose x-axis is to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The left-most x-axis value.
            </param>
            <param name="maximum">
            The right-most x-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified chart area, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxisX(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.ChartArea,System.String,System.String,System.Double,System.Double)">
            <summary>
            Sets the range of the x-axis for a chart area in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="chartArea">
            The chart area whose x-axis is to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The left-most x-axis value.
            </param>
            <param name="maximum">
            The right-most x-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified chart area, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxisX(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Sets the range of the x-axis for a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series whose x-axis is to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The left-most x-axis value.
            </param>
            <param name="maximum">
            The right-most x-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if if the specified index is invalid or if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxisX(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,System.String,System.String,System.Double,System.Double)">
            <summary>
            Sets the range of the x-axis for a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series whose x-axis is to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The left-most x-axis value.
            </param>
            <param name="maximum">
            The right-most x-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if if the specified index is invalid or if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxisX(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Sets the range of the x-axis for a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series whose x-axis is to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The left-most x-axis value.
            </param>
            <param name="maximum">
            The right-most x-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxisX(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,System.String,System.String,System.Double,System.Double)">
            <summary>
            Sets the range of the x-axis for a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series whose x-axis is to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The left-most x-axis value.
            </param>
            <param name="maximum">
            The right-most x-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxisX(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Sets the range of the x-axis for a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series whose x-axis is to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The left-most x-axis value.
            </param>
            <param name="maximum">
            The right-most x-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist or if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxisX(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,System.String,System.String,System.Double,System.Double)">
            <summary>
            Sets the range of the x-axis for a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series whose x-axis is to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The left-most x-axis value.
            </param>
            <param name="maximum">
            The right-most x-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist or if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxisY(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.ChartArea,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Sets the range of the y-axis for a chart area in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="chartArea">
            The chart area whose y-axis is to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The bottom-most y-axis value.
            </param>
            <param name="maximum">
            The top-most y-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified chart area, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxisY(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.ChartArea,System.String,System.String,System.Double,System.Double)">
            <summary>
            Sets the range of the y-axis for a chart area in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="chartArea">
            The chart area whose y-axis is to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The bottom-most y-axis value.
            </param>
            <param name="maximum">
            The top-most y-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified chart area, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxisY(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Sets the range of the y-axis for a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series whose y-axis is to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The bottom-most y-axis value.
            </param>
            <param name="maximum">
            The top-most y-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if if the specified index is invalid or if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxisY(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,System.String,System.String,System.Double,System.Double)">
            <summary>
            Sets the range of the y-axis for a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series whose y-axis is to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The bottom-most y-axis value.
            </param>
            <param name="maximum">
            The top-most y-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if if the specified index is invalid or if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxisY(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Sets the range of the y-axis for a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series whose y-axis is to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The bottom-most y-axis value.
            </param>
            <param name="maximum">
            The top-most y-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxisY(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,System.String,System.String,System.Double,System.Double)">
            <summary>
            Sets the range of the y-axis for a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series whose y-axis is to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The bottom-most y-axis value.
            </param>
            <param name="maximum">
            The top-most y-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxisY(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Sets the range of the y-axis for a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series whose y-axis is to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The bottom-most y-axis value.
            </param>
            <param name="maximum">
            The top-most y-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist or if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxisY(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,System.String,System.String,System.Double,System.Double)">
            <summary>
            Sets the range of the y-axis for a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series whose y-axis is to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The bottom-most y-axis value.
            </param>
            <param name="maximum">
            The top-most y-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist or if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotContinuousFunction(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,System.Func{System.Double,System.Double})">
            <summary>
            Plots a continuous function to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to plot the continuous function on.
            </param>
            <param name="function">
            The function to plot.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified function is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotContinuousFunction(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,System.Func{System.Double,System.Double})">
            <summary>
            Plots a continuous function to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to plot the continuous function on.
            </param>
            <param name="function">
            The function to plot.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, or the specified function is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotContinuousFunction(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,System.Func{System.Double,System.Double})">
            <summary>
            Plots a continuous function to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to plot the continuous function on.
            </param>
            <param name="function">
            The function to plot.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified function is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotCumulativeDistribution(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,Simphony.Mathematics.Distribution)">
            <summary>
            Plots a cumulative distribution function distribution function to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to plot the cumulative distribution function on.
            </param>
            <param name="distribution">
            A distribution from which the cumulative distribution function should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified distribution is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotCumulativeDistribution(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,Simphony.Mathematics.Distribution)">
            <summary>
            Plots a cumulative distribution function distribution function to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to plot the cumulative distribution function on.
            </param>
            <param name="distribution">
            A distribution from which the cumulative distribution function should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, or the specified distribution is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotCumulativeDistribution(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,Simphony.Mathematics.Distribution)">
            <summary>
            Plots a cumulative distribution function distribution function to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to plot the cumulative distribution function on.
            </param>
            <param name="distribution">
            A distribution from which the cumulative distribution function should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified distribution is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotCumulativeTimeChart(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,Simphony.Simulation.NumericStatistic)">
            <summary>
            Plots a cumulative time chart to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to plot the cumulative time chart on.
            </param>
            <param name="statistic">
            A statistic containing the data from which the cumulative time chart should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified statistic is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotCumulativeTimeChart(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,Simphony.Simulation.NumericStatistic)">
            <summary>
            Plots a cumulative time chart to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to plot the cumulative time chart on.
            </param>
            <param name="statistic">
            A statistic containing the data from which the cumulative time chart should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, or the specified statistic is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotCumulativeTimeChart(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,Simphony.Simulation.NumericStatistic)">
            <summary>
            Plots a cumulative time chart to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to plot the cumulative time chart on.
            </param>
            <param name="statistic">
            A statistic containing the data from which the cumulative time chart should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified statistic is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotEmpiricalDistribution(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Plots an empirical distribution to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to plot the empirical distribution on.
            </param>
            <param name="data">
            A sequence containing the data from which the empirical distribution should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified sequence is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotEmpiricalDistribution(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,Simphony.Simulation.NumericStatistic)">
            <summary>
            Plots an empirical distribution to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to plot the empirical distribution on.
            </param>
            <param name="statistic">
            A statistic containing the data from which the empirical distribution should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified statistic is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotEmpiricalDistribution(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Plots an empirical distribution to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to plot the empirical distribution on.
            </param>
            <param name="data">
            A sequence containing the data from which the empirical distribution should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, or the specified sequence is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotEmpiricalDistribution(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,Simphony.Simulation.NumericStatistic)">
            <summary>
            Plots an empirical distribution to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to plot the empirical distribution on.
            </param>
            <param name="statistic">
            A statistic containing the data from which the empirical distribution should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, or the specified statistic is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotEmpiricalDistribution(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Plots an empirical distribution to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to plot the empirical distribution on.
            </param>
            <param name="data">
            A sequence containing the data from which the empirical distribution should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified sequence is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotEmpiricalDistribution(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,Simphony.Simulation.NumericStatistic)">
            <summary>
            Plots an empirical distribution to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to plot the empirical distribution on.
            </param>
            <param name="statistic">
            A statistic containing the data from which the empirical distribution should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified statistic is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotHistogram(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,Simphony.Simulation.BasicNumericStatistic,Simphony.Mathematics.HistogramType)">
            <summary>
            Plots a histogram to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to plot the histogram on.
            </param>
            <param name="statistic">
            A statistic containing the data from which the histogram should be generated.
            </param>
            <param name="type">
            The type of histogram to plot.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified statistic is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotHistogram(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,System.Collections.Generic.IEnumerable{System.Double},Simphony.Mathematics.HistogramType)">
            <summary>
            Plots a histogram to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to plot the histogram on.
            </param>
            <param name="data">
            A sequence containing the data from which the histogram should be generated.
            </param>
            <param name="type">
            The type of histogram to plot.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified sequence is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotHistogram(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,Simphony.Simulation.NumericStatistic,Simphony.Mathematics.HistogramType)">
            <summary>
            Plots a histogram to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to plot the histogram on.
            </param>
            <param name="statistic">
            A statistic containing the data from which the histogram should be generated.
            </param>
            <param name="type">
            The type of histogram to plot.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified statistic is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotHistogram(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,Simphony.Simulation.BasicNumericStatistic,Simphony.Mathematics.HistogramType)">
            <summary>
            Plots a histogram to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to plot the histogram on.
            </param>
            <param name="statistic">
            A statistic containing the data from which the histogram should be generated.
            </param>
            <param name="type">
            The type of histogram to plot.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, or the specified statistic is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotHistogram(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,System.Collections.Generic.IEnumerable{System.Double},Simphony.Mathematics.HistogramType)">
            <summary>
            Plots a histogram to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to plot the histogram on.
            </param>
            <param name="data">
            A sequence containing the data from which the histogram should be generated.
            </param>
            <param name="type">
            The type of histogram to plot.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, or the specified sequence is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotHistogram(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,Simphony.Simulation.NumericStatistic,Simphony.Mathematics.HistogramType)">
            <summary>
            Plots a histogram to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to plot the histogram on.
            </param>
            <param name="statistic">
            A statistic containing the data from which the histogram should be generated.
            </param>
            <param name="type">
            The type of histogram to plot.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, or the specified statistic is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotHistogram(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,System.Collections.Generic.IEnumerable{System.Double},Simphony.Mathematics.HistogramType)">
            <summary>
            Plots a histogram to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to plot the empirical distribution on.
            </param>
            <param name="data">
            A sequence containing the data from which the histogram should be generated.
            </param>
            <param name="type">
            The type of histogram to plot.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified sequence is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotHistogram(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,Simphony.Simulation.NumericStatistic,Simphony.Mathematics.HistogramType)">
            <summary>
            Plots a histogram to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to plot the empirical distribution on.
            </param>
            <param name="statistic">
            A statistic containing the data from which the histogram should be generated.
            </param>
            <param name="type">
            The type of histogram to plot.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified statistic is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotProbabilityDensity(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,Simphony.Mathematics.ContinuousDistribution)">
            <summary>
            Plots a probability density function distribution function to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to plot the probability density function on.
            </param>
            <param name="distribution">
            A distribution from which the probability density function should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified distribution is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotProbabilityDensity(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,Simphony.Mathematics.ContinuousDistribution)">
            <summary>
            Plots a probability density function distribution function to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to plot the probability density function on.
            </param>
            <param name="distribution">
            A distribution from which the probability density function should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, or the specified distribution is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotProbabilityDensity(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,Simphony.Mathematics.ContinuousDistribution)">
            <summary>
            Plots a probability density function distribution function to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to plot the probability density function on.
            </param>
            <param name="distribution">
            A distribution from which the probability density function should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified distribution is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotProbabilityMass(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,Simphony.Mathematics.DiscreteDistribution)">
            <summary>
            Plots a probability mass function distribution function to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to plot the probability mass function on.
            </param>
            <param name="distribution">
            A distribution from which the probability mass function should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified distribution is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotProbabilityMass(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,Simphony.Mathematics.DiscreteDistribution)">
            <summary>
            Plots a probability mass function distribution function to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to plot the probability mass function on.
            </param>
            <param name="distribution">
            A distribution from which the probability mass function should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, or the specified distribution is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotProbabilityMass(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,Simphony.Mathematics.DiscreteDistribution)">
            <summary>
            Plots a probability mass function distribution function to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to plot the probability mass function on.
            </param>
            <param name="distribution">
            A distribution from which the probability mass function should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified distribution is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotQQPlot(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,System.Collections.Generic.IEnumerable{System.Double},Simphony.Mathematics.Distribution)">
            <summary>
            Plots a Q-Q plot of a data set versus a theoretical probability distribution.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to plot the Q-Q plot on.
            </param>
            <param name="data">
            A sequence containing the data.
            </param>
            <param name="distribution">
            The theoretical distribution.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified data, or the specified distribution is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x and y-axes associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotQQPlot(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,System.Collections.Generic.IEnumerable{System.Double},Simphony.Mathematics.Distribution)">
            <summary>
            Plots a Q-Q plot of a data set versus a theoretical probability distribution.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to plot the Q-Q plot on.
            </param>
            <param name="data">
            A sequence containing the data.
            </param>
            <param name="distribution">
            The theoretical distribution.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, the specified data, or the specified distribution
            is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x and y-axes associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotQQPlot(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,System.Collections.Generic.IEnumerable{System.Double},Simphony.Mathematics.Distribution)">
            <summary>
            Plots a Q-Q plot of a data set versus a theoretical probability distribution.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to plot the Q-Q plot on.
            </param>
            <param name="data">
            A sequence containing the data.
            </param>
            <param name="distribution">
            The theoretical distribution.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified data, or the specified distribution is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x and y-axes associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotScatterPlot(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Plots a scatter plot of two sets of data.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to plot the scatter plot on.
            </param>
            <param name="x">
            The data for the x-axis.
            </param>
            <param name="y">
            The data for the y-axis.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, the specified x-data, or the specified
            y-data is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the two sets of data are not of the same size.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x and y-axes associated with the
            series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotScatterPlot(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,System.Collections.Generic.IEnumerable{Simphony.Mathematics.Vector})">
            <summary>
            Plots a scatter plot of a sequence of two-dimensional vectors.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to plot the scatter plot on.
            </param>
            <param name="vectors">
            A sequence of two-dimensional vectors.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, or the specified sequence is a null
            reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if one or more of the vectors is not two-dimensional.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x and y-axes associated with the
            series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotScatterPlot(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Plots a scatter plot of two sets of data.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to plot the scatter plot on.
            </param>
            <param name="x">
            The data for the x-axis.
            </param>
            <param name="y">
            The data for the y-axis.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, the specified x-data, or the specified
            y-data is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the two sets of data are not of the same size.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x and y-axes associated with the
            series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotScatterPlot(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,System.Collections.Generic.IEnumerable{Simphony.Mathematics.Vector})">
            <summary>
            Plots a scatter plot of a sequence of two-dimensional vectors.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to plot the scatter plot on.
            </param>
            <param name="vectors">
            A sequence of two-dimensional vectors.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, or the specified sequence is a null
            reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if one or more of the vectors is not two-dimensional.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x and y-axes associated with the
            series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotScatterPlot(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Plots a scatter plot of two sets of data.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to plot the scatter plot on.
            </param>
            <param name="x">
            The data for the x-axis.
            </param>
            <param name="y">
            The data for the y-axis.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, the specified x-data, or the specified
            y-data is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist or if the two sets of data are
            not of the same size.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x and y-axes associated with the
            series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotScatterPlot(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,System.Collections.Generic.IEnumerable{Simphony.Mathematics.Vector})">
            <summary>
            Plots a scatter plot of a sequence of two-dimensional vectors.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to plot the scatter plot on.
            </param>
            <param name="vectors">
            A sequence of two-dimensional vectors.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, or the specified sequence is a null
            reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if one or more of the vectors is not two-dimensional.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x and y-axes associated with the
            series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotStepFunction(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Plots a step function to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to plot the step function on.
            </param>
            <param name="xValues">
            A <b>sorted</b> sequence containing the x-values defining the step function.
            </param>
            <param name="yValues">
            A sequence containing the corresponding y-values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or either of the specified sequences is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotStepFunction(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.Series,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Plots a step function to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="series">
            The series to plot the step function on.
            </param>
            <param name="xValues">
            A <b>sorted</b> sequence containing the x-values defining the step function.
            </param>
            <param name="yValues">
            A sequence containing the corresponding y-values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart, the specified series, or either of the specified sequences is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotStepFunction(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Plots a step function to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to plot the step function on.
            </param>
            <param name="xValues">
            A <b>sorted</b> sequence containing the x-values defining the step function.
            </param>
            <param name="yValues">
            A sequence containing the corresponding y-values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or either of the specified sequences is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotTimeChart(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,Simphony.Simulation.BasicNumericStatistic)">
            <summary>
            Plots a time chart to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to plot the time chart on.
            </param>
            <param name="statistic">
            A statistic containing the data from which the time chart should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified statistic is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotTimeChart(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,Simphony.Simulation.NumericStatistic)">
            <summary>
            Plots a time chart to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="index">
            The zero-based index of the series to plot the time chart on.
            </param>
            <param name="statistic">
            A statistic containing the data from which the time chart should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified statistic is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotTimeChart(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,Simphony.Simulation.BasicNumericStatistic)">
            <summary>
            Plots a time chart to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to plot the time chart on.
            </param>
            <param name="statistic">
            A statistic containing the data from which the time chart should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified statistic is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.PlotTimeChart(System.Windows.Forms.DataVisualization.Charting.Chart,System.String,Simphony.Simulation.NumericStatistic)">
            <summary>
            Plots a time chart to a series in a chart control.
            </summary>
            <param name="chart">
            The chart control.
            </param>
            <param name="name">
            The name of the series to plot the time chart on.
            </param>
            <param name="statistic">
            A statistic containing the data from which the time chart should be generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified chart or the specified statistic is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a series with the specified name does not exist.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if either the minimum or maximum value of the x-axis associated with the series is set to "auto".
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.GetPercentile(System.Windows.Forms.DataVisualization.Charting.Series,System.Double)">
            <summary>
            Evaluates the percentile of a series at a specified point.
            </summary>
            <param name="series">
            The series in question.
            </param>
            <param name="x">
            The point at which to evaluate the percentile.
            </param>
            <returns>
            The value of the percentile at the specified point.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified series is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the series does not support evaluation of percentiles.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.GetPercentileSupported(System.Windows.Forms.DataVisualization.Charting.Series)">
            <summary>
            Determines whether a series supports evaluation of percentiles.
            </summary>
            <param name="series">
            The series in question.
            </param>
            <returns>
            True if the series supports evaluation of percentiles; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified series is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ChartHelper.ConfigureAxis(System.Windows.Forms.DataVisualization.Charting.Axis,System.String,System.String,System.Double,System.Double)">
            <summary>
            Sets the range of an axis.
            </summary>
            <param name="axis">
            The axis to be adjusted.
            </param>
            <param name="title">
            The title of the axis.
            </param>
            <param name="format">
            The format for the axis labels.
            </param>
            <param name="minimum">
            The left-most x-axis value.
            </param>
            <param name="maximum">
            The right-most x-axis value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified axis, the specified title, or the specified format is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified minimum or maximum is infinite.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified maximum is less than or equal to the minimum.
            </exception>
        </member>
        <member name="T:Simphony.ClipboardHelper">
            <summary>
            Helper class that provides functionality above and beyond the Clipboard class.
            </summary>
        </member>
        <member name="M:Simphony.ClipboardHelper.GetRtfText">
            <summary>
            Retrieves rich text data from the clipboard.
            </summary>
            <returns>
            The rich text data if any is present on the clipboard; otherwise, a null reference.
            </returns>
        </member>
        <member name="M:Simphony.ClipboardHelper.SetMetafile(System.Drawing.Imaging.Metafile)">
            <summary>
            Clears the clipboard and then adds a metafile.
            </summary>
            <param name="metafile">
            The metafile to add to the clipboard.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified metafile is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified metafile is not an enhanced metafile.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            Thrown if the clipboard could not be cleared. This typically occurs when the clipboard
            is being used by another process.
            </exception>
        </member>
        <member name="M:Simphony.ClipboardHelper.SetRtfText(System.String)">
            <summary>
            Clears the clipboard and then adds rich text data.
            </summary>
            <param name="rtf">
            The rich text to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified rich text is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified rich text is an empty string.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            Thrown if the clipboard could not be cleared. This typically occurs when the clipboard is
            being used by another process.
            </exception>
            <remarks>
            This method can be called from threads that are not set to single thread apartment (STA)
            mode.
            </remarks>
        </member>
        <member name="M:Simphony.ClipboardHelper.SetText(System.String)">
            <summary>
            Clears the clipboard and then adds unicode text data.
            </summary>
            <param name="text">
            The text to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified text is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified text is an empty string.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            Thrown if the clipboard could not be cleared. This typically occurs when the clipboard is
            being used by another process.
            </exception>
            <remarks>
            This method can be called from threads that are not set to single thread apartment (STA)
            mode.
            </remarks>
        </member>
        <member name="T:Simphony.DisposableObjectBase">
            <summary>
            An abstract base class that provides a default implementation of the
            <see cref="T:System.IDisposable"/> interface.
            </summary>
        </member>
        <member name="M:Simphony.DisposableObjectBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Simphony.DisposableObjectBase"/> class.
            </summary>
        </member>
        <member name="E:Simphony.DisposableObjectBase.Disposed">
            <summary>
            Occurs when the component is disposed via a call to the <see cref="M:Simphony.DisposableObjectBase.Dispose"/> method.
            </summary>
        </member>
        <member name="P:Simphony.DisposableObjectBase.IsDisposed">
            <summary>
            Gets a value indicating whether the current object has been disposed.
            </summary>
            <value>
            True if the current object has been disposed; otherwise false.
            </value>
        </member>
        <member name="M:Simphony.DisposableObjectBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Simphony.DisposableObjectBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed
            resources.
            </summary>
            <param name="disposing">
            True to release both managed and unmanaged resources; false to release only unmanaged
            resources.
            </param>
        </member>
        <member name="M:Simphony.DisposableObjectBase.ExceptionIfDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> exception if the current object has been
            disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if the current object has been disposed.
            </exception>
        </member>
        <member name="T:Simphony.DrawingExtensions">
            <summary>
            Extension methods for the System.Drawing namespace.
            </summary>
        </member>
        <member name="M:Simphony.DrawingExtensions.CreateRoundRectangle(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Creates rounded rectangle from a rectangle.
            </summary>
            <param name="rectangle">
            The rectangle to base the rounded rectangle on.
            </param>
            <param name="radius">
            The radius of the corners.
            </param>
            <returns>
            A graphics path representing the rounded rectangle.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified radius is negative or if it is greater than half the width
            or height of the rectangle.
            </exception>
        </member>
        <member name="M:Simphony.DrawingExtensions.CreateRoundRectangle(System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates rounded rectangle from a rectangle.
            </summary>
            <param name="rectangle">
            The rectangle to base the rounded rectangle on.
            </param>
            <param name="topLeftRadius">
            The radius of the top left corner.
            </param>
            <param name="topRightRadius">
            The radius of the top right corner.
            </param>
            <param name="bottomRightRadius">
            The radius of the bottom right corner.
            </param>
            <param name="bottomLeftRadius">
            The radius of the bottom left corner.
            </param>
            <returns>
            A graphics path representing the rounded rectangle.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if any of the specified radii is negative or if any of the specified radii
            is greater than half the width or height of the rectangle.
            </exception>
        </member>
        <member name="M:Simphony.DrawingExtensions.CreateRoundRectangle(System.Drawing.RectangleF,System.Single)">
            <summary>
            Creates rounded rectangle from a rectangle.
            </summary>
            <param name="rectangle">
            The rectangle to base the rounded rectangle on.
            </param>
            <param name="radius">
            The radius of the corners.
            </param>
            <returns>
            A graphics path representing the rounded rectangle.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified radius is negative or if it is greater than half the width
            or height of the rectangle.
            </exception>
        </member>
        <member name="M:Simphony.DrawingExtensions.CreateRoundRectangle(System.Drawing.RectangleF,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates rounded rectangle from a rectangle.
            </summary>
            <param name="rectangle">
            The rectangle to base the rounded rectangle on.
            </param>
            <param name="topLeftRadius">
            The radius of the top left corner.
            </param>
            <param name="topRightRadius">
            The radius of the top right corner.
            </param>
            <param name="bottomRightRadius">
            The radius of the bottom right corner.
            </param>
            <param name="bottomLeftRadius">
            The radius of the bottom left corner.
            </param>
            <returns>
            A graphics path representing the rounded rectangle.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if any of the specified radii is negative or if any of the specified radii
            is greater than half the width or height of the rectangle.
            </exception>
        </member>
        <member name="M:Simphony.DrawingExtensions.Darken(System.Drawing.Color,System.Single)">
            <summary>
            Darkens a color by a given percentage.
            </summary>
            <param name="color">
            The color being darkened.
            </param>
            <param name="percent">
            The percentage.
            </param>
            <returns>
            The darkened color.
            </returns>
        </member>
        <member name="M:Simphony.DrawingExtensions.DrawRectangle(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draws a rectangle specified by a RectangleF structure.
            </summary>
            <param name="graphics">
            The GDI+ drawing surface on which the rectangle should be drawn.
            </param>
            <param name="pen">
            A pen that determines the color, width, and style of the rectangle.
            </param>
            <param name="rect">
            A RectangleF structure that represents the rectangle to draw.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified drawing surface or the specified pen is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.DrawingExtensions.DrawRichText(System.Drawing.Graphics,System.String,System.Drawing.Rectangle)">
            <summary>
            Draws rich text within a specified <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="graphics">
            The GDI+ drawing surface on which the rich text should be drawn.
            </param>
            <param name="rtf">
            The rich text to render.
            </param>
            <param name="layoutRectangle">
            A <see cref="T:System.Drawing.Rectangle"/> within which the rich text should be rendered.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified drawing surface is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified rectangle is degenerate.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the text is in an invalid rich text format.
            </exception>
        </member>
        <member name="M:Simphony.DrawingExtensions.DrawRichText(System.Drawing.Graphics,System.String,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws rich text within a specified <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="graphics">
            The GDI+ drawing surface on which the rich text should be drawn.
            </param>
            <param name="rtf">
            The rich text to render.
            </param>
            <param name="layoutRectangle">
            A <see cref="T:System.Drawing.Rectangle"/> within which the rich text should be rendered.
            </param>
            <param name="wordWrap">
            True if words should be automatically wrapped to the beginning of the next line when
            necessary; otherwise, false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified drawing surface is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified rectangle is degenerate.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the text is in an invalid rich text format.
            </exception>
        </member>
        <member name="M:Simphony.DrawingExtensions.DrawRichText(System.Drawing.Graphics,System.String,System.Drawing.Rectangle,System.Boolean,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws rich text within a specified <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="graphics">
            The GDI+ drawing surface on which the rich text should be drawn.
            </param>
            <param name="rtf">
            The rich text to render.
            </param>
            <param name="layoutRectangle">
            A <see cref="T:System.Drawing.Rectangle"/> within which the rich text should be rendered.
            </param>
            <param name="wordWrap">
            True if words should be automatically wrapped to the beginning of the next line when
            necessary; otherwise, false.
            </param>
            <param name="foreColor">
            The default foreground color.
            </param>
            <param name="backColor">
            The default background color.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified drawing surface is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified rectangle is degenerate.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the text is in an invalid rich text format.
            </exception>
        </member>
        <member name="M:Simphony.DrawingExtensions.DrawStringIfSpacePermits(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Draws the specified text string in the specified rectangle with the specified brush and font.
            If the text will not fit in the rectangle, nothing is drawn.
            </summary>
            <param name="graphics">
            The GDI+ drawing surface on which the rectangle should be drawn.
            </param>
            <param name="text">
            The text string to draw.
            </param>
            <param name="font">
            The font to use.
            </param>
            <param name="brush">
            The brush that determines the color and texture of the drawn text.
            </param>
            <param name="rectangle">
            The rectangle that specifies the location of the drawn text.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified drawing surface, the specified font, the specified brush, or the specified
            rectangle is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.DrawingExtensions.DrawStringIfSpacePermits(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Draws the specified text string in the specified rectangle with the specified brush and font using the
            specified formatting attributes. If the text will not fit in the rectangle, nothing is drawn.
            </summary>
            <param name="graphics">
            The GDI+ drawing surface on which the rectangle should be drawn.
            </param>
            <param name="text">
            The text string to draw.
            </param>
            <param name="font">
            The font to use.
            </param>
            <param name="brush">
            The brush that determines the color and texture of the drawn text.
            </param>
            <param name="rectangle">
            The rectangle that specifies the location of the drawn text.
            </param>
            <param name="format">
            The formatting attributes, such as line spacing and alignment, that are applied to the drawn text.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified drawing surface, the specified font, the specified brush, or the specified
            rectangle is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.DrawingExtensions.GetPixel(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Gets the color of a specified pixel.
            </summary>
            <param name="graphics">
            The GDI+ drawing surface containing the pixel.
            </param>
            <param name="x">
            The x-coordinate of the pixel.
            </param>
            <param name="y">
            The y-coordinate of the pixel.
            </param>
            <returns>
            The color of the specified pixel.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified drawing surface is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.DrawingExtensions.GetReadableTextBrush(System.Drawing.Color)">
            <summary>
            Determines whether text on a given background color should be written in black or white.
            </summary>
            <param name="color">
            The background color.
            </param>
            <returns>
            The brush that should be used to render the text.
            </returns>
        </member>
        <member name="M:Simphony.DrawingExtensions.IsDegenerate(System.Drawing.Rectangle)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:System.Drawing.Rectangle"/> is degenerate.
            </summary>
            <param name="rectangle">
            The <see cref="T:System.Drawing.Rectangle"/> in question.
            </param>
            <returns>
            True if the specified <see cref="T:System.Drawing.Rectangle"/> is degenerate; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.DrawingExtensions.IsDegenerate(System.Drawing.RectangleF)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:System.Drawing.RectangleF"/> is degenerate.
            </summary>
            <param name="rectangle">
            The <see cref="T:System.Drawing.RectangleF"/> in question.
            </param>
            <returns>
            True if the specified <see cref="T:System.Drawing.RectangleF"/> is degenerate; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.DrawingExtensions.IsDegenerate(System.Drawing.Size)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:System.Drawing.Size"/> is degenerate.
            </summary>
            <param name="size">
            The <see cref="T:System.Drawing.Size"/> in question.
            </param>
            <returns>
            True if the specified <see cref="T:System.Drawing.Size"/> is degenerate; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.DrawingExtensions.IsDegenerate(System.Drawing.SizeF)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:System.Drawing.SizeF"/> is degenerate.
            </summary>
            <param name="size">
            The <see cref="T:System.Drawing.SizeF"/> in question.
            </param>
            <returns>
            True if the specified <see cref="T:System.Drawing.SizeF"/> is degenerate; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.DrawingExtensions.Lighten(System.Drawing.Color,System.Single)">
            <summary>
            Lightens a color by a given percentage.
            </summary>
            <param name="color">
            The color being lightened.
            </param>
            <param name="percent">
            The percentage.
            </param>
            <returns>
            The lightened color.
            </returns>
        </member>
        <member name="T:Simphony.NativeMethods">
            <summary>
            Container class for native Win32 methods.
            </summary>
        </member>
        <member name="T:Simphony.NativeMethods.HOOKPROC">
            <summary>
            Represents the method called when a hook catches a monitored event.
            </summary>
            <param name="nCode">
            A hook code that the hook procedure uses to determine the action to perform.
            </param>
            <param name="wParam">
            The <paramref name="wParam"/> value. The meaning of this parameter depends
            on the type of hook associated with the current hook chain.
            </param>
            <param name="lParam">
            The <paramref name="lParam"/> value. The meaning of this parameter depends
            on the type of hook associated with the current hook chain.
            </param>
            <returns>
            The return value. The meaning of the return value depends on the hook type.
            </returns>
        </member>
        <member name="T:Simphony.NativeMethods.TaskDialogCallbackProc">
            <summary>
            The <see cref="T:Simphony.NativeMethods.TaskDialogCallbackProc"/> function is an application-defined function used
            with the <see cref="M:Simphony.NativeMethods.TaskDialogIndirect(Simphony.NativeMethods.TASKDIALOGCONFIG@,System.Int32@,System.Int32@,System.Boolean@)"/> function. It receives messages from the task
            dialog when various events occur.
            </summary>
            <param name="hwnd">
            Handle to the TaskDialog window. Do not continue sending messages to this window after
            the callback procedure returns from having been called with <see cref="F:Simphony.NativeMethods.TDN_DESTROYED"/>.
            </param>
            <param name="uNotification">
            A notification identifier.
            </param>
            <param name="wParam">
            The <paramref name="wParam"/> value. The contents of this parameter depend on the value
            of the <paramref name="uNotification"/> parameter.
            </param>
            <param name="lParam">
            The <paramref name="lParam"/> value. The contents of this parameter depend on the value
            of the <paramref name="uNotification"/> parameter.
            </param>
            <param name="refData">
            Pointer to application specific data. This is the data pointed to by the
            <see cref="F:Simphony.NativeMethods.TASKDIALOGCONFIG.lpCallbackData"/> member of structure
            <see cref="T:Simphony.NativeMethods.TASKDIALOGCONFIG"/> used to create the task dialog.
            </param>
            <returns>
            The return value is specific to the notification being processed. When responding to a
            button click, your implementation should return <see cref="F:Simphony.NativeMethods.S_FALSE"/> if the Task Dialog
            is not to close. Otherwise return <see cref="F:Simphony.NativeMethods.S_OK"/>.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.BeginPaint(System.IntPtr,Simphony.NativeMethods.PAINTSTRUCT@)">
            <summary>
            Prepares the specified window for painting and fills a PAINTSTRUCT structure
            with information about the painting.
            </summary>
            <param name="hwnd">
            Handle to the window to be repainted.
            </param>
            <param name="lpPaint">
            Pointer to the PAINTSTRUCT structure that will receive painting information.
            </param>
            <returns>
            If the function succeeds, the return value is the handle to a display device
            context for the specified window.  If the function fails, the return value is
            NULL, indicating that no display device context is available.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Performs a bit-block transfer of the color data corresponding to a rectangle of pixels from
            the specified source device context into a destination device context.
            </summary>
            <param name="hdcDest">
            A handle to the destination device context.
            </param>
            <param name="nXDest">
            The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.
            </param>
            <param name="nYDest">
            The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.
            </param>
            <param name="nWidth">
            The width, in logical units, of the source and destination rectangles.
            </param>
            <param name="nHeight">
            The height, in logical units, of the source and the destination rectangles.
            </param>
            <param name="hdcSrc">
            A handle to the source device context.
            </param>
            <param name="nXSrc">
            The x-coordinate, in logical units, of the upper-left corner of the source rectangle.
            </param>
            <param name="nYSrc">
            The y-coordinate, in logical units, of the upper-left corner of the source rectangle.
            </param>
            <param name="dwRop">
            A raster-operation code. These codes define how the color data for the source rectangle is to be
            combined with the color data for the destination rectangle to achieve the final color.
            </param>
            <returns>
            True if the function succeeds; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Passes the hook information to the next hook procedure in the current hook chain. A hook
            procedure can call this function either before or after processing the hook information.
            </summary>
            <param name="hhk">
            This parameter is ignored.
            </param>
            <param name="nCode">
            The hook code passed to the current hook procedure. The next hook procedure uses this
            code to determine how to process the hook information.
            </param>
            <param name="wParam">
            The <paramref name="wParam"/> value passed to the current hook procedure. The meaning
            of this parameter depends on the type of hook associated with the current hook chain.
            </param>
            <param name="lParam">
            The <paramref name="lParam"/> value passed to the current hook procedure. The meaning
            of this parameter depends on the type of hook associated with the current hook chain.
            </param>
            <returns>
            This value is returned by the next hook procedure in the chain. The current hook procedure
            must also return this value. The meaning of the return value depends on the hook type.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.ClientToScreen(System.IntPtr,System.Drawing.Point@)">
            <summary>
            Converts the client-area coordinates of a specified point to screen coordinates.
            </summary>
            <param name="hWnd">
            A handle to the window whose client area is used for the conversion.
            </param>
            <param name="lpPoint">
            A pointer to a POINT structure that contains the client coordinates to be converted. The
            new screen coordinates are copied into this structure if the function succeeds.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return
            value is zero.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.CloseClipboard">
            <summary>
            Closes the clipboard.
            </summary>
            <returns>
            True if the function succeeds; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.CloseThemeData(System.IntPtr)">
            <summary>
            Closes the theme data handle.
            </summary>
            <param name="hTheme">
            Handle to a window's specified theme data.
            </param>
            <returns>
            If this function succeeds, it returns <see cref="F:Simphony.NativeMethods.S_OK"/>. Otherwise, it returns an
            HRESULT error code.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.ColorHLSToRGB(System.Int16,System.Int16,System.Int16)">
            <summary>
            Converts colors from hue-luminance-saturation (HLS) to RGB format.
            </summary>
            <param name="wHue">
            The original HLS hue value in the range 0 to 240.
            </param>
            <param name="wLuminance">
            The original HLS luminance value in the range 0 to 240.
            </param>
            <param name="wSaturation">
            The original HLS saturation value in the range 0 to 240.
            </param>
            <returns>
            Returns the RGB value.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.ColorRGBToHLS(Simphony.NativeMethods.COLORREF,System.Int16@,System.Int16@,System.Int16@)">
            <summary>
            Converts colors from RGB to hue-luminance-saturation (HLS) format.
            </summary>
            <param name="clrRGB">
            The original RGB color.
            </param>
            <param name="pwHue">
            A pointer to a value that, when this method returns successfully, receives the HLS hue value.
            </param>
            <param name="pwLuminance">
            A pointer to a value that, when this method returns successfully, receives the HLS luminance value.
            </param>
            <param name="pwSaturation">
            A pointer to a value that, when this method returns successfully, receives the HLS saturation value.
            </param>
        </member>
        <member name="M:Simphony.NativeMethods.CopyEnhMetaFile(System.IntPtr,System.String)">
            <summary>
            Copies the contents of an enhanced-format metafile to a specified file.
            </summary>
            <param name="hemfSrc">
            A handle to the enhanced metafile to be copied.
            </param>
            <param name="lpszFile">
            The name of the destination file. If this parameter is a null reference, the source
            metafile is copied to memory.
            </param>
            <returns>
            If the function succeeds, the return value is a handle to the copy of the enhanced
            metafile. If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Creates a bitmap compatible with the device that is associated with the specified
            device context.
            </summary>
            <param name="hdc">
            A handle to a device context.
            </param>
            <param name="nWidth">
            The bitmap width, in pixels.
            </param>
            <param name="nHeight">
            The bitmap height, in pixels.
            </param>
            <returns>
            If the function succeeds, the return value is a handle to the compatible bitmap (DDB);
            if the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.CreateCompatibleDC(System.IntPtr)">
            <summary>
            Creates a memory device context (DC) compatible with the specified device.
            </summary>
            <param name="hdc">
            A handle to an existing DC. If this handle is NULL, the function creates a memory DC
            compatible with the application's current screen.
            </param>
            <returns>
            If the function succeeds, the return value is the handle to a memory DC; if the function
            fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.CreateDC(System.String,System.String,System.String,System.IntPtr)">
            <summary>
            Creates a device context (DC) for a device using the specified name.
            </summary>
            <param name="lpszDriver">
            A pointer to a null-terminated character string that specifies either DISPLAY or the name
            of a specific display device.
            </param>
            <param name="lpszDevice">
            A pointer to a null-terminated character string that specifies the name of the specific
            output device being used.  If <paramref name="lpszDriver"/> is DISPLAY or the device name
            of a specific display device, then <paramref name="lpszDevice"/> must be NULL or that same
            device name. If <paramref name="lpszDevice"/> is NULL, then a DC is created for the primary
            display device.
            </param>
            <param name="lpszOutput">
            This parameter is ignored and should be set to NULL. It is provided only for compatibility
            with 16-bit Windows.
            </param>
            <param name="lpInitData">
            If <paramref name="lpszDriver"/> is DISPLAY, lpInitData must be NULL.
            </param>
            <returns>
            If the function succeeds, the return value is the handle to a DC for the specified device.
            If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.CreateIconIndirect(Simphony.NativeMethods.ICONINFO@)">
            <summary>
            Creates an icon or cursor from an <see cref="T:Simphony.NativeMethods.ICONINFO"/> structure.
            </summary>
            <param name="piconinfo">
            A pointer to an <see cref="T:Simphony.NativeMethods.ICONINFO"/> structure the function uses to create the icon or
            cursor.
            </param>
            <returns>
            If the function succeeds, the return value is a handle to the icon or cursor that is
            created. If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.CreatePen(System.Int32,System.Int32,Simphony.NativeMethods.COLORREF)">
            <summary>
            Creates a logical pen that has the specified style, width, and color. The pen can
            subsequently be selected into a device context and used to draw lines and curves.
            </summary>
            <param name="fnPenStyle">
            The pen style.
            </param>
            <param name="nWidth">
            The width of the pen, in logical units. If nWidth is zero, the pen is a single pixel
            wide, regardless of the current transformation.
            </param>
            <param name="crColor">
            A color reference for the pen color.
            </param>
            <returns>
            If the function succeeds, the return value is a handle that identifies a logical pen;
            if the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.CreateSolidBrush(System.Drawing.Color)">
            <summary>
            Creates a logical brush that has the specified solid color.
            </summary>
            <param name="color">
            The color of the brush.
            </param>
            <returns>
            If the function succeeds, the return value is a handle that identifies a logical brush;
            if the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.CreateSolidBrush(Simphony.NativeMethods.COLORREF)">
            <summary>
            Creates a logical brush that has the specified solid color.
            </summary>
            <param name="crColor">
            The color of the brush.
            </param>
            <returns>
            If the function succeeds, the return value is a handle that identifies a logical brush;
            if the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.DefWindowProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Calls the default window procedure to provide default processing for any window messages
            that an application does not process. This function ensures that every message is
            processed. The method should be called with the same parameters received by the window
            procedure.
            </summary>
            <param name="hWnd">
            A handle to the window procedure that received the message.
            </param>
            <param name="Msg">
            The message.
            </param>
            <param name="wParam">
            First message parameter. The content of this parameter depends on the value of the
            <paramref name="Msg"/> parameter.
            </param>
            <param name="lParam">
            Second message parameter. The content of this parameter depends on the value of the
            <paramref name="Msg"/> parameter.
            </param>
            <returns>
            The return value is the result of the message processing and depends on the message.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.DeleteDC(System.IntPtr)">
            <summary>
            Deletes the specified device context (DC).
            </summary>
            <param name="hdc">
            A handle to the device context.
            </param>
            <returns>
            True if the function succeeds; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.DeleteEnhMetaFile(System.IntPtr)">
            <summary>
            Deletes an enhanced-format metafile or an enhanced-format metafile handle.
            </summary>
            <param name="hemf">
            A handle to an enhanced metafile.
            </param>
            <returns>
            True if the function succeeds; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.DeleteObject(System.IntPtr)">
            <summary>
            Deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources
            associated with the object. After the object is deleted, the specified handle is no longer
            valid.
            </summary>
            <param name="hObject">
            A handle to a logical pen, brush, font, bitmap, region, or palette.
            </param>
            <returns>
            True if the function succeeds; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.DestroyIcon(System.IntPtr)">
            <summary>
            Destroys an icon and frees any memory the icon occupied.
            </summary>
            <param name="hIcon">
            A handle to the icon to be destroyed. The icon must not be in use.
            </param>
            <returns>
            True if the function succeeds; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.DrawThemeBackground(System.IntPtr,System.IntPtr,System.Int32,System.Int32,Simphony.NativeMethods.RECT@,System.IntPtr)">
            <summary>
            Draws the border and fill defined by the visual style for the specified control part.
            </summary>
            <param name="hTheme">
            Handle to a window's specified theme data.
            </param>
            <param name="hdc">
            HDC used for drawing the theme-defined background image.
            </param>
            <param name="iPartId">
            A value that specifies the part to draw.
            </param>
            <param name="iStateId">
            A value that specifies the state of the part to draw.
            </param>
            <param name="pRect">
            Pointer to a RECT structure that contains the rectangle, in logical coordinates, in which
            the background image is drawn.
            </param>
            <param name="pClipRect">
            Pointer to a RECT structure that contains a clipping rectangle. This parameter may be set
            to NULL.
            </param>
            <returns>
            If this function succeeds, it returns <see cref="F:Simphony.NativeMethods.S_OK"/>. Otherwise, it returns an
            HRESULT error code.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.DrawThemeParentBackground(System.IntPtr,System.IntPtr,Simphony.NativeMethods.RECT@)">
            <summary>
            Draws the part of a parent control that is covered by a partially-transparent or
            alpha-blended child control.
            </summary>
            <param name="hWnd">
            The child control.
            </param>
            <param name="hdc">
            The child control's DC.
            </param>
            <param name="pRect">
            The area to be drawn. The rectangle is in the child window's coordinates. If this
            parameter is NULL, the area to be drawn includes the entire area occupied by the child
            control.
            </param>
            <returns>
            If this function succeeds, it returns <see cref="F:Simphony.NativeMethods.S_OK"/>. Otherwise, it returns an
            HRESULT error code.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.DrawThemeText(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.String,System.Int32,System.UInt32,System.UInt32,Simphony.NativeMethods.RECT@)">
            <summary>
            Draws text using the color and font defined by the visual style.
            </summary>
            <param name="hTheme">
            Handle to a window's theme data.
            </param>
            <param name="hdc">
            HDC to use for drawing.
            </param>
            <param name="iPartId">
            The control part that has the desired text appearance. If this value is 0, the text is
            drawn in the default font, or a font selected into the device context.
            </param>
            <param name="iStateId">
            The control state that has the desired text appearance.
            </param>
            <param name="pszText">
            The text to draw.
            </param>
            <param name="iCharCount">
            The number of characters to draw.
            </param>
            <param name="dwTextFlags">
            One or more values that specify the string's formatting.
            </param>
            <param name="dwTextFlags2">
            Not used. Set to zero.
            </param>
            <param name="pRect">
            A RECT structure that contains the rectangle, in logical coordinates, in which the text
            is to be drawn.
            </param>
            <returns>
            If this function succeeds, it returns <see cref="F:Simphony.NativeMethods.S_OK"/>. Otherwise, it returns an
            HRESULT error code.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.EmptyClipboard">
            <summary>
            Empties the clipboard and frees handles to data in the clipboard. The function then
            assigns ownership of the clipboard to the window that currently has the clipboard open.
            </summary>
            <returns>
            True if the function succeeds; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.EnableMenuItem(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Enables, disables, or grays the specified menu item.
            </summary>
            <param name="hMenu">
            A handle to the menu.
            </param>
            <param name="uIDEnableItem">
            The menu item to be enabled, disabled, or grayed, as determined by the
            <paramref name="uEnable"/> parameter. This parameter specifies an item in a menu bar,
            menu, or submenu.
            </param>
            <param name="uEnable">
            Controls the interpretation of the <paramref name="uIDEnableItem"/> parameter and
            indicate whether the menu item is enabled, disabled, or grayed.
            </param>
            <returns>
            The return value specifies the previous state of the menu item (it is either
            <see cref="F:Simphony.NativeMethods.MF_DISABLED"/>, <see cref="F:Simphony.NativeMethods.MF_ENABLED"/>, or <see cref="F:Simphony.NativeMethods.MF_GRAYED"/>). If the
            menu item does not exist, the return value is -1.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.EnableWindow(System.IntPtr,System.Boolean)">
            <summary>
            Enables or disables mouse and keyboard input to the specified window or control. When
            input is disabled, the window does not receive input such as mouse clicks and key
            presses. When input is enabled, the window receives all input.
            </summary>
            <param name="hWnd">
            A handle to the window to be enabled or disabled.
            </param>
            <param name="bEnable">
            Indicates whether to enable or disable the window. If this parameter is TRUE, the window
            is enabled. If the parameter is FALSE, the window is disabled.
            </param>
            <returns>
            If the window was previously disabled, the return value is nonzero. If the window was not
            previously disabled, the return value is zero.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.EndPaint(System.IntPtr,Simphony.NativeMethods.PAINTSTRUCT@)">
            <summary>
            Marks the end of painting in the specified window. This function is required for each call to the
            BeginPaint function, but only after painting is complete.
            </summary>
            <param name="hWnd">
            Handle to the window that has been repainted.
            </param>
            <param name="lpPaint">
            Pointer to a PAINTSTRUCT structure that contains the painting information retrieved by BeginPaint.
            </param>
            <returns>
            The return value is always true.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.ExcludeClipRect(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The <see cref="M:Simphony.NativeMethods.ExcludeClipRect(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)"/> function creates a new clipping region that consists of
            the existing clipping region minus the specified rectangle.
            </summary>
            <param name="hdc">
            A handle to the device context.
            </param>
            <param name="nLeftRect">
            The x-coordinate, in logical units, of the upper-left corner of the rectangle.
            </param>
            <param name="nTopRect">
            The y-coordinate, in logical units, of the upper-left corner of the rectangle.
            </param>
            <param name="nRightRect">
            The x-coordinate, in logical units, of the lower-right corner of the rectangle.
            </param>
            <param name="nBottomRect">
            The y-coordinate, in logical units, of the lower-right corner of the rectangle.
            </param>
            <returns>
            The return value specifies the new clipping region's complexity.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.FillRect(System.IntPtr,Simphony.NativeMethods.RECT@,System.IntPtr)">
            <summary>
            Fills a rectangle by using the specified brush. This function includes the left
            and top borders, but excludes the right and bottom borders of the rectangle.
            </summary>
            <param name="hDC">
            A handle to the device context.
            </param>
            <param name="lprc">
            A pointer to a RECT structure that contains the logical coordinates of the
            rectangle to be filled.
            </param>
            <param name="hbr">
            A handle to the brush used to fill the rectangle.
            </param>
            <returns>
            Nonzero if the function succeeds; otherwise zero.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
            Retrieves a handle to a window whose class name and window name match the specified
            strings. The function searches child windows, beginning with the one following the
            specified child window. This function does not perform a case-sensitive search.
            </summary>
            <param name="hwndParent">
            A handle to the parent window whose child windows are to be searched. If
            <paramref name="hwndParent"/> is NULL, the function uses the desktop window as the parent
            window, and the function searches among windows that are child windows of the desktop.
            </param>
            <param name="hwndChildAfter">
            A handle to a child window. The search begins with the next child window in the Z order.
            The child window must be a direct child window of <paramref name="hwndParent"/>, not just
            a descendant window. If <paramref name="hwndChildAfter"/> is NULL, the search begins with
            the first child window of <paramref name="hwndParent"/>.
            </param>
            <param name="lpszClass">
            The window class name.
            </param>
            <param name="lpszWindow">
            The window name (the window's title). If this parameter is NULL, all window names match.
            </param>
            <returns>
            If the function succeeds, the return value is a handle to the window that has the
            specified class and window names. If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetButtons(System.IntPtr)">
            <summary>
            Converts the wParam parameter of a <see cref="F:Simphony.NativeMethods.WM_MOUSEMOVE"/> message to a
            <see cref="T:System.Windows.Forms.MouseButtons"/> value.
            </summary>
            <param name="wParam">
            The wParam parameter of a <see cref="F:Simphony.NativeMethods.WM_MOUSEMOVE"/> message.
            </param>
            <returns>
            The wParam parameter converted to a <see cref="T:System.Windows.Forms.MouseButtons"/> value.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetClientRect(System.IntPtr,Simphony.NativeMethods.RECT@)">
            <summary>
            Retrieves the coordinates of a window's client area. The client coordinates specify the
            upper-left and lower-right corners of the client area. Because client coordinates are
            relative to the upper-left corner of a window's client area, the coordinates of the
            upper-left corner are (0,0).
            </summary>
            <param name="hWnd">
            A handle to the window whose client coordinates are to be retrieved.
            </param>
            <param name="lpRect">
            A pointer to a RECT structure that receives the client coordinates. The left and top
            members are zero. The right and bottom members contain the width and height of the window.
            </param>
            <returns>
            True if the function succeeds; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetClipboardData(System.UInt32)">
            <summary>
            Retrieves data from the clipboard in a specified format. The clipboard must have been
            opened previously.
            </summary>
            <param name="uFormat">
            A clipboard format.
            </param>
            <returns>
            If the function succeeds, the return value is the handle to a clipboard object in the
            specified format. If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetCurrentThreadId">
            <summary>
            Retrieves the thread identifier of the calling thread.
            </summary>
            <returns>
            The return value is the thread identifier of the calling thread.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetCursorPos(Simphony.NativeMethods.POINT@)">
            <summary>
            Retrieves the position of the mouse cursor, in screen coordinates.
            </summary>
            <param name="lpPoint">
            A pointer to a <see cref="T:Simphony.NativeMethods.POINT"/> structure that receives the screen coordinates of the
            cursor.
            </param>
            <returns>
            Returns nonzero if successful or zero otherwise.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetDeviceCaps(System.IntPtr,System.Int32)">
            <summary>
            Retrieves device-specific information for the specified device.
            </summary>
            <param name="hdc">
            A handle to the DC.
            </param>
            <param name="nIndex">
            The item to be returned.
            </param>
            <returns>
            The return value specifies the value of the desired item.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetDlgItem(System.IntPtr,System.Int32)">
            <summary>
            Retrieves a handle to a control in the specified dialog box.
            </summary>
            <param name="hDlg">
            A handle to the dialog box that contains the control.
            </param>
            <param name="nIDDlgItem">
            The identifier of the control to be retrieved.
            </param>
            <returns>
            If the function succeeds, the return value is the window handle of the specified control.
            If the function fails, the return value is NULL, indicating an invalid dialog box handle
            or a nonexistent control.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetFocus">
            <summary>
            Retrieves the handle to the window that has the keyboard focus, if the window is
            attached to the calling thread's message queue.
            </summary>
            <returns>
            The return value is the handle to the window with the keyboard focus. If the calling
            thread's message queue does not have an associated window with the keyboard focus,
            the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetForegroundWindow">
            <summary>
            Retrieves a handle to the foreground window (the window with which the user is currently
            working). The system assigns a slightly higher priority to the thread that creates the
            foreground window than it does to other threads.
            </summary>
            <returns>
            The return value is a handle to the foreground window. The foreground window can be NULL
            in certain circumstances, such as when a window is losing activation.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetIconInfo(System.IntPtr,Simphony.NativeMethods.ICONINFO@)">
            <summary>
            Retrieves information about the specified icon or cursor.
            </summary>
            <param name="hIcon">
            A handle to the icon or cursor.
            </param>
            <param name="piconinfo">
            A pointer to an <see cref="T:Simphony.NativeMethods.ICONINFO"/> structure. The function fills in the structure's
            members.
            </param>
            <returns>
            True if the function succeeds; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetMenuState(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Retrieves the menu flags associated with the specified menu item. If the menu item opens
            a submenu, this function also returns the number of items in the submenu.
            </summary>
            <param name="hMenu">
            A handle to the menu that contains the menu item whose flags are to be retrieved.
            </param>
            <param name="uId">
            The menu item for which the menu flags are to be retrieved, as determined by the
            <paramref name="uFlags"/> parameter.
            </param>
            <param name="uFlags">
            Indicates how the <paramref name="uId"/> parameter is interpreted.
            </param>
            <returns>
            If the specified item does not exist, the return value is -1. If the menu item opens a
            submenu, the low-order byte of the return value contains the menu flags associated with
            the item, and the high-order byte contains the number of items in the submenu opened by
            the item. Otherwise, the return value is a mask (Bitwise OR) of the menu flags.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetParent(System.IntPtr)">
            <summary>
            Retrieves a handle to the specified window's parent or owner.
            </summary>
            <param name="hWnd">
            A handle to the window whose parent window handle is to be retrieved.
            </param>
            <returns>
            If the window is a child window, the return value is a handle to the parent window; if the
            window is a top-level window with the WS_POPUP style, the return value is a handle to the
            owner window; if the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetPoint(System.IntPtr)">
            <summary>
            Converts the lParam parameter of a <see cref="F:Simphony.NativeMethods.WM_MOUSEMOVE"/> message to a
            <see cref="T:System.Drawing.Point"/>.
            </summary>
            <param name="lParam">
            The lParam parameter of a <see cref="F:Simphony.NativeMethods.WM_MOUSEMOVE"/> message.
            </param>
            <returns>
            The lParam parameter converted to a <see cref="T:System.Drawing.Point"/>.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetPixel(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Retrieves the red, green, blue (RGB) color value of the pixel at the specified coordinates.
            </summary>
            <param name="hdc">
            A handle to the device context.
            </param>
            <param name="nXPos">
            The x-coordinate, in logical units, of the pixel to be examined.
            </param>
            <param name="nYPos">
            The y-coordinate, in logical units, of the pixel to be examined.
            </param>
            <returns>
            The return value is the COLORREF value that specifies the RGB of the pixel. If the pixel is
            outside of the current clipping region, the return value is CLR_INVALID (0xFFFFFFFF).
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetScrollInfo(System.IntPtr,System.Int32,Simphony.NativeMethods.SCROLLINFO@)">
            <summary>
            The <see cref="M:Simphony.NativeMethods.GetScrollInfo(System.IntPtr,System.Int32,Simphony.NativeMethods.SCROLLINFO@)"/> function retrieves the parameters of a scroll bar,
            including the minimum and maximum scrolling positions, the page size, and the position of
            the scroll box (thumb).
            </summary>
            <param name="hwnd">
            Handle to a scroll bar control or a window with a standard scroll bar, depending on the
            value of the <paramref name="fnBar"/> parameter.
            </param>
            <param name="fnBar">
            Specifies the type of scroll bar for which to retrieve parameters.
            </param>
            <param name="lpsi">
            Pointer to a <see cref="T:Simphony.NativeMethods.SCROLLINFO"/> structure. Before calling
            <see cref="M:Simphony.NativeMethods.GetScrollInfo(System.IntPtr,System.Int32,Simphony.NativeMethods.SCROLLINFO@)"/>, set the <see cref="F:Simphony.NativeMethods.SCROLLINFO.cbSize"/> member to
            sizeof(<see cref="T:Simphony.NativeMethods.SCROLLINFO"/>), and set the <see cref="F:Simphony.NativeMethods.SCROLLINFO.fMask"/> member to
            specify the scroll bar parameters to retrieve. Before returning, the function copies the
            specified parameters to the appropriate members of the structure.
            </param>
            <returns>
            If the function retrieved any values, the return value is nonzero. If the function does
            not retrieve any values, the return value is zero.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetStockObject(System.Int32)">
            <summary>
            Retrieves a handle to one of the stock pens, brushes, fonts, or palettes.
            </summary>
            <param name="fnObject">
            The type of stock object.
            </param>
            <returns>
            If the function succeeds, the return value is a handle to the requested logical
            object; if the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetSysColor(System.Int32)">
            <summary>
            Retrieves the current color of the specified display element. Display elements are
            the parts of a window and the display that appear on the system display screen.
            </summary>
            <param name="nIndex">
            The display element whose color is to be retrieved.
            </param>
            <returns>
            The function returns the red, green, blue (RGB) color value of the given element.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetSysColorBrush(System.Int32)">
            <summary>
            The <see cref="M:Simphony.NativeMethods.GetSysColorBrush(System.Int32)"/> function retrieves a handle identifying a logical
            brush that corresponds to the specified color index.
            </summary>
            <param name="nIndex">
            A color index. This value corresponds to the color used to paint one of the window
            elements.
            </param>
            <returns>
            The return value identifies a logical brush if the <paramref name="nIndex"/> parameter is
            supported by the current platform. Otherwise, it returns NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetSystemMenu(System.IntPtr,System.Boolean)">
            <summary>
            Enables the application to access the window menu (also known as the system menu or the
            control menu) for copying and modifying.
            </summary>
            <param name="hWnd">
            A handle to the window that will own a copy of the window menu.
            </param>
            <param name="bRevert">
            The action to be taken. If this parameter is false, the method returns a handle to the
            copy of the window menu currently in use. The copy is initially identical to the window
            menu, but it can be modified. If this parameter is true, the method resets the window
            menu back to the default state. The previous window menu, if any, is destroyed.
            </param>
            <returns>
            If the <paramref name="bRevert"/> parameter is false, the return value is a handle to a
            copy of the window menu. If the <paramref name="bRevert"/> parameter is true, the return
            value is null.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetSystemMetrics(System.Int32)">
            <summary>
            Retrieves the specified system metric or system configuration setting.
            </summary>
            <param name="nIndex">
            The system metric or configuration setting to be retrieved.
            </param>
            <returns>
            If the function succeeds, the return value is the requested system metric or configuration
            setting; if the function fails, the return value is 0.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetTextExtentPoint32(System.IntPtr,System.String,System.Int32,Simphony.NativeMethods.SIZE@)">
            <summary>
            Computes the width and height of the specified string of text.
            </summary>
            <param name="hdc">
            A handle to the device context.
            </param>
            <param name="lpString">
            A pointer to a buffer that specifies the text string. The string does not need to be
            null-terminated, because the <paramref name="c"/> parameter specifies the length of
            the string.
            </param>
            <param name="c">
            The length of the string pointed to by <paramref name="lpString"/>.
            </param>
            <param name="lpSize">
            A pointer to a <see cref="T:Simphony.NativeMethods.SIZE"/> structure that receives the dimensions of the string,
            in logical units.
            </param>
            <returns>
            True if the function succeeds; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetThemeBackgroundContentRect(System.IntPtr,System.IntPtr,System.Int32,System.Int32,Simphony.NativeMethods.RECT@,Simphony.NativeMethods.RECT@)">
            <summary>
            Retrieves the size of the content area for the background defined by the visual style.
            </summary>
            <param name="hTheme">
            Handle to a window's specified theme data.
            </param>
            <param name="hdc">
            HDC to use when drawing. This parameter may be set to NULL.
            </param>
            <param name="iPartId">
            A value that specifies the part that contains the color property.
            </param>
            <param name="iStateId">
            A value that specifies the state of the part.
            </param>
            <param name="pBoundingRect">
            Pointer to a <see cref="T:Simphony.NativeMethods.RECT"/> structure that contains the total background rectangle,
            in logical coordinates. This is the area inside the borders or margins.
            </param>
            <param name="pContentRect">
            Pointer to a <see cref="T:Simphony.NativeMethods.RECT"/> structure that receives the content area background
            rectangle, in logical coordinates. This rectangle is calculated to fit the content area.
            </param>
            <returns>
            If this function succeeds, it returns <see cref="F:Simphony.NativeMethods.S_OK"/>. Otherwise, it returns an
            HRESULT error code.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetThemeColor(System.IntPtr,System.Int32,System.Int32,System.Int32,Simphony.NativeMethods.COLORREF@)">
            <summary>
            Retrieves the value of a color property.
            </summary>
            <param name="hTheme">
            Handle to a window's specified theme data.
            </param>
            <param name="iPartId">
            A value that specifies the part that contains the color property.
            </param>
            <param name="iStateId">
            A value that specifies the state of the part.
            </param>
            <param name="iPropId">
            A value that specifies the property to retrieve.
            </param>
            <param name="pColor">
            Pointer to a COLORREF structure that receives the color value.
            </param>
            <returns>
            If this function succeeds, it returns <see cref="F:Simphony.NativeMethods.S_OK"/>. Otherwise, it returns an
            HRESULT error code.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetWindowDC(System.IntPtr)">
            <summary>
            Retrieves the device context (DC) for the entire window, including title bar, menus, and
            scroll bars. A window device context permits painting anywhere in a window, because the
            origin of the device context is the upper-left corner of the window instead of the client
            area.
            </summary>
            <param name="hWnd">
            A handle to the window with a device context that is to be retrieved. If this value is
            NULL, the device context for the entire screen is retrieved.
            </param>
            <returns>
            If the function succeeds, the return value is a handle to a device context for the
            specified window. If the function fails, the return value is NULL, indicating an error or
            an invalid <paramref name="hWnd"/> parameter.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetWindowPlacement(System.IntPtr,Simphony.NativeMethods.WINDOWPLACEMENT@)">
            <summary>
            Retrieves the show state and the restored, minimized, and maximized positions of the
            specified window.
            </summary>
            <param name="hWnd">
            A handle to the window.
            </param>
            <param name="lpwndpl">
            A pointer to the <see cref="T:Simphony.NativeMethods.WINDOWPLACEMENT"/> structure that receives the show state and
            position information.
            </param>
            <returns>
            True if the function succeeds; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GetWindowRect(System.IntPtr,Simphony.NativeMethods.RECT@)">
            <summary>
            Retrieves the dimensions of the bounding rectangle of the specified window. The
            dimensions are given in screen coordinates that are relative to the upper-left corner of
            the screen.
            </summary>
            <param name="hwnd">
            A handle to the window.
            </param>
            <param name="lpRect">
            A pointer to a <see cref="T:Simphony.NativeMethods.RECT"/> structure that receives the screen coordinates of the
            upper-left and lower-right corners of the window.
            </param>
            <returns>
            True if the function succeeds; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GlobalAlloc(System.UInt32,System.UIntPtr)">
            <summary>
            Allocates the specified number of bytes from the heap.
            </summary>
            <param name="uFlags">
            The memory allocation attributes. If zero is specified, the default is
            <see cref="F:Simphony.NativeMethods.GMEM_FIXED"/>.
            </param>
            <param name="dwBytes">
            The number of bytes to allocate. If this parameter is zero and the
            <paramref name="uFlags"/> parameter specifies GMEM_MOVEABLE, the function returns a
            handle to a memory object that is marked as discarded.
            </param>
            <returns>
            If the function succeeds, the return value is a handle to the newly allocated memory
            object; if the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GlobalLock(System.IntPtr)">
            <summary>
            Locks a global memory object and returns a pointer to the first byte of the object's
            memory block.
            </summary>
            <param name="hMem">
            A handle to the global memory object. This handle is returned by either the
            <see cref="M:Simphony.NativeMethods.GlobalAlloc(System.UInt32,System.UIntPtr)"/> or <see cref="M:Simphony.NativeMethods.GlobalReAlloc(System.IntPtr,System.UIntPtr,System.UInt32)"/> function.
            </param>
            <returns>
            If the function succeeds, the return value is a pointer to the first byte of the memory
            block; if the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GlobalMemoryStatusEx(Simphony.NativeMethods.MEMORYSTATUSEX@)">
            <summary>
            Retrieves information about the system's current usage of both physical and virtual
            memory.
            </summary>
            <param name="lpBuffer">
            A pointer to a MEMORYSTATUSEX structure that receives information about current memory
            availability.
            </param>
            <returns>
            True if the function succeeds; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GlobalReAlloc(System.IntPtr,System.UIntPtr,System.UInt32)">
            <summary>
            Changes the size or attributes of a specified global memory object. The size can increase
            or decrease.
            </summary>
            <param name="hMem">
            A handle to the global memory object to be reallocated. This handle is returned by either
            the <see cref="M:Simphony.NativeMethods.GlobalAlloc(System.UInt32,System.UIntPtr)"/> or <see cref="M:Simphony.NativeMethods.GlobalReAlloc(System.IntPtr,System.UIntPtr,System.UInt32)"/> function.
            </param>
            <param name="dwBytes">
            The new size of the memory block, in bytes. If <paramref name="uFlags"/> specifies
            <see cref="F:Simphony.NativeMethods.GMEM_MODIFY"/>, this parameter is ignored.
            </param>
            <param name="uFlags">
            The reallocation options. If <see cref="F:Simphony.NativeMethods.GMEM_MODIFY"/> is specified, the function
            modifies the attributes of the memory object only (the <paramref name="dwBytes"/>
            parameter is ignored.) Otherwise, the function reallocates the memory object.
            </param>
            <returns>
            If the function succeeds, the return value is a handle to the reallocated memory object;
            if the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GlobalSize(System.IntPtr)">
            <summary>
            Retrieves the current size of the specified global memory object, in bytes.
            </summary>
            <param name="hMem">
            A handle to the global memory object. This handle is returned by either the
            <see cref="M:Simphony.NativeMethods.GlobalAlloc(System.UInt32,System.UIntPtr)"/> or <see cref="M:Simphony.NativeMethods.GlobalReAlloc(System.IntPtr,System.UIntPtr,System.UInt32)"/> function.
            </param>
            <returns>
            If the function succeeds, the return value is the size of the specified global memory
            object, in bytes. If the specified handle is not valid or if the object has been
            discarded, the return value is zero.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.GlobalUnlock(System.IntPtr)">
            <summary>
            Decrements the lock count associated with a memory object that was allocated with
            <see cref="F:Simphony.NativeMethods.GMEM_MOVEABLE"/>. This function has no effect on memory objects allocated with
            <see cref="F:Simphony.NativeMethods.GMEM_FIXED"/>.
            </summary>
            <param name="hMem">
            A handle to the global memory object. This handle is returned by either the
            <see cref="M:Simphony.NativeMethods.GlobalAlloc(System.UInt32,System.UIntPtr)"/> or <see cref="M:Simphony.NativeMethods.GlobalReAlloc(System.IntPtr,System.UIntPtr,System.UInt32)"/> function.
            </param>
            <returns>
            If the memory object is still locked after decrementing the lock count, the return value
            is a nonzero value. If the memory object is unlocked after decrementing the lock count,
            the function returns zero and GetLastError returns NO_ERROR. If the function fails, the
            return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.HIWORD(System.UInt32)">
            <summary>
            Retrieves the high-order word from the specified 32-bit value.
            </summary>
            <param name="dwValue">
            The value to be converted.
            </param>
            <returns>
            The return value is the high-order word of the specified value.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.InflateRect(Simphony.NativeMethods.RECT@,System.Int32,System.Int32)">
            <summary>
            The <see cref="M:Simphony.NativeMethods.InflateRect(Simphony.NativeMethods.RECT@,System.Int32,System.Int32)"/> function increases or decreases the width and height of the
            specified rectangle. The <see cref="M:Simphony.NativeMethods.InflateRect(Simphony.NativeMethods.RECT@,System.Int32,System.Int32)"/> function adds <paramref name="dx"/>
            units to the left and right ends of the rectangle and <paramref name="dy"/> units to the
            top and bottom. The <paramref name="dx"/> and <paramref name="dy"/> parameters are signed
            values; positive values increase the width and height, and negative values decrease them.
            </summary>
            <param name="lprc">
            A pointer to the <see cref="T:Simphony.NativeMethods.RECT"/> structure that increases or decreases in size.
            </param>
            <param name="dx">
            The amount to increase or decrease the rectangle width. This parameter must be negative
            to decrease the width.
            </param>
            <param name="dy">
            The amount to increase or decrease the rectangle height. This parameter must be negative
            to decrease the height.
            </param>
            <returns>
            True if the function succeeds; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.IsThemeBackgroundPartiallyTransparent(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Retrieves whether the background specified by the visual style has transparent pieces or
            alpha-blended pieces.
            </summary>
            <param name="hTheme">
            Handle to a window's specified theme data.
            </param>
            <param name="iPartId">
            A value that specifies the part.
            </param>
            <param name="iStateId">
            A value that specifies the state of the part.
            </param>
            <returns>
            True if the theme-specified background for a particular <paramref name="iPartId"/> and
            <paramref name="iStateId"/> has transparent pieces or alpha-blended pieces; otherwise,
            false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.LineTo(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The <see cref="M:Simphony.NativeMethods.LineTo(System.IntPtr,System.Int32,System.Int32)"/> function draws a line from the current position up to, but not
            including, the specified point.
            </summary>
            <param name="hdc">
            Handle to a device context.
            </param>
            <param name="nXEnd">
            Specifies the x-coordinate, in logical units, of the line's ending point.
            </param>
            <param name="nYEnd">
            Specifies the y-coordinate, in logical units, of the line's ending point.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return
            value is zero.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.LOWORD(System.UInt32)">
            <summary>
            Retrieves the low-order word from the specified 32-bit value.
            </summary>
            <param name="dwValue">
            The value to be converted.
            </param>
            <returns>
            The return value is the low-order word of the specified value.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.MessageBeep(System.UInt32)">
            <summary>
            Plays a waveform sound. The waveform sound for each sound type is identified by an entry
            in the registry.
            </summary>
            <param name="uType">
            The sound to be played. The sounds are set by the user through the Sound control panel
            application, and then stored in the registry.
            </param>
            <returns>
            True if the function succeeds; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.MoveToEx(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            The MoveToEx function updates the current position to the specified point and optionally
            returns the previous position.
            </summary>
            <param name="hdc">
            Handle to a device context.
            </param>
            <param name="X">
            Specifies the x-coordinate, in logical units, of the new position.
            </param>
            <param name="Y">
            Specifies the y-coordinate, in logical units, of the new position.
            </param>
            <param name="lpPoint">
            Pointer to a <see cref="T:Simphony.NativeMethods.POINT"/> structure that receives the previous current position.
            If this parameter is a NULL pointer, the previous position is not returned.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return
            value is zero.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.MulDiv(System.Int32,System.Int32,System.Int32)">
            <summary>
            Multiplies two 32-bit values and then divides the 64-bit result by a third 32-bit value.
            The final result is rounded to the nearest integer.
            </summary>
            <param name="nNumber">
            The multiplicand.
            </param>
            <param name="nNumerator">
            The multiplier.
            </param>
            <param name="nDenominator">
            The number by which the result of the multiplication operation is to be divided.
            </param>
            <returns>
            If the function succeeds, the return value is the result of the multiplication and
            division, rounded to the nearest integer. If the result is a positive half integer (ends
            in .5), it is rounded up. If the result is a negative half integer, it is rounded down.
            If either an overflow occurred or <paramref name="nDenominator"/> was 0, the return value
            is -1.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.OpenClipboard(System.IntPtr)">
            <summary>
            Opens the clipboard for examination and prevents other applications from modifying the
            clipboard content.
            </summary>
            <param name="hWndNewOwner">
            A handle to the window to be associated with the open clipboard. If this parameter is NULL,
            the open clipboard is associated with the current task.
            </param>
            <returns>
            True if the function succeeds; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.OpenThemeData(System.IntPtr,System.String)">
            <summary>
            Opens the theme data for a window and its associated class.
            </summary>
            <param name="hwnd">
            Handle of the window for which theme data is required.
            </param>
            <param name="pszClassList">
            Pointer to a string that contains a semicolon-separated list of classes.
            </param>
            <returns>
            OpenThemeData tries to match each class, one at a time, to a class data section in the
            active theme. If a match is found, an associated HTHEME handle is returned. If no match
            is found NULL is returned.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.OffsetRect(Simphony.NativeMethods.RECT@,System.Int32,System.Int32)">
            <summary>
            The <see cref="M:Simphony.NativeMethods.OffsetRect(Simphony.NativeMethods.RECT@,System.Int32,System.Int32)"/> function moves the specified rectangle by the specified
            offsets.
            </summary>
            <param name="lprc">
            Pointer to a <see cref="T:Simphony.NativeMethods.RECT"/> structure that contains the logical coordinates of the
            rectangle to be moved.
            </param>
            <param name="dx">
            Specifies the amount to move the rectangle left or right. This parameter must be a
            negative value to move the rectangle to the left.
            </param>
            <param name="dy">
            Specifies the amount to move the rectangle up or down. This parameter must be a negative
            value to move the rectangle up.
            </param>
            <returns>
            True if the function succeeds; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.PathCompactPathEx(System.Text.StringBuilder,System.String,System.UInt32,System.UInt32)">
            <summary>
            Truncates a path to fit within a certain number of characters by replacing path
            components with ellipses.
            </summary>
            <param name="pszOut">
            A <see cref="T:System.Text.StringBuilder"/> with enough capacity to hold the string that has been
            altered.
            </param>
            <param name="pszSrc">
            A string containing the path to be altered.
            </param>
            <param name="cchMax">
            The maximum number of characters to be contained in the new string, including the
            terminating null character.
            </param>
            <param name="dwFlags">
            Reserved and should be set to zero.
            </param>
            <returns>
            True if successful; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.PtInRect(Simphony.NativeMethods.RECT@,Simphony.NativeMethods.POINT)">
            <summary>
            Determines whether the specified point lies within the specified rectangle.
            </summary>
            <param name="lprc">
            A pointer to a <see cref="T:Simphony.NativeMethods.RECT"/> structure that contains the specified rectangle.
            </param>
            <param name="pt">
            A <see cref="T:Simphony.NativeMethods.POINT"/> structure that contains the specified point.
            </param>
            <returns>
            True if the specified point lies within the rectangle; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.Rectangle(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle. The rectangle is outlined by using the current pen and filled
            by using the current brush.
            </summary>
            <param name="hdc">
            A handle to the device context.
            </param>
            <param name="nLeftRect">
            The x-coordinate, in logical coordinates, of the upper-left corner of the rectangle.
            </param>
            <param name="nTopRect">
            The y-coordinate, in logical coordinates, of the upper-left corner of the rectangle.
            </param>
            <param name="nRightRect">
            The x-coordinate, in logical coordinates, of the lower-right corner of the rectangle.
            </param>
            <param name="nBottomRect">
            The y-coordinate, in logical coordinates, of the lower-right corner of the rectangle.
            </param>
            <returns>
            True if the function succeeds; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.RegisterClipboardFormat(System.String)">
            <summary>
            Registers a new clipboard format. This format can then be used as a valid clipboard
            format.
            </summary>
            <param name="lpszFormat">
            The name of the new format.
            </param>
            <returns>
            If the function succeeds, the return value identifies the registered clipboard format. If
            the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            The ReleaseDC function releases a device context (DC), freeing it for use by other
            applications. The effect of the ReleaseDC function depends on the type of DC. It frees
            only common and window DCs. It has no effect on class or private DCs.
            </summary>
            <param name="hWnd">
            A handle to the window whose DC is to be released.
            </param>
            <param name="hDC">
            A handle to the DC to be released.
            </param>
            <returns>
            True if the DC was released; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.ScreenToClient(System.IntPtr,Simphony.NativeMethods.POINT@)">
            <summary>
            Converts the screen coordinates of a specified point on the screen to client-area
            coordinates.
            </summary>
            <param name="hWnd">
            A handle to the window whose client area will be used for the conversion.
            </param>
            <param name="lpPoint">
            A pointer to a <see cref="T:Simphony.NativeMethods.POINT"/> structure that specifies the screen coordinates to be
            converted.
            </param>
            <returns>
            True if the function succeeds; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.ScreenToClient(System.IntPtr,Simphony.NativeMethods.RECT@)">
            <summary>
            Converts the screen coordinates of a specified rectangle to client-area coordinates.
            </summary>
            <param name="hWnd">
            A handle to the window whose client area will be used for the conversion.
            </param>
            <param name="lpRect">
            A pointer to a <see cref="T:Simphony.NativeMethods.RECT"/> structure whose screen coordinates are to be converted.
            </param>
            <returns>
            True if the function succeeds; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            Selects an object into the specified device context (DC). The new object replaces
            the previous object of the same type.
            </summary>
            <param name="hdc">
            A handle to the DC.
            </param>
            <param name="hgdiobj">
            A handle to the object to be selected.
            </param>
            <returns>
            If the selected object is not a region and the function succeeds, the return value
            is a handle to the object being replaced; if an error occurs and the selected object
            is not a region, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows. The function calls the window
            procedure for the specified window and does not return until the window procedure has
            processed the message.
            </summary>
            <param name="hWnd">
            A handle to the window whose window procedure will receive the message.
            </param>
            <param name="msg">
            The message to be sent.
            </param>
            <param name="wParam">
            The <paramref name="wParam"/> parameter of the message.
            </param>
            <param name="lParam">
            The <paramref name="lParam"/> parameter of the message.
            </param>
            <returns>
            The return value specifies the result of the message processing; it depends on the message sent.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,Simphony.NativeMethods.CHARFORMAT2@)">
            <summary>
            Sends the specified message to a window or windows. The function calls the window
            procedure for the specified window and does not return until the window procedure has
            processed the message.
            </summary>
            <param name="hWnd">
            A handle to the window whose window procedure will receive the message.
            </param>
            <param name="msg">
            The message to be sent.
            </param>
            <param name="wParam">
            The <paramref name="wParam"/> parameter of the message.
            </param>
            <param name="lParam">
            The <paramref name="lParam"/> parameter of the message.
            </param>
            <returns>
            The return value specifies the result of the message processing; it depends on the message sent.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,Simphony.NativeMethods.FORMATRANGE@)">
            <summary>
            Sends the specified message to a window or windows. The function calls the window
            procedure for the specified window and does not return until the window procedure has
            processed the message.
            </summary>
            <param name="hWnd">
            A handle to the window whose window procedure will receive the message.
            </param>
            <param name="msg">
            The message to be sent.
            </param>
            <param name="wParam">
            The <paramref name="wParam"/> parameter of the message.
            </param>
            <param name="lParam">
            The <paramref name="lParam"/> parameter of the message.
            </param>
            <returns>
            The return value specifies the result of the message processing; it depends on the message sent.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,Simphony.NativeMethods.PARAFORMAT2@)">
            <summary>
            Sends the specified message to a window or windows. The function calls the window
            procedure for the specified window and does not return until the window procedure has
            processed the message.
            </summary>
            <param name="hWnd">
            A handle to the window whose window procedure will receive the message.
            </param>
            <param name="msg">
            The message to be sent.
            </param>
            <param name="wParam">
            The <paramref name="wParam"/> parameter of the message.
            </param>
            <param name="lParam">
            The <paramref name="lParam"/> parameter of the message.
            </param>
            <returns>
            The return value specifies the result of the message processing; it depends on the message sent.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,Simphony.NativeMethods.RECT@)">
            <summary>
            Sends the specified message to a window or windows. The function calls the window
            procedure for the specified window and does not return until the window procedure has
            processed the message.
            </summary>
            <param name="hWnd">
            A handle to the window whose window procedure will receive the message.
            </param>
            <param name="msg">
            The message to be sent.
            </param>
            <param name="wParam">
            The <paramref name="wParam"/> parameter of the message.
            </param>
            <param name="lParam">
            The <paramref name="lParam"/> parameter of the message.
            </param>
            <returns>
            The return value specifies the result of the message processing; it depends on the message sent.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SetActiveWindow(System.IntPtr)">
            <summary>
            Activates a window. The window must be attached to the calling thread's message queue.
            </summary>
            <param name="hWnd">
            A handle to the top-level window to be activated.
            </param>
            <returns>
            If the function succeeds, the return value is the handle to the window that was
            previously active. If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SetClipboardData(System.UInt32,System.IntPtr)">
            <summary>
            Places data on the clipboard in a specified clipboard format. The window must be the
            current clipboard owner, and the application must have called the OpenClipboard function.
            </summary>
            <param name="uFormat">
            The clipboard format. This parameter can be a registered format or any of the standard
            clipboard formats.
            </param>
            <param name="hMem">
            A handle to the data in the specified format. This parameter can be NULL, indicating that
            the window provides data in the specified clipboard format (renders the format) upon
            request.
            </param>
            <returns>
            If the function succeeds, the return value is the handle to the data; if the function
            fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SetPixel(System.IntPtr,System.Int32,System.Int32,Simphony.NativeMethods.COLORREF)">
            <summary>
            Sets the pixel at the specified coordinates to the specified color.
            </summary>
            <param name="hdc">
            A handle to the device context.
            </param>
            <param name="nXPos">
            The x-coordinate, in logical units, of the point to be set.
            </param>
            <param name="nYPos">
            The y-coordinate, in logical units, of the point to be set.
            </param>
            <param name="crColor">
            The color to be used to paint the point.
            </param>
            <returns>
            If the function succeeds, the return value is the RGB value that the function sets the pixel to.
            This value may differ from the color specified by crColor; that occurs when an exact match for
            the specified color cannot be found.  If the function fails, the return value is -1.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SetScrollInfo(System.IntPtr,System.Int32,Simphony.NativeMethods.SCROLLINFO@,System.Boolean)">
            <summary>
            The <see cref="M:Simphony.NativeMethods.SetScrollInfo(System.IntPtr,System.Int32,Simphony.NativeMethods.SCROLLINFO@,System.Boolean)"/> function sets the parameters of a scroll bar, including
            the minimum and maximum scrolling positions, the page size, and the position of the
            scroll box (thumb). The function also redraws the scroll bar, if requested.
            </summary>
            <param name="hwnd">
            Handle to a scroll bar control or a window with a standard scroll bar, depending on the
            value of the <paramref name="fnBar"/> parameter.
            </param>
            <param name="fnBar">
            Specifies the type of scroll bar for which to set parameters.
            </param>
            <param name="lpsi">
            Pointer to a <see cref="T:Simphony.NativeMethods.SCROLLINFO"/> structure. Before calling
            <see cref="M:Simphony.NativeMethods.SetScrollInfo(System.IntPtr,System.Int32,Simphony.NativeMethods.SCROLLINFO@,System.Boolean)"/>, set the <see cref="F:Simphony.NativeMethods.SCROLLINFO.cbSize"/> member of the
            structure to sizeof(<see cref="T:Simphony.NativeMethods.SCROLLINFO"/>), set the <see cref="F:Simphony.NativeMethods.SCROLLINFO.fMask"/>
            member to indicate the parameters to set, and specify the new parameter values in the
            appropriate members.
            </param>
            <param name="fRedraw">
            Specifies whether the scroll bar is redrawn to reflect the changes to the scroll bar. If
            this parameter is TRUE, the scroll bar is redrawn, otherwise, it is not redrawn.
            </param>
            <returns>
            The return value is the current position of the scroll box.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows
            are ordered according to their appearance on the screen. The topmost window receives the highest
            rank and is the first window in the Z order.
            </summary>
            <param name="hWnd">
            A handle to the window.
            </param>
            <param name="hWndInsertAfter">
            A handle to the window to precede the positioned window in the Z order. This parameter must be a
            window handle or one of the following values: <see cref="F:Simphony.NativeMethods.HWND_BOTTOM"/>, <see cref="F:Simphony.NativeMethods.HWND_NOTOPMOST"/>,
            <see cref="F:Simphony.NativeMethods.HWND_TOP"/>, or <see cref="F:Simphony.NativeMethods.HWND_TOPMOST"/>.
            </param>
            <param name="X">
            The new position of the left side of the window, in client coordinates.
            </param>
            <param name="Y">
            The new position of the top of the window, in client coordinates.
            </param>
            <param name="cx">
            The new width of the window, in pixels.
            </param>
            <param name="cy">
            The new height of the window, in pixels.
            </param>
            <param name="uFlags">
            The window sizing and positioning flags.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero; if the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SetWindowsHookEx(System.Int32,Simphony.NativeMethods.HOOKPROC,System.IntPtr,System.UInt32)">
            <summary>
            Installs an application-defined hook procedure into a hook chain. You would
            install a hook procedure to monitor the system for certain types of events.
            These events are associated either with a specific thread or with all threads
            in the same desktop as the calling thread.
            </summary>
            <param name="idHook">
            The type of hook procedure to be installed.
            </param>
            <param name="lpfn">
            A pointer to the hook procedure. If the <paramref name="dwThreadId"/> parameter
            is zero or specifies the identifier of a thread created by a different process,
            the <paramref name="lpfn"/> parameter must point to a hook procedure in a DLL.
            Otherwise, <paramref name="lpfn"/> can point to a hook procedure in the code
            associated with the current process.
            </param>
            <param name="hMod">
            A handle to the DLL containing the hook procedure pointed to by the
            <paramref name="lpfn"/> parameter. The <paramref name="hMod"/> parameter must be
            set to NULL if the <paramref name="dwThreadId"/> parameter specifies a thread
            created by the current process and if the hook procedure is within the code
            associated with the current process.
            </param>
            <param name="dwThreadId">
            The identifier of the thread with which the hook procedure is to be associated. For
            desktop apps, if this parameter is zero, the hook procedure is associated with all
            existing threads running in the same desktop as the calling thread.
            </param>
            <returns>
            If the function succeeds, the return value is the handle to the hook procedure; if
            the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SetWindowTheme(System.IntPtr,System.String,System.String)">
            <summary>
            Causes a window to use a different set of visual style information than its class
            normally uses.
            </summary>
            <param name="hwnd">
            Handle to the window whose visual style information is to be changed.
            </param>
            <param name="pszSubAppName">
            Pointer to a string that contains the application name to use in place of the calling
            application's name. If this parameter is NULL, the calling application's name is used.
            </param>
            <param name="pszSubIdList">
            Pointer to a string that contains a semicolon-separated list of CLSID names to use in
            place of the actual list passed by the window's class. If this parameter is NULL, the ID
            list from the calling class is used.
            </param>
            <returns>
            If this function succeeds, it returns <see cref="F:Simphony.NativeMethods.S_OK"/>. Otherwise, it returns an
            HRESULT error code.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.ShowWindow(System.IntPtr,System.Int32)">
            <summary>
            Sets the specified window's show state.
            </summary>
            <param name="hwnd">
            A handle to the window.
            </param>
            <param name="nCmdShow">
            Controls how the window is to be shown.
            </param>
            <returns>
            True if the window was previously visible; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.StretchBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Copies a bitmap from a source rectangle into a destination rectangle, stretching or
            compressing the bitmap to fit the dimensions of the destination rectangle, if necessary.
            The system stretches or compresses the bitmap according to the stretching mode currently
            set in the destination device context.
            </summary>
            <param name="hdcDest">
            A handle to the destination device context.
            </param>
            <param name="nXOriginDest">
            The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.
            </param>
            <param name="nYOriginDest">
            The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.
            </param>
            <param name="nWidthDest">
            The width, in logical units, of the destination rectangle.
            </param>
            <param name="nHeightDest">
            The height, in logical units, of the destination rectangle.
            </param>
            <param name="hdcSrc">
            A handle to the source device context.
            </param>
            <param name="nXOriginSrc">
            The x-coordinate, in logical units, of the upper-left corner of the source rectangle.
            </param>
            <param name="nYOriginSrc">
            The y-coordinate, in logical units, of the upper-left corner of the source rectangle.
            </param>
            <param name="nWidthSrc">
            The width, in logical units, of the source rectangle.
            </param>
            <param name="nHeightSrc">
            The height, in logical units, of the source rectangle.
            </param>
            <param name="dwRop">
            A raster-operation code. These codes define how the color data for the source rectangle is to be
            combined with the color data for the destination rectangle to achieve the final color.
            </param>
            <returns>
            True if the function succeeds; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.TaskDialogIndirect(Simphony.NativeMethods.TASKDIALOGCONFIG@,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Creates, displays, and operates a task dialog. The task dialog contains application-defined
            icons, messages, title, verification check box, command links, push buttons, and radio
            buttons. This function can register a callback function to receive notification messages.
            </summary>
            <param name="pTaskConfig">
            Pointer to a <see cref="T:Simphony.NativeMethods.TASKDIALOGCONFIG"/> structure that contains information used to
            display the task dialog.
            </param>
            <param name="pnButton">
            Receives the ID of the button that dismissed the dialog.
            </param>
            <param name="pnRadioButton">
            Receives the ID of the radio button that was selected when the dialog was dismissed.
            </param>
            <param name="pfVerificationFlagChecked">
            True if the verification checkbox was checked when the dialog was dismissed; false if the
            verification checkbox was not checked when the dialog was dismissed.
            </param>
            <returns>
            If this function succeeds, it returns <see cref="F:Simphony.NativeMethods.S_OK"/>. Otherwise, it returns an
            HRESULT error code.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.TextOut(System.IntPtr,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Writes a character string at the specified location, using the currently selected font,
            background color, and text color.
            </summary>
            <param name="hdc">
            A handle to the device context.
            </param>
            <param name="nXStart">
            The x-coordinate, in logical coordinates, of the reference point that the system uses
            to align the string.
            </param>
            <param name="nYStart">
            The y-coordinate, in logical coordinates, of the reference point that the system uses
            to align the string.
            </param>
            <param name="lpString">
            A pointer to the string to be drawn. The string does not need to be zero-terminated,
            because the next parameter specifies the length of the string.
            </param>
            <param name="cchString">
            The length of the string, in characters.
            </param>
            <returns>
            True if the function succeeds; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
            Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function.
            </summary>
            <param name="hhk">
            A handle to the hook to be removed. This parameter is a hook handle obtained by a
            previous call to <see cref="M:Simphony.NativeMethods.SetWindowsHookEx(System.Int32,Simphony.NativeMethods.HOOKPROC,System.IntPtr,System.UInt32)"/>.
            </param>
            <returns>
            True if the function succeeds; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.ValidateRect(System.IntPtr,Simphony.NativeMethods.RECT@)">
            <summary>
            Validates the client area within a rectangle by removing the rectangle from the update
            region of the specified window.
            </summary>
            <param name="hWnd">
            Handle to the window whose update region is to be modified. If this parameter is NULL, the
            system invalidates and redraws all windows and sends the <see cref="F:Simphony.NativeMethods.WM_ERASEBKGND"/> and
            <see cref="F:Simphony.NativeMethods.WM_NCPAINT"/> messages to the window procedure before the function returns.
            </param>
            <param name="lpRect">
            Pointer to a <see cref="T:Simphony.NativeMethods.RECT"/> structure that contains the client coordinates of the
            rectangle to be removed from the update region. If this parameter is NULL, the entire
            client area is removed.
            </param>
            <returns>
            True if the function succeeds; otherwise, false.
            </returns>
        </member>
        <member name="T:Simphony.NativeMethods.CHARFORMAT2">
            <summary>
            Contains information about character formatting in a rich edit control.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.cbSize">
            <summary>
            Size in bytes of the specified structure. This member must be set before passing the
            structure to the rich edit control.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.dwMask">
            <summary>
            Members containing valid information or attributes to set.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.dwEffects">
            <summary>
            Character effects.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.yHeight">
            <summary>
            Character height, in twips (1/1440 of an inch or 1/20 of a printer's point).
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.yOffset">
            <summary>
            Character offset, in twips, from the baseline. If the value of this member is
            positive, the character is a superscript; if it is negative, the character is a
            subscript.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.crTextColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.bCharSet">
            <summary>
            Character set value.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.bPitchAndFamily">
            <summary>
            Font family and pitch.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.szFaceName">
            <summary>
            Null-terminated character array specifying the font name.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.wWeight">
            <summary>
            Font weight.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.sSpacing">
            <summary>
            Horizontal space between letters, in twips. This value has no effect on the text
            displayed by a rich edit control; it is included for compatibility with Windows TOM
            interfaces.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.crBackColor">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.lcid">
            <summary>
            A 32-bit locale identifier that contains a language identifier in the lower word and
            a sorting identifier and reserved value in the upper word. This member has no effect
            on the text displayed by a rich edit control, but spelling and grammar checkers can
            use it to deal with language-dependent problems.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.dwReserved">
            <summary>
            Reserved; the value must be zero.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.sStyle">
            <summary>
            Character style handle. This value has no effect on the text displayed by a rich edit
            control; it is included for compatibility with WindowsTOM interfaces.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.wKerning">
            <summary>
            Value of the font size, above which to kern the character (<see cref="F:Simphony.NativeMethods.CHARFORMAT2.yHeight"/>).
            This value has no effect on the text displayed by a rich edit control; it is included
            for compatibility with TOM interfaces.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.bUnderlineType">
            <summary>
            Specifies the underline type.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.bAnimation">
            <summary>
            Text animation type. This value has no effect on the text displayed by a rich edit
            control; it is included for compatibility with TOM interfaces.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.bRevAuthor">
            <summary>
            An index that identifies the author making a revision. The rich edit control uses
            different text colors for each different author index.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARFORMAT2.bUnderlineColor">
            <summary>
            Underline color.
            </summary>
        </member>
        <member name="T:Simphony.NativeMethods.CHARRANGE">
            <summary>
            Specifies a range of characters in a rich edit control.
            </summary>
            <remarks>
            If the <see cref="F:Simphony.NativeMethods.CHARRANGE.cpMin"/> and <see cref="F:Simphony.NativeMethods.CHARRANGE.cpMax"/> members are equal, the range is empty.
            The range includes everything if <see cref="F:Simphony.NativeMethods.CHARRANGE.cpMin"/> is 0 and <see cref="F:Simphony.NativeMethods.CHARRANGE.cpMax"/> is –1.
            </remarks>
        </member>
        <member name="F:Simphony.NativeMethods.CHARRANGE.cpMin">
            <summary>
            Character position index immediately preceding the first character in the range.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CHARRANGE.cpMax">
            <summary>
            Character position immediately following the last character in the range.
            </summary>
        </member>
        <member name="T:Simphony.NativeMethods.COLORREF">
            <summary>
            Represents an RGB color value in the Windows API.
            </summary>
        </member>
        <member name="M:Simphony.NativeMethods.COLORREF.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.NativeMethods.COLORREF"/> structure.
            </summary>
            <param name="red">
            The red component value of the <see cref="T:Simphony.NativeMethods.COLORREF"/> structure.
            </param>
            <param name="green">
            The green component value of the <see cref="T:Simphony.NativeMethods.COLORREF"/> structure.
            </param>
            <param name="blue">
            The blue component value of the <see cref="T:Simphony.NativeMethods.COLORREF"/> structure.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if any of the components are outside of the range of 0 to 255.
            </exception>
        </member>
        <member name="P:Simphony.NativeMethods.COLORREF.B">
            <summary>
            Gets the blue component value of the COLORREF.
            </summary>
            <value>
            The blue component value of the COLORREF.
            </value>
        </member>
        <member name="P:Simphony.NativeMethods.COLORREF.G">
            <summary>
            Gets the green component value of the COLORREF.
            </summary>
            <value>
            The green component value of the COLORREF.
            </value>
        </member>
        <member name="P:Simphony.NativeMethods.COLORREF.R">
            <summary>
            Gets the red component value of the COLORREF.
            </summary>
            <value>
            The red component value of the COLORREF.
            </value>
        </member>
        <member name="M:Simphony.NativeMethods.COLORREF.op_Explicit(Simphony.NativeMethods.COLORREF)~System.Drawing.Color">
            <summary>
            Converts the specified COLORREF to an equivalent color.
            </summary>
            <param name="pColor">
            The COLORREF to be converted.
            </param>
            <returns>
            An equivalent color.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.COLORREF.op_Explicit(System.Drawing.Color)~Simphony.NativeMethods.COLORREF">
            <summary>
            Converts the specified color to an equivalent COLORREF.
            </summary>
            <param name="color">
            The color to be converted.
            </param>
            <returns>
            An equivalent COLORREF.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.COLORREF.op_Explicit(System.Int32)~Simphony.NativeMethods.COLORREF">
            <summary>
            Converts an unsigned integer to a COLORREF.
            </summary>
            <param name="value">
            The unsigned integer to be converted.
            </param>
            <returns>
            An equivalent COLORREF.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.COLORREF.op_Inequality(Simphony.NativeMethods.COLORREF,Simphony.NativeMethods.COLORREF)">
            <summary>
            Determines whether two <see cref="T:Simphony.NativeMethods.COLORREF"/> structures are unequal.
            </summary>
            <param name="left">
            The first <see cref="T:Simphony.NativeMethods.COLORREF"/> structure.
            </param>
            <param name="right">
            The second <see cref="T:Simphony.NativeMethods.COLORREF"/> structure.
            </param>
            <returns>
            True if the first <see cref="T:Simphony.NativeMethods.COLORREF"/> structure is unequal to the second
            <see cref="T:Simphony.NativeMethods.COLORREF"/> structure; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.COLORREF.op_Equality(Simphony.NativeMethods.COLORREF,Simphony.NativeMethods.COLORREF)">
            <summary>
            Determines whether two <see cref="T:Simphony.NativeMethods.COLORREF"/> structures are equal.
            </summary>
            <param name="left">
            The first <see cref="T:Simphony.NativeMethods.COLORREF"/> structure.
            </param>
            <param name="right">
            The second <see cref="T:Simphony.NativeMethods.COLORREF"/> structure.
            </param>
            <returns>
            True if the first <see cref="T:Simphony.NativeMethods.COLORREF"/> structure is equal to the second
            <see cref="T:Simphony.NativeMethods.COLORREF"/> structure; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.COLORREF.Equals(Simphony.NativeMethods.COLORREF)">
            <summary>
            Determines whether the current <see cref="T:Simphony.NativeMethods.COLORREF"/> structure is equal to a
            specified one.
            </summary>
            <param name="that">
            The <see cref="T:Simphony.NativeMethods.COLORREF"/> structure to which the current one is to be compared.
            </param>
            <returns>
            True if the current <see cref="T:Simphony.NativeMethods.COLORREF"/> structure is equal to the specified one;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.COLORREF.Equals(System.Object)">
            <summary>
            Determines whether the current object is equal to a specified one.
            </summary>
            <param name="obj">
            The object to which the current one is to be compared.
            </param>
            <returns>
            True if the current object is equal to the specified one; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.COLORREF.GetHashCode">
            <summary>
            Generates a hash code for the current object.
            </summary>
            <returns>
            A hash code for the object.
            </returns>
        </member>
        <member name="T:Simphony.NativeMethods.CWPSTRUCT">
            <summary>
            Defines the message parameters passed to a WH_CALLWNDPROC hook procedure.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CWPSTRUCT.lParam">
            <summary>
            Additional information about the message. The exact meaning depends on the
            <see cref="F:Simphony.NativeMethods.CWPSTRUCT.message"/> value.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CWPSTRUCT.wParam">
            <summary>
            Additional information about the message. The exact meaning depends on the
            <see cref="F:Simphony.NativeMethods.CWPSTRUCT.message"/> value.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CWPSTRUCT.message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.CWPSTRUCT.hwnd">
            <summary>
            A handle to the window to receive the message.
            </summary>
        </member>
        <member name="T:Simphony.NativeMethods.FORMATRANGE">
            <summary>
            Information that a rich edit control uses to format its output for a particular device.
            This structure is used with the <see cref="F:Simphony.NativeMethods.EM_FORMATRANGE"/> message.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.FORMATRANGE.hdc">
            <summary>
            An HDC for the device to render to, if <see cref="F:Simphony.NativeMethods.EM_FORMATRANGE"/> is being used to
            send the output to a device.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.FORMATRANGE.hdcTarget">
            <summary>
            An HDC for the target device to format for.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.FORMATRANGE.rc">
            <summary>
            The area within the <see cref="F:Simphony.NativeMethods.FORMATRANGE.rcPage"/> rectangle to render to. Units are measured
            in twips.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.FORMATRANGE.rcPage">
            <summary>
            The entire area of a page on the rendering device. Units are measured in twips.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.FORMATRANGE.chrg">
            <summary>
            The range of characters to format.
            </summary>
        </member>
        <member name="T:Simphony.NativeMethods.ICONINFO">
            <summary>
            Contains information about an icon or a cursor.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.ICONINFO.fIcon">
            <summary>
            Specifies whether this structure defines an icon or a cursor. A value of
            true specifies an icon; false specifies a cursor.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.ICONINFO.xHotspot">
            <summary>
            The x-coordinate of the cursor's hot spot. If this structure defines an icon,
            the hot spot is always in the center of the icon, and this member is ignored.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.ICONINFO.yHotspot">
            <summary>
            The y-coordinate of the cursor's hot spot. If this structure defines an icon,
            the hot spot is always in the center of the icon, and this member is ignored.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.ICONINFO.hbmMask">
            <summary>
            The icon bitmask bitmap. If this structure defines a black and white icon,
            this bitmask is formatted so that the upper half is the icon AND bitmask
            and the lower half is the icon XOR bitmask. Under this condition, the
            height should be an even multiple of two. If this structure defines a color
            icon, this mask only defines the AND bitmask of the icon.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.ICONINFO.hbmColor">
            <summary>
            A handle to the icon color bitmap. This member can be optional if this
            structure defines a black and white icon. The AND bitmask of <see cref="F:Simphony.NativeMethods.ICONINFO.hbmMask"/>
            is applied with the <see cref="F:Simphony.NativeMethods.SRCAND"/> flag to the destination;
            subsequently, the color bitmap is applied (using XOR) to the destination by
            using the <see cref="F:Simphony.NativeMethods.SRCINVERT"/> flag.
            </summary>
        </member>
        <member name="T:Simphony.NativeMethods.MEMORYSTATUSEX">
            <summary>
            Contains information about the current state of both physical and virtual memory, including
            extended memory. The GlobalMemoryStatusEx function stores information in this structure.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.MEMORYSTATUSEX.dwLength">
            <summary>
            The size of the structure, in bytes.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.MEMORYSTATUSEX.dwMemoryLoad">
            <summary>
            A number between 0 and 100 that specifies the approximate percentage of physical memory
            that is in use (0 indicates no memory use and 100 indicates full memory use).
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.MEMORYSTATUSEX.ullTotalPhys">
            <summary>
            The amount of actual physical memory, in bytes.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.MEMORYSTATUSEX.ullAvailPhys">
            <summary>
            The amount of physical memory currently available, in bytes. This is the amount of physical
            memory that can be immediately reused without having to write its contents to disk first. It
            is the sum of the size of the standby, free, and zero lists.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.MEMORYSTATUSEX.ullTotalPageFile">
            <summary>
            The current committed memory limit for the system or the current process, whichever is
            smaller, in bytes. To get the system-wide committed memory limit, call
            GetPerformanceInfo.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.MEMORYSTATUSEX.ullAvailPageFile">
            <summary>
            The maximum amount of memory the current process can commit, in bytes. This value is equal
            to or smaller than the system-wide available commit value. To calculate the system-wide
            available commit value, call GetPerformanceInfo and subtract the value of CommitTotal from
            the value of CommitLimit.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.MEMORYSTATUSEX.ullTotalVirtual">
            <summary>
            The size of the user-mode portion of the virtual address space of the calling process, in
            bytes. This value depends on the type of process, the type of processor, and the configuration
            of the operating system. For example, this value is approximately 2 GB for most 32-bit
            processes on an x86 processor and approximately 3 GB for 32-bit processes that are large
            address aware running on a system with 4-gigabyte tuning enabled.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.MEMORYSTATUSEX.ullAvailVirtual">
            <summary>
            The amount of unreserved and uncommitted memory currently in the user-mode portion of the
            virtual address space of the calling process, in bytes.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.MEMORYSTATUSEX.ullAvailExtendedVirtual">
            <summary>
            Reserved. This value is always 0.
            </summary>
        </member>
        <member name="T:Simphony.NativeMethods.NCCALCSIZE_PARAMS">
            <summary>
            Contains information that an application can use while processing the
            <see cref="F:Simphony.NativeMethods.WM_NCCALCSIZE"/> message to calculate the size, position, and valid contents
            of the client area of a window.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.NCCALCSIZE_PARAMS.rgrc">
            <summary>
            An array of rectangles. The meaning of the array of rectangles changes during the
            processing of the <see cref="F:Simphony.NativeMethods.WM_NCCALCSIZE"/> message.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.NCCALCSIZE_PARAMS.lppos">
            <summary>
            A pointer to a <see cref="T:Simphony.NativeMethods.WINDOWPOS"/> structure that contains the size and position
            values specified in the operation that moved or resized the window.
            </summary>
        </member>
        <member name="T:Simphony.NativeMethods.PAINTSTRUCT">
            <summary>
            A Windows API structure that contains information that an application uses to paint the client area of a
            window owned by that application.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PAINTSTRUCT.hdc">
            <summary>
            A handle to the display DC to be used for painting.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PAINTSTRUCT.fErase">
            <summary>
            A value indicating whether or not the background should be erased.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PAINTSTRUCT.rcPaint">
            <summary>
            A rectangle specifying the area in which the painting is requested.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PAINTSTRUCT.fRestore">
            <summary>
            Reserved; used internally by the system.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PAINTSTRUCT.fIncUpdate">
            <summary>
            Reserved; used internally by the system.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PAINTSTRUCT.rgbReserved">
            <summary>
            Reserved; used internally by the system.
            </summary>
        </member>
        <member name="T:Simphony.NativeMethods.PARAFORMAT2">
            <summary>
            Contains information about paragraph formatting attributes in a rich edit control.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.cbSize">
            <summary>
            Structure size, in bytes. The member must be filled before passing to the rich edit
            control.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.dwMask">
            <summary>
            Members containing valid information or attributes to set.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.wNumbering">
            <summary>
            Value specifying numbering options.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.wReserved">
            <summary>
            This member is named reserved.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.dxStartIndent">
            <summary>
            Indentation of the first line in the paragraph, in twips. If the paragraph formatting
            is being set and <see cref="F:Simphony.NativeMethods.PFM_OFFSETINDENT"/> is specified, this member is treated
            as a relative value that is added to the starting indentation of each affected
            paragraph.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.dxRightIndent">
            <summary>
            Size, of the right indentation relative to the right margin, in twips.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.dxOffset">
            <summary>
            Indentation of the second and subsequent lines of a paragraph relative to the
            starting indentation, in twips. The first line is indented if this member is negative
            or outdented if this member is positive.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.wAlignment">
            <summary>
            Value specifying the paragraph alignment.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.cTabCount">
            <summary>
            Number of tab stops.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.rgxTabs">
            <summary>
            Array of absolute tab stop positions. Each element in the array specifies information
            about a tab stop. The 24 low-order bits specify the absolute offset, in twips. To use
            this member, set the <see cref="F:Simphony.NativeMethods.PFM_TABSTOPS"/> flag in the <see cref="F:Simphony.NativeMethods.PARAFORMAT2.dwMask"/>
            member.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.dySpaceBefore">
            <summary>
            Size of the spacing above the paragraph, in twips. To use this member, set the
            <see cref="F:Simphony.NativeMethods.PFM_SPACEBEFORE"/> flag in the <see cref="F:Simphony.NativeMethods.PARAFORMAT2.dwMask"/> member. The value must
            be greater than or equal to zero.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.dySpaceAfter">
            <summary>
            Specifies the size of the spacing below the paragraph, in twips. To use this member,
            set the <see cref="F:Simphony.NativeMethods.PFM_SPACEAFTER"/> flag in the <see cref="F:Simphony.NativeMethods.PARAFORMAT2.dwMask"/> member. The
            value must be greater than or equal to zero.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.dyLineSpacing">
            <summary>
            Spacing between lines. For a description of how this value is interpreted, see the
            <see cref="F:Simphony.NativeMethods.PARAFORMAT2.bLineSpacingRule"/> member. To use this member, set the
            <see cref="F:Simphony.NativeMethods.PFM_LINESPACING"/> flag in the <see cref="F:Simphony.NativeMethods.PARAFORMAT2.dwMask"/> member.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.sStyle">
            <summary>
            Text style. To use this member, set the <see cref="F:Simphony.NativeMethods.PFM_STYLE"/> flag in the
            <see cref="F:Simphony.NativeMethods.PARAFORMAT2.dwMask"/> member. This member is included only for compatibility with TOM
            interfaces and Word; the rich edit control stores the value but does not use it to
            display the text.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.bLineSpacingRule">
            <summary>
            Type of line spacing. To use this member, set the <see cref="F:Simphony.NativeMethods.PFM_LINESPACING"/> flag
            in the <see cref="F:Simphony.NativeMethods.PARAFORMAT2.dwMask"/> member.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.bOutlineLevel">
            <summary>
            Reserved; must be zero.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.wShadingWeight">
            <summary>
            Percentage foreground color used in shading. The <see cref="F:Simphony.NativeMethods.PARAFORMAT2.wShadingStyle"/> member
            specifies the foreground and background shading colors. A value of 5 indicates a
            shading color consisting of 5 percent foreground color and 95 percent background
            color. To use these members, set the <see cref="F:Simphony.NativeMethods.PFM_SHADING"/> flag in the
            <see cref="F:Simphony.NativeMethods.PARAFORMAT2.dwMask"/> member. This member is included only for compatibility with
            Word; the rich edit control stores the value but does not use it to display the text.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.wShadingStyle">
            <summary>
            Style and colors used for background shading. Bits 0 to 3 contain the shading style,
            bits 4 to 7 contain the foreground color index, and bits 8 to 11 contain the
            background color index. To use this member, set the <see cref="F:Simphony.NativeMethods.PFM_SHADING"/> flag in
            the <see cref="F:Simphony.NativeMethods.PARAFORMAT2.dwMask"/> member. This member is included only for compatibility with
            Word; the rich edit control stores the value but does not use it to display the text.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.wNumberingStart">
            <summary>
            Starting number or Unicode value used for numbered paragraphs. Use this member in
            conjunction with the <see cref="F:Simphony.NativeMethods.PARAFORMAT2.wNumbering"/> member. This member is included only
            for compatibility with TOM interfaces; the rich edit control stores the value but
            does not use it to display the text or bullets. To use this member, set the
            <see cref="F:Simphony.NativeMethods.PFM_NUMBERINGSTART"/> flag in the <see cref="F:Simphony.NativeMethods.PARAFORMAT2.dwMask"/> member.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.wNumberingStyle">
            <summary>
            Numbering style used with numbered paragraphs. Use this member in conjunction with
            the <see cref="F:Simphony.NativeMethods.PARAFORMAT2.wNumbering"/> member. This member is included only for compatibility
            with TOM interfaces; the rich edit control stores the value but rich edit versions
            earlier than 3.0 do not use it to display the text or bullets. To use this member,
            set the <see cref="F:Simphony.NativeMethods.PFM_NUMBERINGSTYLE"/> flag in the <see cref="F:Simphony.NativeMethods.PARAFORMAT2.dwMask"/> member.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.wNumberingTab">
            <summary>
            Minimum space between a paragraph number and the paragraph text, in twips. Use this
            member in conjunction with the wNumbering member. The <see cref="F:Simphony.NativeMethods.PARAFORMAT2.wNumberingTab"/>
            member is included for compatibility with TOM interfaces; previous to Microsoft Rich
            Edit 3.0, the rich edit control stores the value but does not use it to display text.
            To use this member, set the <see cref="F:Simphony.NativeMethods.PFM_NUMBERINGTAB"/> flag in the
            <see cref="F:Simphony.NativeMethods.PARAFORMAT2.dwMask"/> member.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.wBorderSpace">
            <summary>
            The space between the border and the paragraph text, in twips. The
            <see cref="F:Simphony.NativeMethods.PARAFORMAT2.wBorderSpace"/> member is included for compatibility with Word; the rich
            edit control stores the values but does not use them to display text. To use this
            member, set the <see cref="F:Simphony.NativeMethods.PFM_BORDER"/> flag in the <see cref="F:Simphony.NativeMethods.PARAFORMAT2.dwMask"/> member.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.wBorderWidth">
            <summary>
            Border width, in twips. To use this member, set the <see cref="F:Simphony.NativeMethods.PFM_BORDER"/> flag in
            the <see cref="F:Simphony.NativeMethods.PARAFORMAT2.dwMask"/> member.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.PARAFORMAT2.wBorders">
            <summary>
            Border location, style, and color. Bits 0 to 7 specify the border locations, bits 8
            to 11 specify the border style, and bits 12 to 15 specify the border color index. To
            use this member, set the <see cref="F:Simphony.NativeMethods.PFM_BORDER"/> flag in the <see cref="F:Simphony.NativeMethods.PARAFORMAT2.dwMask"/>
            member.
            </summary>
        </member>
        <member name="T:Simphony.NativeMethods.POINT">
            <summary>
            Specifies the x- and y- coordinates of a point in the Windows API.
            </summary>
        </member>
        <member name="M:Simphony.NativeMethods.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.NativeMethods.POINT"/> structure.
            </summary>
            <param name="x">
            The x-coordinate of the point.
            </param>
            <param name="y">
            The y-coordinate of the point.
            </param>
        </member>
        <member name="P:Simphony.NativeMethods.POINT.X">
            <summary>
            Gets or sets the x-coordinate of the point.
            </summary>
            <value>
            The x-coordinate of the point.
            </value>
        </member>
        <member name="P:Simphony.NativeMethods.POINT.Y">
            <summary>
            Gets or sets the y-coordinate of the point.
            </summary>
            <value>
            The y-coordinate of the point.
            </value>
        </member>
        <member name="M:Simphony.NativeMethods.POINT.op_Explicit(System.Drawing.Point)~Simphony.NativeMethods.POINT">
            <summary>
            Converts the specified <see cref="T:System.Drawing.Point"/> to an equivalent <see cref="T:Simphony.NativeMethods.POINT"/>.
            </summary>
            <param name="point">
            The <see cref="T:System.Drawing.Point"/> to be converted.
            </param>
            <returns>
            An equivalent <see cref="T:Simphony.NativeMethods.POINT"/>.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.POINT.op_Explicit(Simphony.NativeMethods.POINT)~System.Drawing.Point">
            <summary>
            Converts the specified <see cref="T:Simphony.NativeMethods.POINT"/> to an equivalent <see cref="T:System.Drawing.Point"/>.
            </summary>
            <param name="point">
            The <see cref="T:Simphony.NativeMethods.POINT"/> to be converted.
            </param>
            <returns>
            An equivalent <see cref="T:System.Drawing.Point"/>.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.POINT.op_Inequality(Simphony.NativeMethods.POINT,Simphony.NativeMethods.POINT)">
            <summary>
            Determines whether two <see cref="T:Simphony.NativeMethods.POINT"/> structures are unequal.
            </summary>
            <param name="left">
            The first <see cref="T:Simphony.NativeMethods.POINT"/> structure.
            </param>
            <param name="right">
            The second <see cref="T:Simphony.NativeMethods.POINT"/> structure.
            </param>
            <returns>
            True if the first <see cref="T:Simphony.NativeMethods.POINT"/> structure is unequal to the second
            <see cref="T:Simphony.NativeMethods.POINT"/> structure; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.POINT.op_Equality(Simphony.NativeMethods.POINT,Simphony.NativeMethods.POINT)">
            <summary>
            Determines whether two <see cref="T:Simphony.NativeMethods.POINT"/> structures are equal.
            </summary>
            <param name="left">
            The first <see cref="T:Simphony.NativeMethods.POINT"/> structure.
            </param>
            <param name="right">
            The second <see cref="T:Simphony.NativeMethods.POINT"/> structure.
            </param>
            <returns>
            True if the first <see cref="T:Simphony.NativeMethods.POINT"/> structure is equal to the second
            <see cref="T:Simphony.NativeMethods.POINT"/> structure; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.POINT.Equals(System.Object)">
            <summary>
            Determines whether the current object is equal to a specified one.
            </summary>
            <param name="obj">
            The object to which the current one is to be compared.
            </param>
            <returns>
            True if the current object is equal to the specified one; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.POINT.Equals(Simphony.NativeMethods.POINT)">
            <summary>
            Determines whether the current <see cref="T:Simphony.NativeMethods.POINT"/> structure is equal to a specified one.
            </summary>
            <param name="that">
            The <see cref="T:Simphony.NativeMethods.POINT"/> structure to which the current one is to be compared.
            </param>
            <returns>
            True if the current <see cref="T:Simphony.NativeMethods.POINT"/> structure is equal to the specified one; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.POINT.GetHashCode">
            <summary>
            Generates a hash code for the current object.
            </summary>
            <returns>
            A hash code for the object.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.POINT.ToString">
            <summary>
            Converts the current object to a string.
            </summary>
            <returns>
            A string representing the current object.
            </returns>
        </member>
        <member name="T:Simphony.NativeMethods.RECT">
            <summary>
            Represents the location and size of a rectangle in the Windows API.
            </summary>
        </member>
        <member name="M:Simphony.NativeMethods.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.NativeMethods.RECT"/> structure.
            </summary>
            <param name="left">
            The x-coordinate of the upper-left corner of the rectangle.
            </param>
            <param name="top">
            The y-coordinate of the upper-left corner of the rectangle.
            </param>
            <param name="right">
            The x-coordinate of the lower-right corner of the rectangle.
            </param>
            <param name="bottom">
            The y-coordinate of the lower-right corner of the rectangle.
            </param>
        </member>
        <member name="M:Simphony.NativeMethods.RECT.#ctor(System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.NativeMethods.RECT"/> structure.
            </summary>
            <param name="location">
            The location of the upper-left corner of the rectangle.
            </param>
            <param name="size">
            The size of the rectangle.
            </param>
        </member>
        <member name="P:Simphony.NativeMethods.RECT.Bottom">
            <summary>
            Gets or sets the y-coordinate of the lower-right corner of the rectangle.
            </summary>
            <value>
            The y-coordinate of the lower-right corner of the rectangle.
            </value>
        </member>
        <member name="P:Simphony.NativeMethods.RECT.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
            <value>
            The height of the rectangle.
            </value>
        </member>
        <member name="P:Simphony.NativeMethods.RECT.Left">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of the rectangle.
            </summary>
            <value>
            The x-coordinate of the upper-left corner of the rectangle.
            </value>
        </member>
        <member name="P:Simphony.NativeMethods.RECT.Location">
            <summary>
            Gets or sets the location of the upper-left corner of the rectangle.
            </summary>
            <value>
            The location of the upper-left corner of the rectangle.
            </value>
        </member>
        <member name="P:Simphony.NativeMethods.RECT.Right">
            <summary>
            Gets or sets the x-coordinate of the lower-right corner of the rectangle.
            </summary>
            <value>
            The x-coordinate of the lower-right corner of the rectangle.
            </value>
        </member>
        <member name="P:Simphony.NativeMethods.RECT.Size">
            <summary>
            Gets or sets the size of the rectangle.
            </summary>
            <value>
            The size of the rectangle.
            </value>
        </member>
        <member name="P:Simphony.NativeMethods.RECT.Top">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of the rectangle.
            </summary>
            <value>
            The y-coordinate of the upper-left corner of the rectangle.
            </value>
        </member>
        <member name="P:Simphony.NativeMethods.RECT.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
            <value>
            The width of the rectangle.
            </value>
        </member>
        <member name="P:Simphony.NativeMethods.RECT.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of the rectangle.
            </summary>
            <value>
            The x-coordinate of the upper-left corner of the rectangle.
            </value>
        </member>
        <member name="P:Simphony.NativeMethods.RECT.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of the rectangle.
            </summary>
            <value>
            The y-coordinate of the upper-left corner of the rectangle.
            </value>
        </member>
        <member name="M:Simphony.NativeMethods.RECT.op_Explicit(System.Drawing.Rectangle)~Simphony.NativeMethods.RECT">
            <summary>
            Converts the specified <see cref="M:Simphony.NativeMethods.Rectangle(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)"/> to an equivalent <see cref="T:Simphony.NativeMethods.RECT"/>.
            </summary>
            <param name="rectangle">
            The <see cref="M:Simphony.NativeMethods.Rectangle(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)"/> to be converted.
            </param>
            <returns>
            An equivalent <see cref="T:Simphony.NativeMethods.RECT"/>.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.RECT.op_Explicit(Simphony.NativeMethods.RECT)~System.Drawing.Rectangle">
            <summary>
            Converts the specified <see cref="T:Simphony.NativeMethods.RECT"/> to an equivalent <see cref="M:Simphony.NativeMethods.Rectangle(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)"/>.
            </summary>
            <param name="rect">
            The <see cref="T:Simphony.NativeMethods.RECT"/> to be converted.
            </param>
            <returns>
            An equivalent <see cref="M:Simphony.NativeMethods.Rectangle(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)"/>.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.RECT.op_Inequality(Simphony.NativeMethods.RECT,Simphony.NativeMethods.RECT)">
            <summary>
            Determines whether two <see cref="T:Simphony.NativeMethods.RECT"/> structures are unequal.
            </summary>
            <param name="left">
            The first <see cref="T:Simphony.NativeMethods.RECT"/> structure.
            </param>
            <param name="right">
            The second <see cref="T:Simphony.NativeMethods.RECT"/> structure.
            </param>
            <returns>
            True if the first <see cref="T:Simphony.NativeMethods.RECT"/> structure is unequal to the second
            <see cref="T:Simphony.NativeMethods.RECT"/> structure; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.RECT.op_Equality(Simphony.NativeMethods.RECT,Simphony.NativeMethods.RECT)">
            <summary>
            Determines whether two <see cref="T:Simphony.NativeMethods.RECT"/> structures are equal.
            </summary>
            <param name="left">
            The first <see cref="T:Simphony.NativeMethods.RECT"/> structure.
            </param>
            <param name="right">
            The second <see cref="T:Simphony.NativeMethods.RECT"/> structure.
            </param>
            <returns>
            True if the first <see cref="T:Simphony.NativeMethods.RECT"/> structure is equal to the second
            <see cref="T:Simphony.NativeMethods.RECT"/> structure; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.RECT.Equals(System.Object)">
            <summary>
            Determines whether the current object is equal to a specified one.
            </summary>
            <param name="obj">
            The object to which the current one is to be compared.
            </param>
            <returns>
            True if the current object is equal to the specified one; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.RECT.Equals(Simphony.NativeMethods.RECT)">
            <summary>
            Determines whether the current <see cref="T:Simphony.NativeMethods.RECT"/> structure is equal to a specified one.
            </summary>
            <param name="that">
            The <see cref="T:Simphony.NativeMethods.RECT"/> structure to which the current one is to be compared.
            </param>
            <returns>
            True if the current <see cref="T:Simphony.NativeMethods.RECT"/> structure is equal to the specified one; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.RECT.GetHashCode">
            <summary>
            Generates a hash code for the current object.
            </summary>
            <returns>
            A hash code for the object.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.RECT.ToString">
            <summary>
            Converts the current object to a string.
            </summary>
            <returns>
            A string representing the current object.
            </returns>
        </member>
        <member name="T:Simphony.NativeMethods.SCROLLINFO">
            <summary>
            The <see cref="T:Simphony.NativeMethods.SCROLLINFO"/> structure contains scroll bar parameters to be set by the
            <see cref="M:Simphony.NativeMethods.SetScrollInfo(System.IntPtr,System.Int32,Simphony.NativeMethods.SCROLLINFO@,System.Boolean)"/> function (or <see cref="F:Simphony.NativeMethods.SBM_SETSCROLLINFO"/> message), or
            retrieved by the <see cref="M:Simphony.NativeMethods.GetScrollInfo(System.IntPtr,System.Int32,Simphony.NativeMethods.SCROLLINFO@)"/> function (or
            <see cref="F:Simphony.NativeMethods.SBM_GETSCROLLINFO"/> message).
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.SCROLLINFO.cbSize">
            <summary>
            Specifies the size, in bytes, of this structure. The caller must set this to sizeof(SCROLLINFO).
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.SCROLLINFO.fMask">
            <summary>
            Specifies the scroll bar parameters to set or retrieve.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.SCROLLINFO.nMin">
            <summary>
            Specifies the minimum scrolling position.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.SCROLLINFO.nMax">
            <summary>
            Specifies the maximum scrolling position.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.SCROLLINFO.nPage">
            <summary>
            Specifies the page size, in device units. A scroll bar uses this value to determine the
            appropriate size of the proportional scroll box.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.SCROLLINFO.nPos">
            <summary>
            Specifies the position of the scroll box.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.SCROLLINFO.nTrackPos">
            <summary>
            Specifies the immediate position of a scroll box that the user is dragging. An application
            can retrieve this value while processing the <see cref="F:Simphony.NativeMethods.SB_THUMBTRACK"/> request code. An
            application cannot set the immediate scroll position; the <see cref="M:Simphony.NativeMethods.SetScrollInfo(System.IntPtr,System.Int32,Simphony.NativeMethods.SCROLLINFO@,System.Boolean)"/>
            function ignores this member.
            </summary>
        </member>
        <member name="T:Simphony.NativeMethods.SIZE">
            <summary>
            Specifies the width and height of a rectangle in the Windows API.
            </summary>
        </member>
        <member name="M:Simphony.NativeMethods.SIZE.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Simphony.NativeMethods.SIZE"/> structure.
            </summary>
            <param name="cx">
            The rectangle's width.
            </param>
            <param name="cy">
            The rectangle's height.
            </param>
        </member>
        <member name="P:Simphony.NativeMethods.SIZE.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
            <value>
            The height of the rectangle.
            </value>
        </member>
        <member name="P:Simphony.NativeMethods.SIZE.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
            <value>
            The width of the rectangle.
            </value>
        </member>
        <member name="M:Simphony.NativeMethods.SIZE.op_Explicit(System.Drawing.Size)~Simphony.NativeMethods.SIZE">
            <summary>
            Converts the specified <see cref="T:System.Drawing.Size"/> to an equivalent <see cref="T:Simphony.NativeMethods.SIZE"/>.
            </summary>
            <param name="size">
            The <see cref="T:System.Drawing.Size"/> to be converted.
            </param>
            <returns>
            An equivalent <see cref="T:Simphony.NativeMethods.SIZE"/>.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SIZE.op_Explicit(Simphony.NativeMethods.SIZE)~System.Drawing.Size">
            <summary>
            Converts the specified <see cref="T:Simphony.NativeMethods.SIZE"/> to an equivalent <see cref="T:System.Drawing.Size"/>.
            </summary>
            <param name="size">
            The <see cref="T:Simphony.NativeMethods.SIZE"/> to be converted.
            </param>
            <returns>
            An equivalent <see cref="T:System.Drawing.Size"/>.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SIZE.op_Inequality(Simphony.NativeMethods.SIZE,Simphony.NativeMethods.SIZE)">
            <summary>
            Determines whether two <see cref="T:Simphony.NativeMethods.SIZE"/> structures are unequal.
            </summary>
            <param name="left">
            The first <see cref="T:Simphony.NativeMethods.SIZE"/> structure.
            </param>
            <param name="right">
            The second <see cref="T:Simphony.NativeMethods.SIZE"/> structure.
            </param>
            <returns>
            True if the first <see cref="T:Simphony.NativeMethods.SIZE"/> structure is unequal to the second
            <see cref="T:Simphony.NativeMethods.SIZE"/> structure; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SIZE.op_Equality(Simphony.NativeMethods.SIZE,Simphony.NativeMethods.SIZE)">
            <summary>
            Determines whether two <see cref="T:Simphony.NativeMethods.SIZE"/> structures are equal.
            </summary>
            <param name="left">
            The first <see cref="T:Simphony.NativeMethods.SIZE"/> structure.
            </param>
            <param name="right">
            The second <see cref="T:Simphony.NativeMethods.SIZE"/> structure.
            </param>
            <returns>
            True if the first <see cref="T:Simphony.NativeMethods.SIZE"/> structure is equal to the second
            <see cref="T:Simphony.NativeMethods.SIZE"/> structure; otherwise, false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SIZE.Equals(System.Object)">
            <summary>
            Determines whether the current object is equal to a specified one.
            </summary>
            <param name="obj">
            The object to which the current one is to be compared.
            </param>
            <returns>
            True if the current object is equal to the specified one; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SIZE.Equals(Simphony.NativeMethods.SIZE)">
            <summary>
            Determines whether the current <see cref="T:Simphony.NativeMethods.SIZE"/> structure is equal to a specified one.
            </summary>
            <param name="that">
            The <see cref="T:Simphony.NativeMethods.SIZE"/> structure to which the current one is to be compared.
            </param>
            <returns>
            True if the current <see cref="T:Simphony.NativeMethods.SIZE"/> structure is equal to the specified one; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SIZE.GetHashCode">
            <summary>
            Generates a hash code for the current object.
            </summary>
            <returns>
            A hash code for the object.
            </returns>
        </member>
        <member name="M:Simphony.NativeMethods.SIZE.ToString">
            <summary>
            Converts the current object to a string.
            </summary>
            <returns>
            A string representing the current object.
            </returns>
        </member>
        <member name="T:Simphony.NativeMethods.TASKDIALOG_BUTTON">
            <summary>
            The <see cref="T:Simphony.NativeMethods.TASKDIALOG_BUTTON"/> structure contains information used to display a
            button in a task dialog. The <see cref="T:Simphony.NativeMethods.TASKDIALOGCONFIG"/> structure uses this
            structure.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOG_BUTTON.nButtonID">
            <summary>
            Indicates the value to be returned when this button is selected.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOG_BUTTON.pszButtonText">
            <summary>
            Pointer that references the string to be used to label the button.
            </summary>
        </member>
        <member name="T:Simphony.NativeMethods.TASKDIALOGCONFIG">
            <summary>
            The <see cref="T:Simphony.NativeMethods.TASKDIALOGCONFIG"/> structure contains information used to display a task
            dialog. The <see cref="M:Simphony.NativeMethods.TaskDialogIndirect(Simphony.NativeMethods.TASKDIALOGCONFIG@,System.Int32@,System.Int32@,System.Boolean@)"/> function uses this structure.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.cbSize">
            <summary>
            Specifies the structure size, in bytes.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.hwndParent">
            <summary>
            Handle to the parent window. This member can be NULL.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.hInstance">
            <summary>
            Handle to the parent window. This member can be NULL.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.dwFlags">
            <summary>
            Flags specifying the behavior of the task dialog.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.dwCommonButtons">
            <summary>
            Flags specifying the push buttons displayed in the task dialog. If no common buttons
            are specified and no custom buttons are specified using the <see cref="F:Simphony.NativeMethods.TASKDIALOGCONFIG.cButtons"/>
            and <see cref="F:Simphony.NativeMethods.TASKDIALOGCONFIG.pButtons"/> members, the task dialog will contain the OK button by
            default.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.pszWindowTitle">
            <summary>
            Pointer that references the string to be used for the task dialog title.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.hMainIcon">
            <summary>
            A handle to an Icon that is to be displayed in the task dialog. This member is
            ignored unless the <see cref="F:Simphony.NativeMethods.TDF_USE_HICON_MAIN"/> flag is specified. If this member
            is NULL and the <see cref="F:Simphony.NativeMethods.TDF_USE_HICON_MAIN"/> is specified, no icon will be
            displayed.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.pszMainInstruction">
            <summary>
            Pointer that references the string to be used for the main instruction.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.pszContent">
            <summary>
            Pointer that references the string to be used for the dialog's primary content. If
            the <see cref="F:Simphony.NativeMethods.TDF_ENABLE_HYPERLINKS"/> flag is specified, then this string may
            contain HTML type hyperlinks.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.cButtons">
            <summary>
            The number of entries in the <see cref="F:Simphony.NativeMethods.TASKDIALOGCONFIG.pButtons"/> array that is used to create
            buttons or command links in the task dialog. If this member is zero and no common
            buttons have been specified using the <see cref="F:Simphony.NativeMethods.TASKDIALOGCONFIG.dwCommonButtons"/> member, then the
            task dialog will have a single OK button displayed.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.pButtons">
            <summary>
            Pointer to an array of <see cref="T:Simphony.NativeMethods.TASKDIALOG_BUTTON"/> structures containing the
            definition of the custom buttons that are to be displayed in the task dialog. This
            array must contain at least the number of entries that are specified by the
            <see cref="F:Simphony.NativeMethods.TASKDIALOGCONFIG.cButtons"/> member.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.nDefaultButton">
            <summary>
            The default button for the task dialog. This may be any of the values specified in
            <see cref="F:Simphony.NativeMethods.TASKDIALOG_BUTTON.nButtonID"/> members of one of the
            <see cref="T:Simphony.NativeMethods.TASKDIALOG_BUTTON"/> structures in the <see cref="F:Simphony.NativeMethods.TASKDIALOGCONFIG.pButtons"/> array, or one of
            the IDs corresponding to the buttons specified in the <see cref="F:Simphony.NativeMethods.TASKDIALOGCONFIG.dwCommonButtons"/>
            member.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.cRadioButtons">
            <summary>
            The number of entries in the <see cref="F:Simphony.NativeMethods.TASKDIALOGCONFIG.pRadioButtons"/> array that is used to create
            radio buttons in the task dialog.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.pRadioButtons">
            <summary>
            Pointer to an array of <see cref="T:Simphony.NativeMethods.TASKDIALOG_BUTTON"/> structures containing the
            definition of the radio buttons that are to be displayed in the task dialog. This
            array must contain at least the number of entries that are specified by the
            <see cref="F:Simphony.NativeMethods.TASKDIALOGCONFIG.cRadioButtons"/> member. This parameter can be NULL.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.nDefaultRadioButton">
            <summary>
            The button ID of the radio button that is selected by default. If this value does not
            correspond to a button ID, the first button in the array is selected by default.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.pszVerificationText">
            <summary>
            Pointer that references the string to be used to label the verification checkbox.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.pszExpandedInformation">
            <summary>
            Pointer that references the string to be used for displaying additional information.
            If the <see cref="F:Simphony.NativeMethods.TDF_ENABLE_HYPERLINKS"/> flag is specified, then this string may
            contain HTML type hyperlinks.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.pszExpandedControlText">
            <summary>
            Pointer that references the string to be used to label the button for collapsing the
            expandable information.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.pszCollapsedControlText">
            <summary>
            Pointer that references the string to be used to label the button for expanding the
            expandable information.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.hFooterIcon">
            <summary>
            A handle to an Icon that is to be displayed in the footer of the task dialog. This
            member is ignored unless the <see cref="F:Simphony.NativeMethods.TDF_USE_HICON_FOOTER"/> flag is specified. If
            this member is NULL and the <see cref="F:Simphony.NativeMethods.TDF_USE_HICON_FOOTER"/> is specified, no icon
            is displayed.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.pszFooter">
            <summary>
            Pointer to the string to be used in the footer area of the task dialog. If the
            <see cref="F:Simphony.NativeMethods.TDF_ENABLE_HYPERLINKS"/> flag is specified, then this string may contain
            HTML type hyperlinks.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.pfCallback">
            <summary>
            Pointer to an application-defined callback function. For more information see
            <see cref="T:Simphony.NativeMethods.TaskDialogCallbackProc"/>.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.lpCallbackData">
            <summary>
            A pointer to application-defined reference data. This value is defined by the caller.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.TASKDIALOGCONFIG.cxWidth">
            <summary>
            The width of the task dialog's client area, in dialog units. If 0, the task dialog
            manager will calculate the ideal width.
            </summary>
        </member>
        <member name="T:Simphony.NativeMethods.WINDOWPLACEMENT">
            <summary>
            Contains information about the placement of a window on the screen.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.WINDOWPLACEMENT.length">
            <summary>
            The length of the structure, in bytes.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.WINDOWPLACEMENT.flags">
            <summary>
            The flags that control the position of the minimized window and the method by which
            the window is restored.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.WINDOWPLACEMENT.showCmd">
            <summary>
            The current show state of the window.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.WINDOWPLACEMENT.ptMinPosition">
            <summary>
            The coordinates of the window's upper-left corner when the window is minimized.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.WINDOWPLACEMENT.ptMaxPosition">
            <summary>
            The coordinates of the window's upper-left corner when the window is maximized.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.WINDOWPLACEMENT.rcNormalPosition">
            <summary>
            The window's coordinates when the window is in the restored position.
            </summary>
        </member>
        <member name="T:Simphony.NativeMethods.WINDOWPOS">
            <summary>
            Contains information about the size and position of a window.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.WINDOWPOS.hwnd">
            <summary>
            A handle to the window.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.WINDOWPOS.hwndInsertAfter">
            <summary>
            The position of the window in Z order (front-to-back position). This member can be a
            handle to the window behind which this window is placed, or can be one of the special
            values listed with the <see cref="M:Simphony.NativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)"/> function.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.WINDOWPOS.x">
            <summary>
            The position of the left edge of the window.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.WINDOWPOS.y">
            <summary>
            The position of the top edge of the window.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.WINDOWPOS.cx">
            <summary>
            The window width, in pixels.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.WINDOWPOS.cy">
            <summary>
            The window height, in pixels.
            </summary>
        </member>
        <member name="F:Simphony.NativeMethods.WINDOWPOS.flags">
            <summary>
            The window position.
            </summary>
        </member>
        <member name="T:Simphony.ResourcesExtensions">
            <summary>
            Extension methods for the System.Resources namespace.
            </summary>
        </member>
        <member name="M:Simphony.ResourcesExtensions.GetMemoryStream(System.Resources.ResourceManager,System.String)">
            <summary>
            Returns the value of a binary resource as a memory stream.
            </summary>
            <param name="resourceManager">
            The resource manager.
            </param>
            <param name="name">
            The name of the resource to get.
            </param>
            <returns>
            The value of the resource as a memory stream.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified resource manager or the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified resource is not a binary resource.
            </exception>
        </member>
        <member name="M:Simphony.ResourcesExtensions.GetMetafile(System.Resources.ResourceManager,System.String)">
            <summary>
            Returns the value of a binary resource as a memory stream.
            </summary>
            <param name="resourceManager">
            The resource manager.
            </param>
            <param name="name">
            The name of the resource to get.
            </param>
            <returns>
            The value of the resource as a memory stream.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified resource manager or the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified resource is not a binary resource.
            </exception>
        </member>
        <member name="T:Simphony.WindowsFormsExtensions">
            <summary>
            Extension methods for the System.Windows.Forms namespace.
            </summary>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.AddSeparator(System.Windows.Forms.ToolStripItemCollection)">
            <summary>
            Adds a separator to a <see cref="T:System.Windows.Forms.ToolStripItemCollection"/> collection.
            </summary>
            <param name="toolStripItems">
            The <see cref="T:System.Windows.Forms.ToolStripItemCollection"/> collection to which a separator should be added.
            </param>
            <returns>
            The zero-based index of the new item in the collection.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:System.Windows.Forms.ToolStripItemCollection"/> collection is a null
            reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.CanCopy(System.Windows.Forms.PropertyGrid)">
            <summary>
            Gets a value indicating whether the state of the grid is such that data can be copied to the
            <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <param name="propertyGrid">
            The property grid.
            </param>
            <returns>
            True if the state of the grid is such that data can be copied to the <see cref="T:System.Windows.Forms.Clipboard"/>;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified grid is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.CanCopy(System.Windows.Forms.TextBoxBase)">
            <summary>
            Gets a value indicating whether the state of the text box is such that data can be copied to the
            <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <param name="textBox">
            The text box.
            </param>
            <returns>
            True if the state of the text box is such that data can be copied to the <see cref="T:System.Windows.Forms.Clipboard"/>;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified text box is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.CanCut(System.Windows.Forms.PropertyGrid)">
            <summary>
            Gets a value indicating whether the state of the grid is such that data can be moved to the
            <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <param name="propertyGrid">
            The property grid.
            </param>
            <returns>
            True if the state of the grid is such that data can be moved to the <see cref="T:System.Windows.Forms.Clipboard"/>;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified grid is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.CanCut(System.Windows.Forms.TextBoxBase)">
            <summary>
            Gets a value indicating whether the state of the text box is such that data can be moved to the
            <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <param name="textBox">
            The text box.
            </param>
            <returns>
            True if the state of the text box is such that data can be moved to the <see cref="T:System.Windows.Forms.Clipboard"/>;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified text box is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.CanDelete(System.Windows.Forms.PropertyGrid)">
            <summary>
            Gets a value indicating whether the state of the grid is such that data can be deleted.
            </summary>
            <param name="propertyGrid">
            The property grid.
            </param>
            <returns>
            True if the state of the grid is such that data can be deleted; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified grid is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.CanDelete(System.Windows.Forms.TextBoxBase)">
            <summary>
            Gets a value indicating whether the state of the text box is such that data can be deleted.
            </summary>
            <param name="textBox">
            The text box.
            </param>
            <returns>
            True if the state of the text box is such that data can be deleted; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified text box is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.CanPaste(System.Windows.Forms.PropertyGrid)">
            <summary>
            Gets a value indicating whether the state of the grid is such that data can be pasted from the
            <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <param name="propertyGrid">
            The property grid.
            </param>
            <returns>
            True if the state of the grid is such that data can be pasted from the <see cref="T:System.Windows.Forms.Clipboard"/>;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified grid is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.CanPaste(System.Windows.Forms.TextBoxBase)">
            <summary>
            Gets a value indicating whether the state of the text box is such that data can be pasted from the
            <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <param name="textBox">
            The text box.
            </param>
            <returns>
            True if the state of the text box is such that data can be pasted from the <see cref="T:System.Windows.Forms.Clipboard"/>;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified text box is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.ContainsReadOnlyCells(System.Windows.Forms.DataGridViewSelectedCellCollection)">
            <summary>
            Determines whether the collection contains one or more read-only cells.
            </summary>
            <param name="collection">
            The collection.
            </param>
            <returns>
            True if the collection contains one or more read-only cells; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified collection is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.Copy(System.Windows.Forms.PropertyGrid)">
            <summary>
            Copies the current selection in the grid to the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <param name="propertyGrid">
            The property grid.
            </param>
            <remarks>
            If the grid is not in a state in which data can be copied to the <see cref="T:System.Windows.Forms.Clipboard"/>, this
            method simply does nothing (no exception will be thrown).
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified grid is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.Cut(System.Windows.Forms.PropertyGrid)">
            <summary>
            Moves the current selection in the grid to the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <param name="propertyGrid">
            The property grid.
            </param>
            <remarks>
            If the grid is not in a state in which data can be moved to the <see cref="T:System.Windows.Forms.Clipboard"/>,
            this method simply does nothing (no exception will be thrown).
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified grid is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.Delete(System.Windows.Forms.PropertyGrid)">
            <summary>
            Deletes the current selection in the grid.
            </summary>
            <param name="propertyGrid">
            The property grid.
            </param>
            <remarks>
            If the grid is not in a state in which data can be deleted, this method simply
            does nothing (no exception will be thrown).
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified grid is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.Delete(System.Windows.Forms.TextBoxBase)">
            <summary>
            Deletes the current selection in the text box.
            </summary>
            <param name="textBox">
            The text box.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified text box is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.GetFormattingRectangle(System.Windows.Forms.TextBoxBase)">
            <summary>
            Gets the formatting rectangle of a specified text box.
            </summary>
            <param name="textBox">
            The text box.
            </param>
            <returns>
            The formatting rectangle of the specified text box.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified text box is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.GetNormalBounds(System.Windows.Forms.Form)">
            <summary>
            Gets the bounds of a specified form when it is in the normal (i.e not maximized or
            minimized) state.
            </summary>
            <param name="form">
            The form whose bounds should be returned.
            </param>
            <returns>
            The bounds of the specified form when it is in the normal (i.e not maximized or
            minimized) state.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified form is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified form is not associated with a handle.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.Invoke(System.Windows.Forms.Control,System.Action)">
            <summary>
            Executes an <see cref="T:System.Action"/> on the thread that owns the control's underlying window
            handle.
            </summary>
            <param name="control">
            The control.
            </param>
            <param name="action">
            The action to execute.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the specified control or the specified action is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.Paste(System.Windows.Forms.PropertyGrid)">
            <summary>
            Replaces the current selection in the grid with the contents of the <see cref="T:System.Windows.Forms.Clipboard"/>.
            </summary>
            <param name="propertyGrid">
            The property grid.
            </param>
            <remarks>
            If the <see cref="T:System.Windows.Forms.Clipboard"/> does not contain data that can be pasted into the grid, this
            method simply does nothing (no exception will be thrown).
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified grid is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.SetFormattingRectangle(System.Windows.Forms.TextBoxBase,System.Drawing.Rectangle)">
            <summary>
            Sets the formatting rectangle of a specified text box.
            </summary>
            <param name="textBox">
            The text box.
            </param>
            <param name="rectangle">
            The rectangle.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified text box is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified rectangle is degenerate.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.SetRtfOrText(System.Windows.Forms.RichTextBox,System.String)">
            <summary>
            Sets the text of a <see cref="T:System.Windows.Forms.RichTextBox"/> control taking into account whether the text
            is in rich text format or not.
            </summary>
            <param name="richTextBox">
            The <see cref="T:System.Windows.Forms.RichTextBox"/> control whose text is to be set.
            </param>
            <param name="text">
            The text to be set.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified control or the specified text is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the text is in an invalid rich text format.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.SetSelectedProperty(System.Windows.Forms.PropertyGrid,System.String)">
            <summary>
            Sets the selected grid item of a property grid to the specified property.
            </summary>
            <param name="propertyGrid">
            The property grid.
            </param>
            <param name="propertyName">
            The name of the property.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified property grid or the specified property name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified property name is an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if a property with the specified name does not exist.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if there is no item currently selected in the property grid.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.ToArray(System.Windows.Forms.ComboBox.ObjectCollection)">
            <summary>
            Creates an array from a <see cref="T:System.Windows.Forms.ComboBox.ObjectCollection"/>.
            </summary>
            <param name="items">
            A <see cref="T:System.Windows.Forms.ComboBox.ObjectCollection"/> to create an array from.
            </param>
            <returns>
            An array that contains the items in the <see cref="T:System.Windows.Forms.ComboBox.ObjectCollection"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:System.Windows.Forms.ComboBox.ObjectCollection"/> is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.WindowsFormsExtensions.TryParseFormattedValue``1(System.Windows.Forms.DataGridViewCell,System.Object,System.Windows.Forms.DataGridViewCellStyle,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,``0@)">
            <summary>
            Attempts to convert a value formatted for display to an actual cell value.
            </summary>
            <typeparam name="T">
            The type of value to return.
            </typeparam>
            <param name="cell">
            The cell.
            </param>
            <param name="formattedValue">
            The display value of the cell.
            </param>
            <param name="cellStyle">
            The <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> in effect for the cell.
            </param>
            <param name="formattedValueTypeConverter">
            A <see cref="T:System.ComponentModel.TypeConverter"/> for the display value type, or null reference
            to use the default converter.
            </param>
            <param name="valueTypeConverter">
            A <see cref="T:System.ComponentModel.TypeConverter"/> for the cell value type, or null reference to
            use the default converter.
            </param>
            <param name="value">
            When the method returns, the actual cell value if the conversion succeeded;
            otherwise, the default for the value type .
            </param>
            <returns>
            True if the conversion was successful; otherwise false.
            </returns>
        </member>
        <member name="T:Simphony.XmlSerializationExtensions">
            <summary>
            Extension methods for the System.Xml.Serialization namespace.
            </summary>
        </member>
        <member name="M:Simphony.XmlSerializationExtensions.Deserialize(System.Xml.Serialization.IXmlSerializable,System.IO.Stream)">
            <summary>
            Deserializes an object from a stream.
            </summary>
            <param name="obj">
            The object to deserialize.
            </param>
            <param name="stream">
            The stream from which the object should be deserialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object or the specified stream is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.XmlSerializationExtensions.Deserialize(System.Xml.Serialization.IXmlSerializable,System.IO.Stream,System.Xml.Schema.XmlSchema)">
            <summary>
            Deserializes an object from a stream.
            </summary>
            <param name="obj">
            The object to deserialize.
            </param>
            <param name="stream">
            The stream from which the object should be deserialized.
            </param>
            <param name="schema">
            The XML schema to use for validation when deserializing.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object, the specified stream, or the specified schema
            is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.XmlSerializationExtensions.Deserialize(System.Xml.Serialization.IXmlSerializable,System.IO.TextReader)">
            <summary>
            Deserializes an object from a text reader.
            </summary>
            <param name="obj">
            The object to deserialize.
            </param>
            <param name="reader">
            The text reader from which the object should be deserialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object or the specified text reader is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.XmlSerializationExtensions.Deserialize(System.Xml.Serialization.IXmlSerializable,System.IO.TextReader,System.Xml.Schema.XmlSchema)">
            <summary>
            Deserializes an object from a text reader.
            </summary>
            <param name="obj">
            The object to deserialize.
            </param>
            <param name="reader">
            The text reader from which the object should be deserialized.
            </param>
            <param name="schema">
            The XML schema to use for validation when deserializing.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object, the specified text reader, or the specified schema
            is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.XmlSerializationExtensions.Deserialize(System.Xml.Serialization.IXmlSerializable,System.Xml.XmlReader)">
            <summary>
            Deserializes an object from an XML reader.
            </summary>
            <param name="obj">
            The object to deserialize.
            </param>
            <param name="reader">
            The XML reader from which the object should be deserialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object or the specified XML reader is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.XmlSerializationExtensions.Serialize(System.Xml.Serialization.IXmlSerializable,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Serializes an object to an IO stream.
            </summary>
            <param name="obj">
            The object to serialize.
            </param>
            <param name="stream">
            The stream to which the object should be serialized.
            </param>
            <param name="encoding">
            The encoding to generate. If encoding is null reference it writes out the stream as UTF-8 and omits the
            encoding attribute from the processing instruction.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object or the specified stream is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.XmlSerializationExtensions.Serialize(System.Xml.Serialization.IXmlSerializable,System.IO.TextWriter)">
            <summary>
            Serializes an object to a text writer.
            </summary>
            <param name="obj">
            The object to serialize.
            </param>
            <param name="writer">
            The text writer to which the object should be serialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object or the specified text writer is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.XmlSerializationExtensions.Serialize(System.Xml.Serialization.IXmlSerializable,System.Xml.XmlWriter)">
            <summary>
            Serializes an object to an XML writer.
            </summary>
            <param name="obj">
            The object to serialize.
            </param>
            <param name="writer">
            The XML writer to which the object should be serialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object or the specified XML writer is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.XmlSerializationExtensions.SerializeToString(System.Xml.Serialization.IXmlSerializable)">
            <summary>
            Serializes an object to an XML string.
            </summary>
            <param name="obj">
            The object to serialize.
            </param>
            <returns>
            An XML string containing the serialized object.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified object is a null reference.
            </exception>
        </member>
        <member name="T:Simphony.GenericCollectionExtensions">
            <summary>
            Extension methods for the System.Collections.Generic namespace.
            </summary>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.AddNew``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Creates and adds a new item to a collection.
            </summary>
            <typeparam name="T">
            The type of item stored in the collection.
            </typeparam>
            <param name="collection">
            The collection to which a new item should be added.
            </param>
            <returns>
            The item that was created and added to the collection.
            </returns>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Produces the set difference of two sequences by using the default equality comparer to compare values.
            </summary>
            <typeparam name="T">
            The type of the element in the sequences.
            </typeparam>
            <param name="first">
            The sequence from which elements are to be removed.
            </param>
            <param name="second">
            The elements to be removed from the returned sequence.
            </param>
            <returns>
            A sequence that contains the set difference of the elements of two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the either of the specified sequences is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.Find``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by a specified predicate, and
            returns the first occurrence within the entire list.
            </summary>
            <typeparam name="T">
            The type of the element in the list.
            </typeparam>
            <param name="list">
            The list to search.
            </param>
            <param name="match">
            The predicate that defines the conditions of the element to search for.
            </param>
            <returns>
            The first element that matches the conditions defined by the specified predicate, if found;
            otherwise, the default value for type <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified list or the specified predicate is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns
            the zero-based index of the first occurrence within the sequence.
            </summary>
            <typeparam name="T">
            The type of the element in the sequences.
            </typeparam>
            <param name="sequence">
            The sequence.
            </param>
            <param name="match">
            A predicate defining the match condition.
            </param>
            <returns>
            The zero-based index of the first occurrence of an element that matches the conditions, if found;
            otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence or the specified predicate is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns
            the zero-based index of the first occurrence within the sequence.
            </summary>
            <typeparam name="T">
            The type of the element in the sequences.
            </typeparam>
            <param name="sequence">
            The sequence.
            </param>
            <param name="startIndex">
            The zero-based starting index of the search.
            </param>
            <param name="match">
            A predicate defining the match condition.
            </param>
            <returns>
            The zero-based index of the first occurrence of an element that matches the conditions, if found;
            otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence or the specified predicate is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified start index is negative.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns
            the zero-based index of the first occurrence within the sequence.
            </summary>
            <typeparam name="T">
            The type of the element in the sequences.
            </typeparam>
            <param name="sequence">
            The sequence.
            </param>
            <param name="startIndex">
            The zero-based starting index of the search.
            </param>
            <param name="count">
            The number of elements in the section to search.
            </param>
            <param name="match">
            A predicate defining the match condition.
            </param>
            <returns>
            The zero-based index of the first occurrence of an element that matches the conditions, if found;
            otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence or the specified predicate is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified start index or the specified count is negative.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of a specified sequence.
            </summary>
            <typeparam name="T">
            The type of the element in the sequences.
            </typeparam>
            <param name="sequence">
            The sequence.
            </param>
            <param name="action">
            The action to perform.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence or the specified action is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
            <param name="dictionary">
            The dictionary from which to retrieve the value.
            </param>
            <param name="key">
            The key of the value to get.
            </param>
            <returns>
            The value associated with the key if found; otherwise the default for the value type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified dictionary is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates a specified separator string between each element of a specified sequence of strings,
            yielding a single concatenated string.
            </summary>
            <param name="sequence">
            The sequence of strings.
            </param>
            <param name="separator">
            The separator string.
            </param>
            <returns>
            A string consisting of the strings in the sequence interspersed with the separator string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence is a null reference.
            </exception>
            <remarks>
            If the specified separator string is a null reference, the empty string is used instead.
            </remarks>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximum element of a sequence according to a key.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector.
            </typeparam>
            <param name="source">
            A sequence of values to determaxe the maximum of.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <returns>
            The element with the maximum key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence or the specified key selector is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified sequence is empty.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the maximum element of a sequence according to a key by using a specified comparer.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector.
            </typeparam>
            <param name="source">
            A sequence of values to determaxe the maximum of.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <param name="comparer">
            An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys; or a null reference if
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/> should be used.
            </param>
            <returns>
            The element with the maximum key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence or the specified key selector is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified sequence is empty.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.MaxByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximum element of a sequence according to a key.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector.
            </typeparam>
            <param name="source">
            A sequence of values to determaxe the maximum of.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <returns>
            The element with the maximum key; or a null reference if the specified sequence is empty.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence or the specified key selector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.MaxByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the maximum element of a sequence according to a key by using a specified comparer.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector.
            </typeparam>
            <param name="source">
            A sequence of values to determaxe the maximum of.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <param name="comparer">
            An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys; or a null reference if
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/> should be used.
            </param>
            <returns>
            The element with the maximum key; or a null reference if the specified sequence is empty.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence or the specified key selector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the minimum element of a sequence according to a key.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector.
            </typeparam>
            <param name="source">
            A sequence of values to determine the minimum of.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <returns>
            The element with the minimum key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence or the specified key selector is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified sequence is empty.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the minimum element of a sequence according to a key by using a specified comparer.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector.
            </typeparam>
            <param name="source">
            A sequence of values to determine the minimum of.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <param name="comparer">
            An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys; or a null reference if
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/> should be used.
            </param>
            <returns>
            The element with the minimum key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence or the specified key selector is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified sequence is empty.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.MinByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the minimum element of a sequence according to a key.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector.
            </typeparam>
            <param name="source">
            A sequence of values to determine the minimum of.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <returns>
            The element with the minimum key; or a null reference if the specified sequence is empty.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence or the specified key selector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.MinByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the minimum element of a sequence according to a key by using a specified comparer.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector.
            </typeparam>
            <param name="source">
            A sequence of values to determine the minimum of.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <param name="comparer">
            An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys; or a null reference if
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/> should be used.
            </param>
            <returns>
            The element with the minimum key; or a null reference if the specified sequence is empty.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence or the specified key selector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.OrderByElements``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sorts the elements of a sequence in ascending order.
            </summary>
            <typeparam name="T">
            The type of the element in the sequence.
            </typeparam>
            <param name="sequence">
            The sequence to sort.
            </param>
            <returns>
            A sequence containing the sorted elements.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence is a null reference.
            </exception>
            <remarks>
            This method is equivalent to calling the OrderBy method with the identity
            function for the key function.
            </remarks>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.Product(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the product of a sequence of <see cref="T:System.Double"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Double"/> values to calculate the sum of.
            </param>
            <returns>
            The product of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence is a null reference.
            </exception>
            <remarks>
            The method returns one if the sequence is empty.
            </remarks>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.Product``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the product of the sequence of <see cref="T:System.Double"/> values that are obtained by
            invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <returns>
            The product of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the specified sequence or the specified selector is a null reference.
            </exception>
            <remarks>
            The method returns one if the sequence is empty.
            </remarks>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.RandomlySelect``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Randomly selects a specified number of items from a list.
            </summary>
            <typeparam name="T">
            The type of item stored in the list.
            </typeparam>
            <param name="list">
            The list from which items should be selected.
            </param>
            <param name="count">
            The number of items to select from the list.
            </param>
            <returns>
            A sequence containing items randomly selected from the list.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified list is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified count is negative or greater than the length of the list.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.Remove``1(System.Collections.Generic.Queue{``0},``0)">
            <summary>
            Removes an item from a queue.
            </summary>
            <typeparam name="T">
            The type of item stored in the queue.
            </typeparam>
            <param name="queue">
            The queue from which the item should be removed.
            </param>
            <param name="item">
            The item to remove.
            </param>
            <returns>
            True if the item was successfully removed from the queue; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified queue is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.Remove``1(System.Collections.Generic.Stack{``0},``0)">
            <summary>
            Removes an item from a stack.
            </summary>
            <typeparam name="T">
            The type of item stored in the stack.
            </typeparam>
            <param name="stack">
            The stack from which the item should be removed.
            </param>
            <param name="item">
            The item to remove.
            </param>
            <returns>
            True if the item was successfully removed from the stack; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified stack is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Removes all the items of a list that match the conditions defined by the specified
            predicate.
            </summary>
            <typeparam name="T">
            The type of item stored in the list.
            </typeparam>
            <param name="list">
            The list from which items should be removed.
            </param>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the items to remove.
            </param>
            <returns>
            The number of items removed from the list.
            </returns>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.SequenceEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether two sequences contain exactly the same elements irrespective of order.
            </summary>
            <typeparam name="T">
            The type of the element in the sequences.
            </typeparam>
            <param name="first">
            The first sequence.
            </param>
            <param name="second">
            The second sequence.
            </param>
            <returns>
            True if the two sequences contain exactly the same elements; otherwise false.
            </returns>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.Sum(System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.TimeSpan"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.TimeSpan"/> values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.TimeSpan})">
            <summary>
            Computes the sum of the sequence of <see cref="T:System.TimeSpan"/> values that are obtained by
            invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the specified sequence or the specified selector is a null reference.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.Sum(System.Collections.Generic.IEnumerable{Simphony.Mathematics.Vector})">
            <summary>
            Computes the sum of a sequence of <see cref="T:Simphony.Mathematics.Vector"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:Simphony.Mathematics.Vector"/> values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the sequence is empty or if the <see cref="T:Simphony.Mathematics.Vector"/> values in the sequence are
            not all of the same dimension.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,Simphony.Mathematics.Vector})">
            <summary>
            Computes the sum of the sequence of <see cref="T:Simphony.Mathematics.Vector"/> values that are obtained by
            invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the specified sequence or the specified selector is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the sequence is empty or if the <see cref="T:Simphony.Mathematics.Vector"/> values in the sequence are
            not all of the same dimension.
            </exception>
        </member>
        <member name="M:Simphony.GenericCollectionExtensions.WeightedAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Func{``0,System.Double})">
            <summary>
            Computes the weighted average of a sequence of <see cref="T:System.Double"/> values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="T">
            The type of the element in the sequences.
            </typeparam>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="valueSelector">
            A transform function to apply to each element to obtain the values.
            </param>
            <param name="weightSelector">
            A transform function to apply to each element to obtain the weights.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if one of <paramref name="source"/>, <paramref name="valueSelector"/>, or
            <paramref name="weightSelector"/> is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the sum of the weights is zero.
            </exception>
        </member>
        <member name="T:Simphony.ThrowHelper">
            <summary>
            Provides helper extension methods for conditional throwing of exceptions. Mainly used for
            guarding input parameters.
            </summary>
        </member>
        <member name="M:Simphony.ThrowHelper.ArgumentAssertion(System.Boolean,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if a specified condition is not true.
            </summary>
            <param name="condition">
            The condition to check.
            </param>
            <param name="message">
            A message for the exception.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified condition is not true.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ArgumentAssertion(System.Boolean,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if a specified condition is not true.
            </summary>
            <param name="condition">
            The condition to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <param name="message">
            A message for the exception.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified condition is not true.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfContainsNull``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an ArgumentException if a sequence contains a null reference.
            </summary>
            <typeparam name="T">
            The type of value in the sequence.
            </typeparam>
            <param name="sequence">
            The sequence to check for null.
            </param>
            <param name="paramName">
            The name of the parameter the sequence represents.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the sequence contains a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfContainsNull``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Throws an ArgumentException if a sequence contains a null reference.
            </summary>
            <typeparam name="T">
            The type of value in the sequence.
            </typeparam>
            <param name="sequence">
            The sequence to check for null.
            </param>
            <param name="paramName">
            The name of the parameter the sequence represents.
            </param>
            <param name="message">
            A message for the exception.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the sequence contains a null reference.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfDegenerate(System.Drawing.Rectangle,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified
            <see cref="T:System.Drawing.Rectangle"/> is degenerate.
            </summary>
            <param name="rect">
            The <see cref="T:System.Drawing.Rectangle"/> to check.
            </param>
            <param name="paramName">
            The name of the parameter the <see cref="T:System.Drawing.Rectangle"/> represents.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the <see cref="T:System.Drawing.Rectangle"/> is degenerate.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfDegenerate(System.Drawing.RectangleF,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified
            <see cref="T:System.Drawing.RectangleF"/> is degenerate.
            </summary>
            <param name="rect">
            The <see cref="T:System.Drawing.RectangleF"/> to check.
            </param>
            <param name="paramName">
            The name of the parameter the <see cref="T:System.Drawing.RectangleF"/> represents.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the <see cref="T:System.Drawing.RectangleF"/> is degenerate.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfDegenerate(System.Drawing.Size,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <see cref="T:System.Drawing.Size"/> is
            degenerate.
            </summary>
            <param name="size">
            The <see cref="T:System.Drawing.Size"/> to check.
            </param>
            <param name="paramName">
            The name of the parameter the <see cref="T:System.Drawing.Size"/> represents.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the <see cref="T:System.Drawing.Size"/> is degenerate.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfDegenerate(System.Drawing.SizeF,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <see cref="T:System.Drawing.SizeF"/>
            is degenerate.
            </summary>
            <param name="size">
            The <see cref="T:System.Drawing.SizeF"/> to check.
            </param>
            <param name="paramName">
            The name of the parameter the <see cref="T:System.Drawing.SizeF"/> represents.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the <see cref="T:System.Drawing.SizeF"/> is degenerate.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfDifferentLength``1(``0[],``0[])">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if two arrays have different lengths.
            </summary>
            <typeparam name="T">
            The type of array.
            </typeparam>
            <param name="first">
            The first array.
            </param>
            <param name="second">
            The second array.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the either array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the two arrays have different lengths.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfDifferentLength``1(``0[],``0[],System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if two arrays have different lengths.
            </summary>
            <typeparam name="T">
            The type of array.
            </typeparam>
            <param name="first">
            The first array.
            </param>
            <param name="second">
            The second array.
            </param>
            <param name="firstName">
            The name of the parameter the first array represents.
            </param>
            <param name="secondName">
            The name of the parameter the second array represents.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the either array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the two arrays have different lengths.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNegative(System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified value is negative.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNegative(System.Double,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified value is negative.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <param name="message">
            A message for the exception.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNegative(System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified value is negative.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNegative(System.Int32,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified value is negative.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <param name="message">
            A message for the exception.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNegative(System.TimeSpan,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified value is negative.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNegative(System.TimeSpan,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified value is negative.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <param name="message">
            A message for the exception.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNotFinite(System.Double,System.String)">
            <summary>
            Throws an ArgumentOutOfRangeException if the specified value is infinite or not a number.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is infinite or not a number.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNotFinite(System.Double,System.String,System.String)">
            <summary>
            Throws an ArgumentOutOfRangeException if the specified value is infinite or not a number.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <param name="message">
            A message for the exception.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is infinite or not a number.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNotFinite(System.Nullable{System.Double},System.String)">
            <summary>
            Throws an ArgumentOutOfRangeException if the specified value is infinite or not a number.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is infinite or not a number.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNotFinite(System.Nullable{System.Double},System.String,System.String)">
            <summary>
            Throws an ArgumentOutOfRangeException if the specified value is infinite or not a number.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <param name="message">
            A message for the exception.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is infinite or not a number.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNotPositive(System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified value is negative or
            zero.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative or zero.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNotPositive(System.Double,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified value is negative or
            zero.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <param name="message">
            A message for the exception.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative or zero.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNotPositive(System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified value is negative or
            zero.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative or zero.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNotPositive(System.Int32,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified value is negative or
            zero.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <param name="message">
            A message for the exception.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative or zero.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNotPositive(System.TimeSpan,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified value is negative or
            zero.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative or zero.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNotPositive(System.TimeSpan,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified value is negative or
            zero.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <param name="message">
            A message for the exception.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is negative or zero.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNull``1(``0,System.String)">
            <summary>
            Throws an ArgumentNullException if the value is null.
            </summary>
            <typeparam name="T">
            The type of the value.
            </typeparam>
            <param name="value">
            The value to check for null.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the value is null.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNull``1(``0,System.String,System.String)">
            <summary>
            Throws an ArgumentNullException if the value is null.
            </summary>
            <typeparam name="T">
            The type of the value.
            </typeparam>
            <param name="value">
            The value to check for null.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <param name="message">
            A message for the exception.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the value is null.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNullOrDegenerate``1(``0[0:,0:],System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/>  if the specified two-dimensional array is
            null or throws an <see cref="T:System.ArgumentException"/> if the specified array is degenerate.
            </summary>
            <typeparam name="T">
            The type of array.
            </typeparam>
            <param name="array">
            The two-dimensional array to check.
            </param>
            <param name="paramName">
            The name of the parameter the array represents.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array is degenerate.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an ArgumentNullException if the specified value is null or throws an
            ArgumentOutOfRangeException if the specified value is an empty string.
            </summary>
            <param name="value">
            The string to check for null or empty.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the value is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified sequence is null or throws
            an <see cref="T:System.ArgumentException"/> if the specified sequence is empty.
            </summary>
            <typeparam name="T">
            The type of value in the sequence.
            </typeparam>
            <param name="sequence">
            The sequence to check.
            </param>
            <param name="paramName">
            The name of the parameter the sequence represents.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified sequence is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified sequence is empty.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNullOrEmpty``1(``0[],System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified array is null or throws an
            <see cref="T:System.ArgumentException"/> if the specified array is empty.
            </summary>
            <typeparam name="T">
            The type of array.
            </typeparam>
            <param name="array">
            The array to check.
            </param>
            <param name="paramName">
            The name of the parameter the array represents.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array is empty.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNullOrWrongLength``1(``0[],System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if an array is a null reference or an
            <see cref="T:System.ArgumentException"/> if the length of the array is not within a specified
            range.
            </summary>
            <typeparam name="T">
            The type of the array.
            </typeparam>
            <param name="array">
            The array to check.
            </param>
            <param name="lowerBound">
            A lower bound on the expected length of the array.
            </param>
            <param name="upperBound">
            An upper bound on the expected length of the array.
            </param>
            <param name="paramName">
            The name of the parameter the array represents.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the length of the specified array is not within the bounds.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfNullOrWrongLength``1(``0[],System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if an array is a null reference or an
            <see cref="T:System.ArgumentException"/> if the length of the array is not greater than or equal
            to a specified minimum.
            </summary>
            <typeparam name="T">
            The type of the array.
            </typeparam>
            <param name="array">
            The array to check.
            </param>
            <param name="minimum">
            The minimum expected length of the array.
            </param>
            <param name="paramName">
            The name of the parameter the array represents.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the length of the specified array is not greater than or equal to the minimum.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfOutOfRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws an ArgumentOutOfRangeException if the specified value is not within the range
            specified by the lowerBound and upperBound parameters.
            </summary>
            <typeparam name="T">
            The type of the value.
            </typeparam>
            <param name="value">
            The value to check that it's not out of range.
            </param>
            <param name="lowerBound">
            The lowest value that's considered being within the range.
            </param>
            <param name="upperBound">
            The highest value that's considered being within the range.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is not within the given range.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ExceptionIfOutOfRange``1(``0,``0,``0,System.String,System.String)">
            <summary>
            Throws an ArgumentOutOfRangeException if the specified value is not within the range
            specified by the lowerBound and upperBound parameters.
            </summary>
            <typeparam name="T">
            The type of the value.
            </typeparam>
            <param name="value">
            The value to check that it's not out of range.
            </param>
            <param name="lowerBound">
            The lowest value that's considered being within the range.
            </param>
            <param name="upperBound">
            The highest value that's considered being within the range.
            </param>
            <param name="paramName">
            The name of the parameter the value represents.
            </param>
            <param name="message">
            A message for the exception.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value is not within the given range.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ValidOperationAssertion(System.Boolean)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a specified condition is not true.
            </summary>
            <param name="condition">
            The condition to check.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified condition is not true.
            </exception>
        </member>
        <member name="M:Simphony.ThrowHelper.ValidOperationAssertion(System.Boolean,System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a specified condition is not true.
            </summary>
            <param name="condition">
            The condition to check.
            </param>
            <param name="message">
            A message for the exception.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified condition is not true.
            </exception>
        </member>
        <member name="T:Simphony.XmlExtensions">
            <summary>
            Extension methods for the <see cref="N:System.Xml"/> namespace.
            </summary>
        </member>
        <member name="M:Simphony.XmlExtensions.GetAttributeAs``1(System.Xml.XmlReader,System.String)">
            <summary>
            Gets the content of an attribute as an object of the type specified.
            </summary>
            <typeparam name="T">
            The type to convert the content to.
            </typeparam>
            <param name="reader">
            The XML reader.
            </param>
            <param name="name">
            The name of the attribute.
            </param>
            <returns>
            The content of the attribute converted to the requested type.
            </returns>
            <remarks>
            This method does not move the reader.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified reader or the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            Thrown if the an attribute with the specified name was not found; or if the content
            could not be converted to the target type.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.GetAttributeAs``1(System.Xml.XmlReader,System.String,``0)">
            <summary>
            Gets the content of an attribute as an object of the type specified.
            </summary>
            <typeparam name="T">
            The type to convert the content to.
            </typeparam>
            <param name="reader">
            The XML reader.
            </param>
            <param name="name">
            The name of the attribute.
            </param>
            <param name="defaultValue">
            A default value for the attribute that is returned if the attribute is
            not found.
            </param>
            <returns>
            The content of the attribute converted to the requested type.
            </returns>
            <remarks>
            This method does not move the reader.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified reader or the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.ReadComplexCollection``1(System.Xml.XmlReader,System.String,System.Collections.Generic.ICollection{``0})">
            <summary>
            Reads a collection of complex elements of the specified type.
            </summary>
            <typeparam name="T">
            The type the complex elements in the collection should be converted to.
            </typeparam>
            <param name="reader">
            The XML reader.
            </param>
            <param name="itemName">
            The name of the elements containing the items.
            </param>
            <param name="collection">
            The collection to which the deserialized complex elements should be added.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified reader, the specified name, or the specified collection
            is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            Thrown if the reader is not positioned on a start element; if the reader is positioned
            on a start element, but its name does not match the one specified; or if the content
            could not be converted to the target type.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.ReadComplexCollection``1(System.Xml.XmlReader,System.String,System.String,System.Collections.Generic.ICollection{``0})">
            <summary>
            Reads a collection of complex elements of the specified type.
            </summary>
            <typeparam name="T">
            The type the complex elements in the collection should be converted to.
            </typeparam>
            <param name="reader">
            The XML reader.
            </param>
            <param name="collectionName">
            The name of the element containing the collection.
            </param>
            <param name="itemName">
            The name of the elements containing the items.
            </param>
            <param name="collection">
            The collection to which the deserialized complex elements should be added.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified reader, either of the specified names, or the specified collection
            is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified names is an empty string.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            Thrown if the reader is not positioned on a start element; if the reader is positioned
            on a start element, but its name does not match the one specified; or if the content
            could not be converted to the target type.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.ReadComplexElement(System.Xml.XmlReader,System.String,System.Xml.Serialization.IXmlSerializable)">
            <summary>
            Reads the content of a complex element into a specified object.
            </summary>
            <param name="reader">
            The XML reader.
            </param>
            <param name="name">
            The name of the element.
            </param>
            <param name="value">
            The object to receive the content.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified reader, the specified name, or the specified object is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            Thrown if the reader is not positioned on a start element; or if the reader is positioned
            on a start element, but its name does not match the one specified.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.ReadComplexElementAs``1(System.Xml.XmlReader,System.String)">
            <summary>
            Reads the content of a complex element as an object of the type specified.
            </summary>
            <typeparam name="T">
            The type to convert the content to.
            </typeparam>
            <param name="reader">
            The XML reader.
            </param>
            <param name="name">
            The name of the element.
            </param>
            <returns>
            The content of the complex element converted to the requested type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified reader or the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            Thrown if the reader is not positioned on a start element; or if the reader is positioned
            on a start element, but its name does not match the one specified.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.ReadContentAs``1(System.Xml.XmlReader)">
            <summary>
            Reads the content as an object of the type specified.
            </summary>
            <typeparam name="T">
            The type to convert the content to.
            </typeparam>
            <param name="reader">
            The XML reader.
            </param>
            <returns>
            The content converted to the requested type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified reader is a null reference.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            Thrown if the content could not be converted to the target type.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.ReadOptionalComplexElement(System.Xml.XmlReader,System.String,System.Xml.Serialization.IXmlSerializable)">
            <summary>
            Reads the content of a complex element into a specified object if the element is present;
            otherwise do nothing.
            </summary>
            <param name="reader">
            The XML reader.
            </param>
            <param name="name">
            The name of the element.
            </param>
            <param name="value">
            The object to receive the content.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified reader, the specified name, or the specified object is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.ReadSimpleCollection``1(System.Xml.XmlReader,System.String,System.Collections.Generic.ICollection{``0})">
            <summary>
            Reads a collection of simple elements of the specified type.
            </summary>
            <typeparam name="T">
            The type the simple elements in the collection should be converted to.
            </typeparam>
            <param name="reader">
            The XML reader.
            </param>
            <param name="itemName">
            The name of the elements containing the items.
            </param>
            <param name="collection">
            The collection to which the deserialized simple elements should be added.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified reader, the specified name, or the specified collection
            is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            Thrown if the reader is not positioned on a start element; if the reader is positioned
            on a start element, but its name does not match the one specified; or if the content
            could not be converted to the target type.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.ReadSimpleCollection``1(System.Xml.XmlReader,System.String,System.String,System.Collections.Generic.ICollection{``0})">
            <summary>
            Reads a collection of simple elements of the specified type.
            </summary>
            <typeparam name="T">
            The type the simple elements in the collection should be converted to.
            </typeparam>
            <param name="reader">
            The XML reader.
            </param>
            <param name="collectionName">
            The name of the element containing the collection.
            </param>
            <param name="itemName">
            The name of the elements containing the items.
            </param>
            <param name="collection">
            The collection to which the deserialized simple elements should be added.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified reader, either of the specified names, or the specified collection
            is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified names is an empty string.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            Thrown if the reader is not positioned on a start element; if the reader is positioned
            on a start element, but its name does not match the one specified; or if the content
            could not be converted to the target type.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.ReadSimpleDictionary``2(System.Xml.XmlReader,System.String,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Reads a dictionary of simple elements of the specified type.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
            <param name="reader">
            The XML reader.
            </param>
            <param name="itemName">
            The name of the elements containing the items.
            </param>
            <param name="dictionary">
            The dictionary to which the deserialized simple elements should be added.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified reader, the specified name, or the specified dictionary
            is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            Thrown if the reader is not positioned on a start element; if the reader is positioned
            on a start element, but its name does not match the one specified; or if the content
            could not be converted to the target type.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.ReadSimpleDictionary``2(System.Xml.XmlReader,System.String,System.String,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Reads a dictionary of simple elements of the specified type.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
            <param name="reader">
            The XML reader.
            </param>
            <param name="dictionaryName">
            The name of the element containing the dictionary.
            </param>
            <param name="itemName">
            The name of the elements containing the items.
            </param>
            <param name="dictionary">
            The dictionary to which the deserialized simple elements should be added.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified reader, either of the specified names, or the specified dictionary
            is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified names is an empty string.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            Thrown if the reader is not positioned on a start element; if the reader is positioned
            on a start element, but its name does not match the one specified; or if the content
            could not be converted to the target type.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.ReadSimpleElementAs``1(System.Xml.XmlReader,System.String)">
            <summary>
            Reads the content of a simple element as an object of the type specified.
            </summary>
            <typeparam name="T">
            The type to convert the content to.
            </typeparam>
            <param name="reader">
            The XML reader.
            </param>
            <param name="name">
            The name of the element.
            </param>
            <returns>
            The content of the simple element converted to the requested type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified reader or the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            Thrown if the reader is not positioned on a start element; if the reader is positioned
            on a start element, but its name does not match the one specified; or if the content
            could not be converted to the target type.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.ReadSimpleElementAs``1(System.Xml.XmlReader,System.String,``0)">
            <summary>
            Reads the content of a simple element as an object of the type specified.
            </summary>
            <typeparam name="T">
            The type to convert the content to.
            </typeparam>
            <param name="reader">
            The XML reader.
            </param>
            <param name="name">
            The name of the element.
            </param>
            <param name="defaultValue">
            A default value for the simple element that is returned if the simple element is
            not found.
            </param>
            <returns>
            The content of the simple element converted to the requested type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified reader or the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            Thrown if the reader is not positioned on a start element; or if the content
            could not be converted to the target type.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.SkipIfPresent(System.Xml.XmlReader,System.String)">
            <summary>
            Skips the children of the current node of it has a specified name.
            </summary>
            <param name="reader">
            The XML reader.
            </param>
            <param name="name">
            The name of the node to skip.
            </param>
            <returns>
            True if a skip operation took place; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified reader or the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.ValidateAgainstNamedObject(System.Xml.XmlReader,Simphony.Collections.ISimpleNamedObject)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the current node doesn't correspond to
            a specified <see cref="T:Simphony.Collections.INamedObject"/>.
            </summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> to validate.
            </param>
            <param name="namedObject">
            The <see cref="T:Simphony.Collections.INamedObject"/> against which the reader should be validated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:System.Xml.XmlReader"/> or the specified <see cref="T:Simphony.Collections.INamedObject"/>
            is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the current node doesn't correspond to the specified <see cref="T:Simphony.Collections.INamedObject"/>.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.WriteAttribute(System.Xml.XmlWriter,System.String,System.Object)">
            <summary>
            Writes an attribute.
            </summary>
            <param name="writer">
            The XML writer.
            </param>
            <param name="name">
            The name of the attribute.
            </param>
            <param name="value">
            The object value to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified writer or the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.WriteComplexCollection``1(System.Xml.XmlWriter,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes a collection of complex elements.
            </summary>
            <typeparam name="T">
            The type of the items in the collection.
            </typeparam>
            <param name="writer">
            The XML writer.
            </param>
            <param name="itemName">
            The name of the elements containing the items.
            </param>
            <param name="collection">
            The collection to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified writer, the specified name, or the specified collection
            is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.WriteComplexCollection``1(System.Xml.XmlWriter,System.String,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes a collection of complex elements.
            </summary>
            <typeparam name="T">
            The type of the items in the collection.
            </typeparam>
            <param name="writer">
            The XML writer.
            </param>
            <param name="collectionName">
            The name of the element containing the collection.
            </param>
            <param name="itemName">
            The name of the elements containing the items.
            </param>
            <param name="collection">
            The collection to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified writer, either of the specified names, or the specified collection
            is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified names is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.WriteComplexElement(System.Xml.XmlWriter,System.String,System.Xml.Serialization.IXmlSerializable)">
            <summary>
            Writes a complex element.
            </summary>
            <param name="writer">
            The XML writer.
            </param>
            <param name="name">
            The name of the element.
            </param>
            <param name="value">
            The object value to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified writer or the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.WriteComplexElement(System.Xml.XmlWriter,System.String,System.String,System.Xml.Serialization.IXmlSerializable)">
            <summary>
            Writes a complex element.
            </summary>
            <param name="writer">
            The XML writer.
            </param>
            <param name="name">
            The name of the element.
            </param>
            <param name="ns">
            The namespace URI to associated with the element.
            </param>
            <param name="value">
            The object value to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified writer or the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.WriteContent(System.Xml.XmlWriter,System.Byte[])">
            <summary>
            Writes an array of bytes as content.
            </summary>
            <param name="writer">
            The XML writer.
            </param>
            <param name="value">
            The array to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified writer or the specified array is a null reference.
            </exception>
            <remarks>
            The array is written as a string of hexadecimal digits.
            </remarks>
        </member>
        <member name="M:Simphony.XmlExtensions.WriteContent(System.Xml.XmlWriter,System.Object)">
            <summary>
            Writes an object as content.
            </summary>
            <param name="writer">
            The XML writer.
            </param>
            <param name="value">
            The object to write.
            </param>
            <remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified writer is a null reference.
            </exception>
            This extension method differs from the regular WriteValue method in that it writes
            enumerated types as strings rather than numbers.
            </remarks>
        </member>
        <member name="M:Simphony.XmlExtensions.WriteSimpleCollection``1(System.Xml.XmlWriter,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes a collection of simple elements.
            </summary>
            <typeparam name="T">
            The type of the items in the collection.
            </typeparam>
            <param name="writer">
            The XML writer.
            </param>
            <param name="itemName">
            The name of the elements containing the items.
            </param>
            <param name="collection">
            The collection to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified writer, the specified name, or the specified collection
            is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.WriteSimpleCollection``1(System.Xml.XmlWriter,System.String,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes a collection of simple elements.
            </summary>
            <typeparam name="T">
            The type of the items in the collection.
            </typeparam>
            <param name="writer">
            The XML writer.
            </param>
            <param name="collectionName">
            The name of the element containing the collection.
            </param>
            <param name="itemName">
            The name of the elements containing the items.
            </param>
            <param name="collection">
            The collection to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified writer, either of the specified names, or the specified collection
            is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified names is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.WriteSimpleDictionary``2(System.Xml.XmlWriter,System.String,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Writes a dictionary of simple elements.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
            <param name="writer">
            The XML writer.
            </param>
            <param name="itemName">
            The name of the elements containing the items.
            </param>
            <param name="dictionary">
            The dictionary to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified writer, the specified name, or the specified dictionary is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.WriteSimpleDictionary``2(System.Xml.XmlWriter,System.String,System.String,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Writes a dictionary of simple elements.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
            <param name="writer">
            The XML writer.
            </param>
            <param name="dictionaryName">
            The name of the element containing the dictionary.
            </param>
            <param name="itemName">
            The name of the elements containing the items.
            </param>
            <param name="dictionary">
            The dictionary to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified writer, either of the specified names, or the specified dictionary
            is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if either of the specified names is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.WriteSimpleElement(System.Xml.XmlWriter,System.String,System.Byte[])">
            <summary>
            Writes a simple element.
            </summary>
            <param name="writer">
            The XML writer.
            </param>
            <param name="name">
            The name of the element.
            </param>
            <param name="value">
            A byte array to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified writer, the specified name, or the specified array is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
        <member name="M:Simphony.XmlExtensions.WriteSimpleElement(System.Xml.XmlWriter,System.String,System.Object)">
            <summary>
            Writes a simple element.
            </summary>
            <param name="writer">
            The XML writer.
            </param>
            <param name="name">
            The name of the element.
            </param>
            <param name="value">
            The object value to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified writer or the specified name is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified name is an empty string.
            </exception>
        </member>
    </members>
</doc>
